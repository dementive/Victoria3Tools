# Static Imperator Rome game data used in for autocomplete, documentation on hover, and more

import sublime

from JominiTools.src import JominiGameData
from .game_object_manager import GameObjectManager

manager = GameObjectManager()


class VictoriaGameData(JominiGameData):
    """Class to hold all data generated from the base game logs"""

    def __init__(self):
        # Manually added lists, add custom stuff here
        self.CustomTriggersList = {
            "MFE_has_building": 'Check if scoped object has a building that satisfies the provided triggers.<br>MFE_has_building = {<br>&nbsp;&nbsp;&nbsp;&nbsp;S(scope) = 1(country)/2(state)/3(building)<br>&nbsp;&nbsp;&nbsp;&nbsp;T(trigger) = "Trigger"<br>&nbsp;&nbsp;&nbsp;&nbsp;K(kind) = 1(poor)/2(rich)/3(any)<br>}'
        }
        self.CustomEffectsList = {}
        self.CustomScopesList = {
            "nand": "a negated AND trigger<br>Supported Scopes: none",
            "nor": "a negated OR trigger<br>Supported Scopes: none",
            "not": "negates content of trigger<br>Supported Scopes: none",
            "or": "at least one entry inside trigger must be true<br>Supported Scopes: none",
            "NAND": "a negated AND trigger<br>Supported Scopes: none",
            "NOR": "a negated OR trigger<br>Supported Scopes: none",
            "NOT": "negates content of trigger<br>Supported Scopes: none",
            "OR": "at least one entry inside trigger must be true<br>Supported Scopes: none",
        }
        self.ValueFieldCompletionList = {
            "integer_range": "Gives random integer in a range",
            "add": "Add value",
            "subtract": "Subtract value",
            "divide": "Divide value",
            "multiply": "Multiply value",
            "modulo": "Remainder of division",
            "floor": "Round down",
            "ceiling": "Round up",
            "round": "Round to nearest integer",
            "min": "Set minimum possible value",
            "max": "Set maximum possible value",
            "if": "Conditionally change value",
            "else_if": "Conditionally change value",
            "else": "Conditionally change value",
            "value": "Set base value",
            "desc": "Script value description",
            "fixed_range": "Gives random fixed point in a range",
            "round_to": "Rounds to the nearest specified number",
        }
        self.EventSoundsList = {
            "event:/SFX/Events/africa/animism",
            "event:/SFX/Events/africa/city_center",
            "event:/SFX/Events/africa/construction_colony",
            "event:/SFX/Events/africa/desert_expedition",
            "event:/SFX/Events/africa/diplomats_negotiating",
            "event:/SFX/Events/africa/leader_arguing",
            "event:/SFX/Events/africa/prosperous_farm",
            "event:/SFX/Events/africa/public_protest",
            "event:/SFX/Events/africa/soldiers_breaking_protest",
            "event:/SFX/Events/asia/buddhism",
            "event:/SFX/Events/asia/confucianism_shinto",
            "event:/SFX/Events/asia/dead_cattle_poor_harvest",
            "event:/SFX/Events/asia/factory_accident",
            "event:/SFX/Events/asia/farmers_market",
            "event:/SFX/Events/asia/hinduism_sikhism",
            "event:/SFX/Events/asia/politician_parliament_motion",
            "event:/SFX/Events/asia/poor_people_moving",
            "event:/SFX/Events/asia/sepoy_mutiny",
            "event:/SFX/Events/asia/union_leader",
            "event:/SFX/Events/europenorthamerica/american_civil_war",
            "event:/SFX/Events/europenorthamerica/before_the_battle",
            "event:/SFX/Events/europenorthamerica/capitalists_meeting",
            "event:/SFX/Events/europenorthamerica/gold_prospectors",
            "event:/SFX/Events/europenorthamerica/judaism",
            "event:/SFX/Events/europenorthamerica/london_center",
            "event:/SFX/Events/europenorthamerica/native_american",
            "event:/SFX/Events/europenorthamerica/opium_smoker",
            "event:/SFX/Events/europenorthamerica/political_extremism",
            "event:/SFX/Events/europenorthamerica/rich_and_poor",
            "event:/SFX/Events/europenorthamerica/russian_serfs",
            "event:/SFX/Events/europenorthamerica/slaves_breaking_their_chains",
            "event:/SFX/Events/europenorthamerica/springtime_of_nation",
            "event:/SFX/Events/europenorthamerica/sufferage",
            "event:/SFX/Events/middleeast/battlefield_trenches",
            "event:/SFX/Events/middleeast/courtroom_upheaval",
            "event:/SFX/Events/middleeast/engineer_blueprint",
            "event:/SFX/Events/middleeast/islam",
            "event:/SFX/Events/middleeast/jungle_expedition",
            "event:/SFX/Events/middleeast/middleclass_cafe",
            "event:/SFX/Events/middleeast/oil_derricks",
            "event:/SFX/Events/middleeast/police_breaking_door",
            "event:/SFX/Events/middleeast/upperclass_party",
            "event:/SFX/Events/misc/1Character_Banner",
            "event:/SFX/Events/misc/2Characters",
            "event:/SFX/Events/southamerica/aristocrats",
            "event:/SFX/Events/southamerica/child_labor",
            "event:/SFX/Events/southamerica/christianity",
            "event:/SFX/Events/southamerica/election",
            "event:/SFX/Events/southamerica/factory_opening",
            "event:/SFX/Events/southamerica/public_figure_assassination",
            "event:/SFX/Events/southamerica/slaves_night",
            "event:/SFX/Events/southamerica/war_civilians",
            "event:/SFX/Events/unspecific/airplane",
            "event:/SFX/Events/unspecific/airship",
            "event:/SFX/Events/unspecific/arctic",
            "event:/SFX/Events/unspecific/armored_train",
            "event:/SFX/Events/unspecific/art_gallery",
            "event:/SFX/Events/unspecific/automobile",
            "event:/SFX/Events/unspecific/destruction",
            "event:/SFX/Events/unspecific/devastation",
            "event:/SFX/Events/unspecific/factory_closed",
            "event:/SFX/Events/unspecific/gears_pistons",
            "event:/SFX/Events/unspecific/iceberg_in_the_antartica",
            "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people",
            "event:/SFX/Events/unspecific/military_parade",
            "event:/SFX/Events/unspecific/naval_battle",
            "event:/SFX/Events/unspecific/sick_people_in_a_field_hospital",
            "event:/SFX/Events/unspecific/signed_contract",
            "event:/SFX/Events/unspecific/steam_ship",
            "event:/SFX/Events/unspecific/temperance_movement",
            "event:/SFX/Events/unspecific/trains",
            "event:/SFX/Events/unspecific/vandalized_storefront",
            "event:/SFX/Events/unspecific/whaling",
            "event:/SFX/Events/unspecific/world_fair",
        }
        self.EventVideos = [
            "gfx/event_pictures/africa_animism.bk2",
            "gfx/event_pictures/africa_city_center.bk2",
            "gfx/event_pictures/africa_construction_colony.bk2",
            "gfx/event_pictures/africa_desert_expedition.bk2",
            "gfx/event_pictures/africa_diplomats_negotiating.bk2",
            "gfx/event_pictures/africa_leader_arguing.bk2",
            "gfx/event_pictures/africa_prosperous_farm.bk2",
            "gfx/event_pictures/africa_public_protest.bk2",
            "gfx/event_pictures/africa_soldiers_breaking_protest.bk2",
            "gfx/event_pictures/asia_buddhism.bk2",
            "gfx/event_pictures/asia_confucianism_shinto.bk2",
            "gfx/event_pictures/asia_dead_cattle_poor_harvest.bk2",
            "gfx/event_pictures/asia_factory_accident.bk2",
            "gfx/event_pictures/asia_farmers_market.bk2",
            "gfx/event_pictures/asia_hinduism_sikhism.bk2",
            "gfx/event_pictures/asia_politician_parliament_motion.bk2",
            "gfx/event_pictures/asia_poor_people_moving.bk2",
            "gfx/event_pictures/asia_sepoy_mutiny.bk2",
            "gfx/event_pictures/asia_union_leader.bk2",
            "gfx/event_pictures/asia_westerners_arriving.bk2",
            "gfx/event_pictures/europenorthamerica_american_civil_war.bk2",
            "gfx/event_pictures/europenorthamerica_antarctica.bk2",
            "gfx/event_pictures/europenorthamerica_art_gallery.bk2",
            "gfx/event_pictures/europenorthamerica_before_the_battle.bk2",
            "gfx/event_pictures/europenorthamerica_capitalists_meeting.bk2",
            "gfx/event_pictures/europenorthamerica_gold_prospectors.bk2",
            "gfx/event_pictures/europenorthamerica_judaism.bk2",
            "gfx/event_pictures/europenorthamerica_london_center.bk2",
            "gfx/event_pictures/europenorthamerica_native_american.bk2",
            "gfx/event_pictures/europenorthamerica_opium_smoker.bk2",
            "gfx/event_pictures/europenorthamerica_political_extremism.bk2",
            "gfx/event_pictures/europenorthamerica_rich_and_poor.bk2",
            "gfx/event_pictures/europenorthamerica_russian_serfs.bk2",
            "gfx/event_pictures/europenorthamerica_springtime_of_nations.bk2",
            "gfx/event_pictures/europenorthamerica_sufferage.bk2",
            "gfx/event_pictures/middleeast_battlefield_trenches.bk2",
            "gfx/event_pictures/middleeast_courtroom_upheaval.bk2",
            "gfx/event_pictures/middleeast_engineer_blueprint.bk2",
            "gfx/event_pictures/middleeast_islam.bk2",
            "gfx/event_pictures/middleeast_jungle_expedition.bk2",
            "gfx/event_pictures/middleeast_middleclass_cafe.bk2",
            "gfx/event_pictures/middleeast_oil_derricks.bk2",
            "gfx/event_pictures/middleeast_police_breaking_door.bk2",
            "gfx/event_pictures/middleeast_upperclass_party.bk2",
            "gfx/event_pictures/public_assasination_test.bk2",
            "gfx/event_pictures/southamerica_aristocrats.bk2",
            "gfx/event_pictures/southamerica_child_labor.bk2",
            "gfx/event_pictures/southamerica_christianity.bk2",
            "gfx/event_pictures/southamerica_election.bk2",
            "gfx/event_pictures/southamerica_factory_opening.bk2",
            "gfx/event_pictures/southamerica_public_figure_assassination.bk2",
            "gfx/event_pictures/southamerica_slave_chains.bk2",
            "gfx/event_pictures/southamerica_slaves_night.bk2",
            "gfx/event_pictures/southamerica_war_civilians.bk2",
            "gfx/event_pictures/unspecific_airPlane.bk2",
            "gfx/event_pictures/unspecific_armored_train.bk2",
            "gfx/event_pictures/unspecific_automobile.bk2",
            "gfx/event_pictures/unspecific_devastation.bk2",
            "gfx/event_pictures/unspecific_factory_closed.bk2",
            "gfx/event_pictures/unspecific_fire.bk2",
            "gfx/event_pictures/unspecific_gears_pistons.bk2",
            "gfx/event_pictures/unspecific_iceberg.bk2",
            "gfx/event_pictures/unspecific_military_parade.bk2",
            "gfx/event_pictures/unspecific_naval_battle.bk2",
            "gfx/event_pictures/unspecific_politicians_arguing.bk2",
            "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2",
            "gfx/event_pictures/unspecific_sick_in_hospital.bk2",
            "gfx/event_pictures/unspecific_signed_contract.bk2",
            "gfx/event_pictures/unspecific_steam_ship.bk2",
            "gfx/event_pictures/unspecific_temperance_movement.bk2",
            "gfx/event_pictures/unspecific_trains.bk2",
            "gfx/event_pictures/unspecific_vandalized_storefront.bk2",
            "gfx/event_pictures/unspecific_whaling.bk2",
            "gfx/event_pictures/unspecific_world_fair.bk2",
            "gfx/event_pictures/unspecififc_airship.bk2",
        ]

    @property
    def game_effects(self):
        return {
            "abandon_revolution": "Removes interest group from revolution  <br>abandon_revolution = yes/no  <br><b>Supported Scopes</b>: interest_group  ",
            "activate_building": "Activate a building in a state  <br>activate_building = { building = building_key }  <br><b>Supported Scopes</b>: state  ",
            "activate_law": "Activates a law for a country  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law_type  ",
            "activate_production_method": "Activates the named production method for buildings of a certain type in country/state  <br><b>Supported Scopes</b>: country, state  ",
            "add_arable_land": "Add/remove arable land from a state region  <br><b>Supported Scopes</b>: state_region  ",
            "add_banned_goods": "Adds a total ban of a good to a country  <br>add_banned_goods = <goods key/scope>  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "add_change_relations_progress": "Add progress towards changing relations between two countries  <br>add_change_relations_progress = {  <br>    tcountry = country scope/tag  <br>  value = amount  <br>}  <br><b>Supported Scopes</b>: country  ",
            "add_character_role": "Adds a new role to a character  <br>add_character_role = general  <br><b>Supported Scopes</b>: character  ",
            "add_civil_war_progress": "Adds the specified number of percentage points to a civil war progress (range is [0, 1], 0.1 means 10 percentage points)  <br>add_civil_war_progress = 0.1 / -0.1  <br><b>Supported Scopes</b>: civil_war  ",
            "add_claim": "Adds scoped state region as a claim for target country  <br>add_claim = scope/country  <br><b>Supported Scopes</b>: state_region  <br><b>Supported Targets</b>: country  ",
            "add_cohesion_number": "Adds a specific amount of Cohesion to the Power Bloc in scope  <br>add_cohesion_number = 100 [adds 100 points to Cohesion]  <br><b>Supported Scopes</b>: power_bloc  ",
            "add_cohesion_percent": "Adds a percentage-based amount of Cohesion to the Power Bloc in scope  <br>add_cohesion_percent = -0.2 [reduces Cohesion by 20% of its maximum value]  <br><b>Supported Scopes</b>: power_bloc  ",
            "add_commander_rank": "Promotes/demotes a character a given amount of military ranks  <br><b>Supported Scopes</b>: character  ",
            "add_company": "Adds company type to a country's companies  <br>add_company = company_type:key  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: company_type  ",
            "add_cultural_community": "Adds a cultural community for the target culture in the scoped state.  <br> scope:some_state = { add_cultural_community = cu:zulu }  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: culture  ",
            "add_cultural_community_in_state": "Adds a cultural community for the scoped culture in the target state.  <br> cu:zulu = { add_cultural_community_in_state = scope:some_state }  <br><b>Supported Scopes</b>: culture  <br><b>Supported Targets</b>: state  ",
            "add_cultural_obsession": "Adds a new obsession to the culture in scope  <br>add_cultural_obsession = X  <br>Where X is a goods  <br><b>Supported Scopes</b>: culture  ",
            "add_culture_standard_of_living_modifier": "Apply a standard of living modifier in the scoped state for the given culture. Other than the required culture argument, this effect has the same syntax as add_modifier.  <br><b>Supported Scopes</b>: state  ",
            "add_declared_interest": "Will create a declared interest in the target strategic region  <br>c:FRA = { add_declared_interest = region_nile_basin }  <br><b>Supported Scopes</b>: country  ",
            "add_devastation": "Add/remove devastation from a state region  <br><b>Supported Scopes</b>: state_region  ",
            "add_diplomatic_play_war_support": "Adds war support to the target country in the scoped diplomatic play. The amount will appear under the 'situations' header in tooltips  <br>add_diplomatic_play_war_support = { target = country value = value }  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "add_enactment_modifier": "Adds an enactment-related timed modifier effect to object in scope  <br><b>Supported Scopes</b>: country  ",
            "add_enactment_phase": "Changes the current law enactment phase in scope country by an added amount. The result will be clamped between 0 and NPolitics::LAW_ENACTMENT_MAX_PHASES. The enacting law will pass if the resulting value equals NPolitics::LAW_ENACTMENT_MAX_PHASES.  <br><b>Supported Scopes</b>: country  ",
            "add_enactment_setback": "Changes the current law enactment setback count in scope country by an added amount. The result will be clamped between 0 and country_law_max_setbacks_add The law enactment will fail if the resulting value equals country_law_max_setbacks_add  <br><b>Supported Scopes</b>: country  ",
            "add_era_researched": "Add specified era as researched in a country scope  <br>add_era_researched = era  <br><b>Supported Scopes</b>: country  ",
            "add_escalation": "Add escalation to a diplomatic play  <br>add_escalation = integer  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "add_experience": "Adds an amount of experience to a commander  <br>add_experience = 0.2  <br><b>Supported Scopes</b>: character  ",
            "add_homeland": "Adds scoped state region as Homeland for target culture  <br> add_homeland = cu:culture  <br><b>Supported Scopes</b>: state_region  <br><b>Supported Targets</b>: culture  ",
            "add_ideology": "Adds an ideology to scoped interest group  <br>add_ideology = x  <br><b>Supported Scopes</b>: interest_group  ",
            "add_ig_to_party": "Adds target interest group to scope party  <br>py:py_key = {  <br>  add_ig_to_party = ig:ig_key  <br>}  <br><b>Supported Scopes</b>: party  <br><b>Supported Targets</b>: interest_group  ",
            "add_initiator_backers": "Add a tag/scope country to the initiator side of a diplomatic play  <br>add_initiator_backers = { list of scopes/tags }  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "add_investment_pool": "Directly adds money to the investment pool  <br>add_investment_pool = 50  <br><b>Supported Scopes</b>: country  ",
            "add_journal_entry": "Adds a journal entry to a scoped country's journal, with optional saved scope target  <br>add_journal_entry = { type = <key> target = <scope> }  <br><b>Supported Scopes</b>: none/all  ",
            "add_law_progress": "Adds x% progress to the current checkpoint of the law being passed (range is [0, 1], 0.1 means 10 percentage points)  <br>add_law_progress = 0.1 / -0.1  <br><b>Supported Scopes</b>: country  ",
            "add_leverage": "Adds the specified amount of leverage for the Power Bloc in scope on the country specified  <br>If the value is positive, also reduces the amount of Leverage of all other Blocs proportionally to match  <br>add_leverage = { target = country_scope value = script_value }  <br><b>Supported Scopes</b>: power_bloc  ",
            "add_liberty_desire": "Adds Liberty Desire to a Subject Country. Does nothing if the scoped country is not a subject in a Diplomatic Pact.  <br>add_liberty_desire = -5  <br><b>Supported Scopes</b>: country  ",
            "add_lobby_member": "Adds an interest group as a member of scope political lobby  <br>add_lobby_member = scope:interest_group  <br><b>Supported Scopes</b>: political_lobby  <br><b>Supported Targets</b>: interest_group  ",
            "add_loyalists": "Adds loyalists to pops in scope country, all parameters except value are optional,  <br>if interest_group is specified pops gain loyalists based on their ig membership,  <br>pop type and strata cannot be used at the same time  <br>add_radicals = {  <br> value = x  <br> interest_group = <scope/ig:key>  <br>   pop_type = <scope/pop_type:key>  <br>   strata = <key>  <br>    culture = <scope/cu:key>  <br>  religion = <scope/rel:key>  <br>}  <br><b>Supported Scopes</b>: country  ",
            "add_loyalists_in_state": "Adds loyalists to pops in scope state, all parameters except value are optional,  <br>if interest_group is specified pops gain loyalists based on their ig membership,  <br>pop type and strata cannot be used at the same time  <br>add_radicals_in_state = {  <br> value = x  <br> interest_group = <scope/ig:key>  <br>   pop_type = <scope/pop_type:key>  <br>   strata = <key>  <br>    culture = <scope/cu:key>  <br>  religion = <scope/rel:key>  <br>}  <br><b>Supported Scopes</b>: state  ",
            "add_modifier": "Adds a timed modifier effect to object in scope  <br><b>Supported Scopes</b>: country, building, character, institution, interest_group, journalentry, political_movement, power_bloc, state  ",
            "add_momentum": "Adds momentum to a Party during a campaign perioddd_momentum = value  <br><b>Supported Scopes</b>: party  ",
            "add_morale": "Adds the specified amount of Morale to the Combat Unit in scope  <br>add_morale = -0.2  <br><b>Supported Scopes</b>: new_combat_unit  ",
            "add_organization": "Adds the specified amount of Organization to the Military Formation in scope  <br>add_organization = -10  <br><b>Supported Scopes</b>: military_formation  ",
            "add_pollution": "Increase/decrease pollution level in a scoped state region  <br>add_pollution = 10  <br><b>Supported Scopes</b>: state_region  ",
            "add_pop_wealth": "Adds the wealth of the pop  <br>add_pop_wealth = { wealth_distribution = {...} update_loyalties = true/false }  <br>Where the distribution adding to wealth of the pop  <br><b>Supported Scopes</b>: pop  ",
            "add_primary_culture": "Adds a culture to the primary cultures of a country  <br>add_primary_culture = X  <br>Where X is a culture scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: culture  ",
            "add_principle": "Adds principle to powerbloc  <br>power_bloc =  <br>{  <br>add_principle = test_principle_group_A_1  <br>}  <br><b>Supported Scopes</b>: power_bloc  ",
            "add_progress": "Adds progress to a journal entry progressbar  <br>add_progress = {value = -5name = example_progress_bar_name}  <br><b>Supported Scopes</b>: journalentry  ",
            "add_radicals": "Adds radicals to pops in scope country, all parameters except value are optional,  <br>if interest_group is specified pops gain radicals based on their ig membership,  <br>pop type and strata cannot be used at the same time  <br>add_radicals = {  <br>    value = x  <br> interest_group = <scope/ig:key>  <br>   pop_type = <scope/pop_type:key>  <br>   strata = <key>  <br>    culture = <scope/cu:key>  <br>  religion = <scope/rel:key>  <br>}  <br><b>Supported Scopes</b>: country  ",
            "add_radicals_in_state": "Adds radicals to pops in scope state, all parameters except value are optional,  <br>if interest_group is specified pops gain radicals based on their ig membership,  <br>pop type and strata cannot be used at the same time  <br>add_radicals_in_state = {  <br>    value = x  <br> interest_group = <scope/ig:key>  <br>   pop_type = <scope/pop_type:key>  <br>   strata = <key>  <br>    culture = <scope/cu:key>  <br>  religion = <scope/rel:key>  <br>}  <br><b>Supported Scopes</b>: state  ",
            "add_random_trait": "Adds a random qualifying Trait of the specified category  <br>add_random_trait = personality / skill / condition  <br><b>Supported Scopes</b>: character  ",
            "add_religion_standard_of_living_modifier": "Apply a standard of living modifier in the scoped state for the given religion. Other than the required religion argument, this effect has the same syntax as add_modifier.  <br><b>Supported Scopes</b>: state  ",
            "add_ruling_interest_group": "Adds interest group to government  <br>add_ruling_interest_group = yes/no  <br><b>Supported Scopes</b>: interest_group  ",
            "add_state_trait": "add state trait in a scoped state region  <br>add_state_trait = <state_trait_name>  <br><b>Supported Scopes</b>: state_region  ",
            "add_target_backers": "Add a tag/scope country to the target side of a diplomatic play  <br>add_target_backers = { list of scopes/tags }  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "add_taxed_goods": "Adds consumption taxes on a good to a country  <br>add_taxed_goods = <goods key/scope>  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "add_technology_progress": "Add technology progress  <br>add_technology_progress = { progress = X technology = Y }  <br>Where X is a fixed point and Y is an technology  <br><b>Supported Scopes</b>: country  ",
            "add_technology_researched": "Research the specified technology in a country scope  <br>add_technology_researched = technology  <br><b>Supported Scopes</b>: country  ",
            "add_to_global_variable_list": "Adds the event target to a variable list  <br>add_to_variable_list = { name = X target = Y }  <br>Where X is the name of the variable  <br>Where Y is an event target  <br><b>Supported Scopes</b>: none/all  ",
            "add_to_list": "Adds the current scope to an arbitrarily-named list (or creates the list if not already present) to be referenced later in the (unbroken) event chain  <br>add_to_list = <string> NOTE, if adding a permanent target to a temporary list, the whole list becomes permanent  <br><b>Supported Scopes</b>: none/all  ",
            "add_to_local_variable_list": "Adds the event target to a variable list  <br>add_to_variable_list = { name = X target = Y }  <br>Where X is the name of the variable  <br>Where Y is an event target  <br><b>Supported Scopes</b>: none/all  ",
            "add_to_temporary_list": "Adds the current scope to an arbitrarily-named list (or creates the list if not already present) to be referenced later in the same effect  <br>add_to_temporary_list = <string> NOTE, if adding a temporary target to a permanent list, the list will stay permanent  <br><b>Supported Scopes</b>: none/all  ",
            "add_to_variable_list": "Adds the event target to a variable list  <br>add_to_variable_list = { name = X target = Y }  <br>Where X is the name of the variable  <br>Where Y is an event target  <br><b>Supported Scopes</b>: none/all  ",
            "add_trait": "Add a trait to a Character  <br>add_trait = trait  <br><b>Supported Scopes</b>: character  ",
            "add_treasury": "Add/remove money from a country  <br>add_treasury = fixed point  <br><b>Supported Scopes</b>: country  ",
            "add_war_exhaustion": "Adds war exhaustion to the target country in the scoped war. The amount will appear under the 'situations' header in tooltips  <br>add_war_exhaustion = { target = country value = value }  <br><b>Supported Scopes</b>: war  ",
            "add_war_goal": "Adds a war goal to a DP. Same data read in as add_war_goal in create_diplomatic_play  <br>random_diplomatic_play = { add_war_goal = { holder = initiator type = secession primary_demand = yes }  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "add_war_war_support": "Adds war support to the target country in the scoped war. The amount will appear under the 'situations' header in tooltips  <br>add_war_war_support = { target = country value = value }  <br><b>Supported Scopes</b>: war  ",
            "annex": "Annexes a country  <br>annex = scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "annex_as_civil_war": "Annexes a country with all the inheritance effects of a victorious side in a civil war  <br>annex_as_civil_war = scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "annex_with_incorporation": "Annexes a country, inheriting incorporation of their states  <br>annex_with_incorporation = scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "assert_if": "Conditionally cause an assert during run time  <br>assert_if = { limit = { X } text = Y }, where X is a trigger and Y is an optional string  <br><b>Supported Scopes</b>: none/all  ",
            "assert_read": "Conditionally cause an assert during read time  <br>assert_read = X, where X is yes or the string to be printed in the assert  <br><b>Supported Scopes</b>: none/all  ",
            "call_election": "Sets the next election date for country in N months  <br>call_election = {  <br>  months = 6  <br>}  <br><b>Supported Scopes</b>: country  ",
            "cancel_enactment": "Stops enacting the country's currently enacting law  <br>cancel_enactment = yes  <br><b>Supported Scopes</b>: country  ",
            "cancel_imposition": "Cancels imposition of the law (not law type) in scope  <br>scope:country.imposed_law = { cancel_imposition = yes }  <br><b>Supported Scopes</b>: none/all  ",
            "change_appeasement": "Change appeasement of scope political lobby  <br>change_appeasement = {  <br>    amount = 1  <br>    factor = trade_agreement_formed  <br>}  <br><b>Supported Scopes</b>: political_lobby  ",
            "change_character_culture": "Changes the culture of the scoped character  <br>change_character_culture = cu:colombian  <br><b>Supported Scopes</b>: character  <br><b>Supported Targets</b>: culture  ",
            "change_character_religion": "Changes the religion of the scoped character  <br>change_character_religion = rel:protestant  <br><b>Supported Scopes</b>: character  <br><b>Supported Targets</b>: religion  ",
            "change_global_variable": "Changes the value or a numeric variable  <br>change_variable = { name = X operation = Y }  <br>Where X is the name of the numeric variable to modify  <br>Where the valid operations are add, subtract, multiply, divide, modulo, min and max  <br>Where Y is a fixed point value, script value or event target of a value type  <br><b>Supported Scopes</b>: none/all  ",
            "change_infamy": "Change infamy of scope country  <br>change_infamy = amount  <br><b>Supported Scopes</b>: country  ",
            "change_institution_investment_level": "Add/remove the investment level for the institution  <br>change_institution_investment_level = {   <br> institution = institution_police  <br>  investment = -1  <br>}  <br><b>Supported Scopes</b>: country  ",
            "change_local_variable": "Changes the value or a numeric variable  <br>change_variable = { name = X operation = Y }  <br>Where X is the name of the numeric variable to modify  <br>Where the valid operations are add, subtract, multiply, divide, modulo, min and max  <br>Where Y is a fixed point value, script value or event target of a value type  <br><b>Supported Scopes</b>: none/all  ",
            "change_pop_culture": "Changes the culture of the scoped pop to a specified culture by a specified percentage  <br>change_pop_culture = { target = cu:spanish value = 0.33 }  <br><b>Supported Scopes</b>: pop  ",
            "change_pop_religion": "Changes the religion of the scoped pop to a specified religion by a specified percentage  <br>change_pop_religion = { target = rel:catholic value = 0.5 }  <br><b>Supported Scopes</b>: pop  ",
            "change_poptype": "Changes the type of the pop to the given type  <br><b>Supported Scopes</b>: pop  <br><b>Supported Targets</b>: pop_type  ",
            "change_relations": "Change relations between two countries  <br>change_relations = {  <br> tcountry = country scope/tag  <br>  value = amount  <br>}  <br><b>Supported Scopes</b>: country  ",
            "change_subject_type": "Changes the subject type of the country in scope while retaining the current Liberty Desire value.  <br>change_subject_type = subject_type_dominion  <br><b>Supported Scopes</b>: country  ",
            "change_tag": "Change the tag for the scoped country  <br>c:GBR = { change_tag = FRA }  <br><b>Supported Scopes</b>: country  ",
            "change_tension": "Change tension between two countries  <br>change_tension = {  <br>   tcountry = country scope/tag  <br>  value = amount  <br>}  <br><b>Supported Scopes</b>: country  ",
            "change_variable": "Changes the value or a numeric variable  <br>change_variable = { name = X operation = Y }  <br>Where X is the name of the numeric variable to modify  <br>Where the valid operations are add, subtract, multiply, divide, modulo, min and max  <br>Where Y is a fixed point value, script value or event target of a value type  <br><b>Supported Scopes</b>: none/all  ",
            "clamp_global_variable": "Clamps a variable the specified max and min  <br>clamp_variable = { name = X max = Y min = Z }  <br>Where X is the name of the variable  <br>Where Y and Z are script values  <br><b>Supported Scopes</b>: none/all  ",
            "clamp_local_variable": "Clamps a variable the specified max and min  <br>clamp_variable = { name = X max = Y min = Z }  <br>Where X is the name of the variable  <br>Where Y and Z are script values  <br><b>Supported Scopes</b>: none/all  ",
            "clamp_variable": "Clamps a variable the specified max and min  <br>clamp_variable = { name = X max = Y min = Z }  <br>Where X is the name of the variable  <br>Where Y and Z are script values  <br><b>Supported Scopes</b>: none/all  ",
            "clear_debt": "Clear country loans = bool  <br><b>Supported Scopes</b>: country  ",
            "clear_enactment_modifier": "Clears the current law enactment modifier of scope country.  <br><b>Supported Scopes</b>: country  ",
            "clear_global_variable_list": "Empties the list  <br>clear_variable_list = variable_name  <br><b>Supported Scopes</b>: none/all  ",
            "clear_local_variable_list": "Empties the list  <br>clear_variable_list = variable_name  <br><b>Supported Scopes</b>: none/all  ",
            "clear_saved_scope": "Clears a saved scope from the top scope  <br>save_scope_as = cool_scope -> clear_saved_scope = cool_scope  <br><b>Supported Scopes</b>: none/all  ",
            "clear_scaled_debt": "Clears an amount of debt equal to the defined multiplier on target's max credit  <br>clear_scaled_debt = value  <br><b>Supported Scopes</b>: country  ",
            "clear_variable_list": "Empties the list  <br>clear_variable_list = variable_name  <br><b>Supported Scopes</b>: none/all  ",
            "complete_objective_subgoal": "Completes an objective subgoal  <br>complete_objective_subgoal = <key>  <br><b>Supported Scopes</b>: country  ",
            "convert_population": "Changes X% of the different religion population to the specified religion.  <br>convert_population = { target = rel:catholic value = 0.5 }  <br><b>Supported Scopes</b>: state  ",
            "copy_laws": "Copies the constitution of the target country scope  <br>Warning: This stops any current enactment.  <br>copy_laws = scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "create_bidirectional_truce": "Create a bidirectional truce between two countries  <br>create_bidirectional_truce = {  <br> tcountry = country scope/tag  <br>  months = integer  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_building": "Creates a building in the scoped state. Supported values are:  <br> building = <building>  <br> activate_production_methods = { <production_methods> }  <br>    subsidized = yes/no  <br>   reserves = [0..1] (percentage of cash reserves the building should be created with)  <br>   add_ownership = { (mutually exclusive with level)  <br>     country = { (give ownership levels to a specific country)  <br>         country = s:GBR (country script target)  <br>           levels = 5  <br>        }  <br>     country = { (give ownership levels to a specific building)  <br>            type = building_financial_district (building type that will get ownership levels, should be self or other ownership type)  <br>         region = STATE_SINAI (region where owning building is placed)  <br>         country = s:GBR (country script target for a region)  <br>          levels = 3  <br>        }  <br> }  <br> level = arable_land/integer(mutually exclusive with add_ownership)  <br>  <br>If level is 'arable_land', the building will be of the necessary level to exhaust all available arable land in the state.  <br>If level is an integer, the building will be of that level  <br>  <br>Please note: this effect works a little differently if there already is a building of the specified type in the state. If that happens:  <br>    1. the level will be the maximum between the scripted level and the level of the existing building  <br>    2. the cash reserves will be the maximum between the scripted value and the existing cash reserves  <br><b>Supported Scopes</b>: state  ",
            "create_character": "Creates a character, any option can be omitted.  <br>create_character = {  <br>    name = loc_key or alternatively first_name and last_name separately  <br>   culture = culture_tag  <br> religion = religion scope (if omitted, it's defined by the character's culture religion)  <br>  female = bool or character scope (gets the same value from the character)  <br> noble = bool or character scope (gets the same value from the character)  <br>  ruler = bool  <br>  heir = bool  <br>   historical = bool  <br> age = integer, range, or character scope (gets the age from a character)  <br>  ideology = ideology key or scope  <br>  interest_group = interest group key or scope  <br>  template = base template to generate the character from  <br>   on_created = effect  <br>   save_scope_as = scope name  <br>    trait_generation = effect  <br> hq = HQ scope or strategic region scope  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_country": "Creates a new country  <br>create_country = {  <br>  tag = TAG           # optional, if not specified origin's tag will be used  <br>    origin = country    # optional, newly created country will inherit certain values from the origin country  <br>                     # at least one of tag or origin must be supplied  <br>  state = state       # can be repeated; at least one state or province must be supplied  <br>    province = province # can be repeated; at least one state or province must be supplied  <br>                        # both states and provinces can be supplied at the same time  <br>  on_created = effect # optional effect that will be run with the newly created country in scope  <br>}  <br><b>Supported Scopes</b>: none/all  ",
            "create_diplomatic_catalyst": "Creates a new diplomatic catalyst  <br>create_diplomatic_catalyst = {  <br>  type = catalyst_relations_level_increased  <br> arget = <country scope>  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_diplomatic_pact": "Create a diplomatic pact between two countries, with scope country as initiator  <br>create_diplomatic_pact = {  <br>    country = country scope/tag  <br>   first_state = state scope/tag  <br> second_state = state scope/tag  <br>    type = diplomatic action type  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_diplomatic_play": "Create a diplomatic play with the scoped object as target  <br>create_diplomatic_play = {  <br>  name = loc_key  <br>    escalation = integer between 0 and 100  <br>    war = bool  <br>    initiator = country scope/tag  <br> type = diplomatic play type  <br>   handle_annexation_as_civil_war = yes/no  <br>   add_initiator_backers = { list of country scopes/tags }  <br>   add_target_backers = { list of country scopes/tags }  <br>  add_war_goal = { holder = country scope/tag, type = x, state = <state target>, country = <country target,> region = <region target>  }  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_dynamic_country": "Creates a new country with a dynamic tag  <br>create_dynamic_country = {  <br> origin = country  # optional, newly created country may inherit certain values from the origin country  <br> country_type = country type # optional if origin is set, may be repeated, will try to inherit country type from origin if not specified  <br> tier = country tier # optional if origin is set, may be repeated, will try to inherit country tier from origin if not specified  <br> culture = culture # optional if origin is set, may be repeated, will try to inherit cultures from origin if not specified  <br> religion = religion # optional if origin is set, if no religion is specified, will try to inherit religion from origin if not specified  <br> capital = state        # optional if states have been supplied, will try to set a capital from supplied states if not specified  <br> cede_state_trigger = trigger # if this trigger is set, each state in the world for which it evaluates true will be ceded to the new country  <br> color = rgb        # optional, will try to inherit map color from origin if not specified  <br> primary_unit_color = rgb       # optional, will try to inherit unit color from origin if not specified  <br> secondary_unit_color = rgb        # optional, will try to inherit unit color from origin if not specified  <br> tertiary_unit_color = rgb         # optional, will try to inherit unit color from origin if not specified  <br> on_created = effect   # optional effect that will be run with the newly created country in scope  <br>}  <br><b>Supported Scopes</b>: none/all  ",
            "create_incident": "Creates a diplomatic incident that generates infamy, with target country as the victim  <br>create_incident = {  <br>   tcountry = country scope/tag  <br>  value = infamy amount  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_mass_migration": "Initiates mass migration of a specific culture from a origin country to a scoped state  <br>create_mass_migration = {  <br>   origin = c:GBR  <br>    culture = cu:english  <br>}  <br><b>Supported Scopes</b>: state  ",
            "create_military_formation": "Creates a military formation  <br>create_military_formation = {  <br> # Optional name  <br>   name = 'name'  <br> # type defaults to army  <br>   type = army/fleet  <br> hq_region = sr:region_russia  <br>  # Add as many combat_unit specifications as necessary  <br> combat_unit = {  <br>       type = unit_type:combat_unit_type_irregular_infantry  <br>      # service_type defaults to regular and conscript is not applicable for fleets  <br>     service_type = regular/conscript  <br>      state_region = s:STATE_MOSCOW  <br>     count = 5  <br> }  <br> # mobilization_options are not applicable for fleets  <br>  mobilization_options = {  <br>      mobilization_option:mobilization_option_basic_supplies  <br>        mobilization_option:mobilization_option_truck_transport  <br>   }  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_political_lobby": "Creates a new political lobby  <br>create_political_lobby = {  <br>  type = lobby_pro_country  <br>  arget = <country scope>  <br>   add_interest_group = <ig scope 1>  <br> add_interest_group = <ig scope 2>  <br> add_interest_group = <ig scope 3>  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_pop": "Creates a pop in the scoped state  <br><b>Supported Scopes</b>: state  ",
            "create_power_bloc": "Creates a power bloc with the scoped object as leader  <br>create_power_bloc = {  <br>    name = loc_key  <br>    map_color = { R G B } or hsv{ H S V }   founding_date = yyyy.mm.dd, optional  <br>  identity = power bloc identity key  <br>    principle = power bloc principle key, can be repeated  <br> member = country scope, can be repeated  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_state": "creates a state in a state region  <br><b>Supported Scopes</b>: state_region  ",
            "create_trade_route": "Creates a new Trade Route  <br>trade_route = {  <br> goods = x  <br> level = x  <br> import = yes/no  <br>   origin = state_region  <br> target = state_region  <br>}  <br><b>Supported Scopes</b>: country  ",
            "create_unidirectional_truce": "Create a unidirectional truce for one country towards another  <br>create_unidirectional_truce = {  <br>    tcountry = country scope/tag  <br>  months = integer  <br>}  <br><b>Supported Scopes</b>: country  ",
            "custom_description": "Wraps effects that get a custom description instead of the auto-generated one  <br>custom_description = {  <br>  text = <effect_localization_key>  <br>  subject = <optional subject scope> #defaults to current scope  <br> object = <optional object scope>  <br>  value = <optional script value>  <br>   ... effects ...  <br>}  <br><b>Supported Scopes</b>: none/all  ",
            "custom_description_no_bullet": "Wraps effects that get a custom description instead of the auto-generated one. Also ensures no bullet point appears  <br>custom_description_no_bullet = {  <br>    text = <effect_localization_key>  <br>  subject = <optional subject scope> #defaults to current scope  <br> object = <optional object scope>  <br>  value = <optional script value>  <br>   ... effects ...  <br>}  <br><b>Supported Scopes</b>: none/all  ",
            "custom_label": "just a tooltip, the scope as object (for grouping, localization).  <br>custom_label = key; alternatively custom_label = { text = key subject = scope (optional) <hidden effects> }  <br><b>Supported Scopes</b>: none/all  ",
            "custom_tooltip": "just a tooltip, the scope as subject (for grouping, localization).  <br>custom_tooltip = key; alternatively custom_tooltip = { text = key subject = scope (optional) <hidden effects> }  <br><b>Supported Scopes</b>: none/all  ",
            "deactivate_building": "Deactivate a building in a state  <br>deactivate_building = { building = building_key }  <br><b>Supported Scopes</b>: state  ",
            "deactivate_law": "Deactivates a law for a country  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law_type  ",
            "deactivate_parties": "Deactivates parties in scoped country.  <br>deactivate_parties = yes  <br><b>Supported Scopes</b>: country  ",
            "debug_log": "Log a string to the debug log when this effect executes, debug_log = message, the message can be a localization string with ROOT, SCOPE and PREV available  <br><b>Supported Scopes</b>: none/all  ",
            "debug_log_scopes": "Log the current scope to the debug log when this effect executes  <br>debug_log_scopes = yes # log full scope info  <br>debug_log_scopes = no  # log only current scope  <br><b>Supported Scopes</b>: none/all  ",
            "decrease_autonomy": "Change a country's subject type to a less autonomus one  <br>decrease_autonomy = yes  <br><b>Supported Scopes</b>: country  ",
            "deploy_to_front": "Deploys the scope formation to the target front  <br>deploy_to_front = p:xFAFAFA.front  <br><b>Supported Scopes</b>: military_formation  <br><b>Supported Targets</b>: front  ",
            "disband_party": "Removes all interest groups from the party, causing it to disband  <br>disband_party = yes  <br><b>Supported Scopes</b>: party  ",
            "disband_political_lobby": "Disband scoped political lobby  <br>disband_political_lobby = yes  <br><b>Supported Scopes</b>: political_lobby  ",
            "disinherit_character": "Strips the scoped character of their heir status in whichever countries apply.  <br>scope:larry = { disinherit_character = yes }  <br><b>Supported Scopes</b>: character  ",
            "else": "Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met  <br>if = { limit = { triggers } effects }  <br>else = { effects }  <br><b>Supported Scopes</b>: none/all  ",
            "else_if": "Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met, and its own limit is met  <br>if = { limit = { triggers } effects }  <br>else_if = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  ",
            "end_play": "End a diplomatic play  <br>end_play = bool  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "end_truce": "Ends any truce betweeen two countries  <br>end_truce = country_scope  <br>}  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_active_law": "Iterate through all active laws in a country  <br>every_active_law = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law  ",
            "every_active_party": "Iterate through all active political parties in a country  <br>every_active_party = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: party  ",
            "every_character": "Iterate through all characters globally  <br>every_character = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "every_character_in_exile_pool": "Iterate through characters in the exile pool  <br>every_character_in_exile_pool = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "every_character_in_void": "Iterate through characters in the void  <br>every_character_in_void = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "every_civil_war": "Iterate through all civil wars related to the scoped country  <br>every_civil_war = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: civil_war  ",
            "every_cobelligerent_in_diplo_play": "Iterate through all co-belligerents of scope country in all diplomatic plays (includes wars)  <br>every_cobelligerent_in_diplo_play = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_cobelligerent_in_war": "Iterate through all co-belligerents of scope country in all wars  <br>every_cobelligerent_in_war = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_combat_unit": "Iterate through all combat units of input scope  <br>Supported scopes: building, military formation, front, battle  <br>every_combat_unit = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: battle, building, front, hq, military_formation  <br><b>Supported Targets</b>: new_combat_unit  ",
            "every_company": "Iterate through all companies in a country  <br>every_company = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: company  ",
            "every_country": "Iterate through all countries globally  <br>every_country = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: country  ",
            "every_diplomatic_catalyst": "Iterate through all diplomatic catalysts in the recent memory of a country  <br>every_diplomatic_catalyst = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: diplomatic_catalyst  ",
            "every_diplomatic_play": "Iterate through all diplomatic plays globally  <br>every_diplomatic_play = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: diplomatic_play  ",
            "every_diplomatically_relevant_country": "Iterate through all diplomatically relevant countries of a country scope  <br>every_diplomatically_relevant_country = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_enemy_in_diplo_play": "Iterate through all enemies of scope country in all diplomatic plays (includes wars)  <br>every_enemy_in_diplo_play = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_enemy_in_war": "Iterate through all enemies of scope country in all wars  <br>every_enemy_in_war = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_in_global_list": "Iterate through all items in global list. list = name or variable = name  <br>every_in_global_list = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  ",
            "every_in_hierarchy": "Any country in current hierarchy, including current  <br>every_in_hierarchy = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_in_list": "Iterate through all items in list. list = name or variable = name  <br>every_in_list = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  ",
            "every_in_local_list": "Iterate through all items in local list. list = name or variable = name  <br>every_in_local_list = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  ",
            "every_interest_group": "Iterate through all interest groups in a country  <br>every_interest_group = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: interest_group  ",
            "every_law": "Iterate through all laws in a country  <br>every_law = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law  ",
            "every_lobby_member": "Iterate through all interest group members of a lobby  <br>every_lobby_member = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: political_lobby  <br><b>Supported Targets</b>: interest_group  ",
            "every_market": "Iterate through all markets globally  <br>every_market = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: market  ",
            "every_market_goods": "Iterate through all active (market) goods in a market  <br>every_market_goods = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: market  <br><b>Supported Targets</b>: market_goods  ",
            "every_member": "Iterate through all interest group members of a party  <br>every_member = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: party  <br><b>Supported Targets</b>: interest_group  ",
            "every_military_formation": "Iterate through all military formations currently present at input scope  <br>Supported scopes: country, front, hq  <br>every_military_formation = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, front, hq  <br><b>Supported Targets</b>: military_formation  ",
            "every_neighbouring_state": "Iterate through all states neighbouring a state region  <br>every_neighbouring_state = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, state, state_region, strategic_region  <br><b>Supported Targets</b>: state  ",
            "every_overlord_or_above": "Any country above current in hierarchy  <br>every_overlord_or_above = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_participant": "Any of two participants of the diplomatic pact in a scope  <br>every_participant = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: diplomatic_pact  <br><b>Supported Targets</b>: country  ",
            "every_political_lobby": "Iterate through all political lobbies in a country or interest group  <br>every_political_lobby = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, interest_group  <br><b>Supported Targets</b>: political_lobby  ",
            "every_political_movement": "Iterate through all political movements in a country  <br>every_political_movement = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: political_movement  ",
            "every_potential_party": "Iterate through all potential political parties in a country  <br>every_potential_party = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: party  ",
            "every_power_bloc": "Iterate through all power blocs  <br>every_power_bloc = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: power_bloc  ",
            "every_power_bloc_member": "Iterate through all members of the scoped power bloc including the leader  <br>every_power_bloc_member = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: power_bloc  <br><b>Supported Targets</b>: country  ",
            "every_preferred_law": "Iterate through all active and possible laws in an interest group's country, ordered by how much they prefer that law  <br>every_preferred_law = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: interest_group  <br><b>Supported Targets</b>: law  ",
            "every_primary_culture": "Primary cultures of the scoped country or country definition  <br>every_primary_culture = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, country_definition, state  <br><b>Supported Targets</b>: culture  ",
            "every_province": "Iterate through all Provinces in the scoped State  <br>every_province = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: province  <br><b>Supported Targets</b>: state  ",
            "every_rival_country": "Any country that is being rivaled by the country in a scope  <br>every_rival_country = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_rivaling_country": "Any country that is rivaling the country in a scope  <br>every_rivaling_country = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_scope_admiral": "Iterate through all admirals in a: country, interestgroup, or military formation  <br>every_scope_admiral = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "every_scope_ally": "Iterate through all allies to a: country  <br>every_scope_ally = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_scope_building": "Iterate through all buildings in a: state, country  <br>every_scope_building = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, state  <br><b>Supported Targets</b>: building  ",
            "every_scope_character": "Iterate through all characters in a: country, interestgroup, or front  <br>every_scope_character = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "every_scope_country": "Iterate through all countries with a presence in the supported scope (currently: market, strategic region)  <br>every_scope_country = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: market, strategic_region  <br><b>Supported Targets</b>: country  ",
            "every_scope_culture": "Iterate through all cultures in the scope  <br>every_scope_culture = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, state  <br><b>Supported Targets</b>: culture  ",
            "every_scope_diplomatic_pact": "Any diplomatic pact of the country in a scope  <br>every_scope_diplomatic_pact = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: diplomatic_pact  ",
            "every_scope_front": "Iterate through all Fronts related to the scoped War  <br>every_scope_front = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: war  <br><b>Supported Targets</b>: front  ",
            "every_scope_general": "Iterate through all generals in a: country, interestgroup, front, or military formation  <br>every_scope_general = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "every_scope_held_interest_marker": "Iterate through all interest markers held by a country  <br>every_scope_held_interest_marker = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: interest_marker  ",
            "every_scope_initiator_ally": "Iterate through all allies to an initiator in a: diplomatic play  <br>every_scope_initiator_ally = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "every_scope_interest_marker": "Iterate through all interest markers in a: country, strategic region  <br>every_scope_interest_marker = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, strategic_region  <br><b>Supported Targets</b>: interest_marker  ",
            "every_scope_play_involved": "Iterate through all involved in a: diplomatic play  <br>every_scope_play_involved = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "every_scope_politician": "Iterate through all politicians in a: country or interestgroup  <br>every_scope_politician = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "every_scope_pop": "Iterate through all pops in a: country, state, interest group, culture  <br>every_scope_pop = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, culture, interest_group, state  <br><b>Supported Targets</b>: pop  ",
            "every_scope_state": "Iterate through all states including provinces from a: country, state_region, theater, or front  <br>every_scope_state = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, front, state_region, strategic_region, theater  <br><b>Supported Targets</b>: state  ",
            "every_scope_target_ally": "Iterate through all allies to a target in a: diplomatic play  <br>every_scope_target_ally = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "every_scope_theater": "Iterate through all theaters in a: country  <br>every_scope_theater = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: theater  ",
            "every_scope_violate_sovereignty_interested_parties": "Iterate through all countries that would be interested if country in scope has their sovereignty violated  <br>every_scope_violate_sovereignty_interested_parties = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_scope_violate_sovereignty_wars": "Iterate through all relevant wars if target country had their sovereignty violated by scoped country  <br>every_scope_violate_sovereignty_wars = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: war  ",
            "every_scope_war": "Iterate through all wars related to the scope  <br>every_scope_war = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: war  ",
            "every_sea_node_adjacent_state": "Iterate through all states that share a sea node with a state  <br>every_sea_node_adjacent_state = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: state  ",
            "every_state": "Iterate through all states globally  <br>every_state = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: state  ",
            "every_state_region": "Iterate through all state regions  <br>every_state_region = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: state_region  ",
            "every_strategic_objective": "Iterate through all Strategic Objective states from the scoped Country  <br>every_strategic_objective = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: state  ",
            "every_subject_or_below": "Any country below current in hierarchy  <br>every_subject_or_below = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "every_supporting_character": "Iterate through all characters that support the scoped political movement  <br>every_supporting_character = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: political_movement  <br><b>Supported Targets</b>: character  ",
            "every_supporting_interest_group": "Iterate through all interest groups supporting a political movement  <br>every_supporting_interest_group = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: political_movement  <br><b>Supported Targets</b>: interest_group  ",
            "every_trade_route": "Iterate through all trade routes in a: market, country, marketgoods  <br>every_trade_route = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country, market, market_goods  <br><b>Supported Targets</b>: trade_route  ",
            "every_valid_mass_migration_culture": "Lists for cultures in the scoped country that are valid for mass migration  <br>every_valid_mass_migration_culture = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: culture  ",
            "exile_character": "Exile a character to the exile pool  <br>exile_character = yes  <br><b>Supported Scopes</b>: character  ",
            "force_resource_depletion": "Forces a resource depletion in state  <br>force_resource_depletion = bg_gold_mining  <br><b>Supported Scopes</b>: state  ",
            "force_resource_discovery": "Forces a resource discovery in state  <br>force_resource_discovery = bg_gold_mining  <br><b>Supported Scopes</b>: state  ",
            "free_character_from_void": "Frees a character from the void, if set to no character is deleted instead  <br>free_character_from_void = yes  <br><b>Supported Scopes</b>: character  ",
            "fully_mobilize_army": "Fully mobilizes scope army  <br>fully_mobilize_army = yes  <br><b>Supported Scopes</b>: military_formation  ",
            "hidden_effect": "Enclosed effects are not shown in tooltips  <br>hidden_effect = { <more effects> }  <br><b>Supported Scopes</b>: none/all  ",
            "if": "Executes enclosed effects if limit criteria are met  <br>if = { limit = { triggers } effects }  <br><b>Supported Scopes</b>: none/all  ",
            "increase_autonomy": "Change a country's subject type to a more autonomus one  <br>increase_autonomy = yes  <br><b>Supported Scopes</b>: country  ",
            "join_power_bloc": "Scoped country joins the power bloc of the target scoped country  <br>join_power_bloc = c:USA  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "join_revolution": "Adds interest group to ongoing revolution  <br>join_revolution = yes/no  <br><b>Supported Scopes</b>: interest_group  ",
            "join_war": "Makes target join a scoped war in a specific side.  <br>join_war = { target = scope:target_country side = root }  <br><b>Supported Scopes</b>: war  ",
            "kill_character": "Kill a character  <br>kill_character = bool (yes - kill [by default], no - don't do anything)  <br>kill_character = {  <br>  hidden = bool (yes - without notification; no - show notification [by default])  <br>   value = bool (yes - kill [by default], no - don't do anything)  <br>}  <br><b>Supported Scopes</b>: character  ",
            "kill_population": "Kills a number of individuals in the population in the scoped country.  <br>  <br>All parameters except percent are optional. Pop type and strata cannot be used at the same time.kill_population = {  <br> value = <integer value>  <br>   culture = <scope/cu:key>  <br>  religion = <scope/rel:key>  <br>    interest_group = <scope/ig:key>  <br>   pop_type = <scope/pop_type:key>  <br>   strata = <key>  <br>}  <br><b>Supported Scopes</b>: country  ",
            "kill_population_in_state": "Kills a number of individuals in the population in the scoped state.  <br>  <br>All parameters except percent are optional. Pop type and strata cannot be used at the same time.kill_population = {  <br>  value = <integer value>  <br>   culture = <scope/cu:key>  <br>  religion = <scope/rel:key>  <br>    interest_group = <scope/ig:key>  <br>   pop_type = <scope/pop_type:key>  <br>   strata = <key>  <br>}  <br><b>Supported Scopes</b>: state  ",
            "kill_population_percent": "Kills a percentage of the population in the scoped country.  <br>  <br>All parameters except percent are optional. Pop type and strata cannot be used at the same time.kill_population_percent = {  <br>    percent = <decimal value>  <br> culture = <scope/cu:key>  <br>  religion = <scope/rel:key>  <br>    interest_group = <scope/ig:key>  <br>   pop_type = <scope/pop_type:key>  <br>   strata = <key>  <br>}  <br><b>Supported Scopes</b>: country  ",
            "kill_population_percent_in_state": "Kills a percentage of the population in the scoped state.  <br>  <br>All parameters except percent are optional. Pop type and strata cannot be used at the same time.kill_population_percent = {  <br> percent = <decimal value>  <br> culture = <scope/cu:key>  <br>  religion = <scope/rel:key>  <br>    interest_group = <scope/ig:key>  <br>   pop_type = <scope/pop_type:key>  <br>   strata = <key>  <br>}  <br><b>Supported Scopes</b>: state  ",
            "lock_trade_route": "Lock a trade route for a set amount of time, preventing it from being cancelled manually  <br>lock_trade_route = {  <br>   years = 5  <br>}  <br><b>Supported Scopes</b>: trade_route  ",
            "make_independent": "Makes a country independent.  <br>make_independent = bool  <br><b>Supported Scopes</b>: country  ",
            "mobilize_army": "Mobilizes scope army  <br>mobilize_army = yes  <br><b>Supported Scopes</b>: military_formation  ",
            "move_pop": "Moves the scoped pop to the specified state (they become unemployed)  <br>move_pop = s:STATE_TUSCANY.region_state:TUS  <br>  <br>NOTE: VERY IMPORTANT! This effect _may_ change the pop type of the moved pop. This will happen under the following conditions:  <br>1. if the current pop type cannot be unemployed, the new pop type will be the default one  <br>2.if the current pop type is a slave type and the target state does not allow slavery, the new pop type will be the default one  <br><b>Supported Scopes</b>: pop  <br><b>Supported Targets</b>: state  ",
            "ordered_active_law": "Iterate through all active laws in a country  <br>ordered_active_law = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law  ",
            "ordered_active_party": "Iterate through all active political parties in a country  <br>ordered_active_party = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: party  ",
            "ordered_character": "Iterate through all characters globally  <br>ordered_character = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "ordered_character_in_exile_pool": "Iterate through characters in the exile pool  <br>ordered_character_in_exile_pool = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "ordered_character_in_void": "Iterate through characters in the void  <br>ordered_character_in_void = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "ordered_civil_war": "Iterate through all civil wars related to the scoped country  <br>ordered_civil_war = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: civil_war  ",
            "ordered_cobelligerent_in_diplo_play": "Iterate through all co-belligerents of scope country in all diplomatic plays (includes wars)  <br>ordered_cobelligerent_in_diplo_play = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_cobelligerent_in_war": "Iterate through all co-belligerents of scope country in all wars  <br>ordered_cobelligerent_in_war = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_combat_unit": "Iterate through all combat units of input scope  <br>Supported scopes: building, military formation, front, battle  <br>ordered_combat_unit = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: battle, building, front, hq, military_formation  <br><b>Supported Targets</b>: new_combat_unit  ",
            "ordered_company": "Iterate through all companies in a country  <br>ordered_company = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: company  ",
            "ordered_country": "Iterate through all countries globally  <br>ordered_country = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: country  ",
            "ordered_diplomatic_catalyst": "Iterate through all diplomatic catalysts in the recent memory of a country  <br>ordered_diplomatic_catalyst = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: diplomatic_catalyst  ",
            "ordered_diplomatic_play": "Iterate through all diplomatic plays globally  <br>ordered_diplomatic_play = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: diplomatic_play  ",
            "ordered_diplomatically_relevant_country": "Iterate through all diplomatically relevant countries of a country scope  <br>ordered_diplomatically_relevant_country = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_enemy_in_diplo_play": "Iterate through all enemies of scope country in all diplomatic plays (includes wars)  <br>ordered_enemy_in_diplo_play = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_enemy_in_war": "Iterate through all enemies of scope country in all wars  <br>ordered_enemy_in_war = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_in_global_list": "Iterate through all items in global list. list = name or variable = name  <br>ordered_in_global_list = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  ",
            "ordered_in_hierarchy": "Any country in current hierarchy, including current  <br>ordered_in_hierarchy = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_in_list": "Iterate through all items in list. list = name or variable = name  <br>ordered_in_list = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  ",
            "ordered_in_local_list": "Iterate through all items in local list. list = name or variable = name  <br>ordered_in_local_list = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  ",
            "ordered_interest_group": "Iterate through all interest groups in a country  <br>ordered_interest_group = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: interest_group  ",
            "ordered_law": "Iterate through all laws in a country  <br>ordered_law = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law  ",
            "ordered_lobby_member": "Iterate through all interest group members of a lobby  <br>ordered_lobby_member = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: political_lobby  <br><b>Supported Targets</b>: interest_group  ",
            "ordered_market": "Iterate through all markets globally  <br>ordered_market = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: market  ",
            "ordered_market_goods": "Iterate through all active (market) goods in a market  <br>ordered_market_goods = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: market  <br><b>Supported Targets</b>: market_goods  ",
            "ordered_member": "Iterate through all interest group members of a party  <br>ordered_member = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: party  <br><b>Supported Targets</b>: interest_group  ",
            "ordered_military_formation": "Iterate through all military formations currently present at input scope  <br>Supported scopes: country, front, hq  <br>ordered_military_formation = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, front, hq  <br><b>Supported Targets</b>: military_formation  ",
            "ordered_neighbouring_state": "Iterate through all states neighbouring a state region  <br>ordered_neighbouring_state = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, state, state_region, strategic_region  <br><b>Supported Targets</b>: state  ",
            "ordered_overlord_or_above": "Any country above current in hierarchy  <br>ordered_overlord_or_above = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_participant": "Any of two participants of the diplomatic pact in a scope  <br>ordered_participant = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: diplomatic_pact  <br><b>Supported Targets</b>: country  ",
            "ordered_political_lobby": "Iterate through all political lobbies in a country or interest group  <br>ordered_political_lobby = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, interest_group  <br><b>Supported Targets</b>: political_lobby  ",
            "ordered_political_movement": "Iterate through all political movements in a country  <br>ordered_political_movement = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: political_movement  ",
            "ordered_potential_party": "Iterate through all potential political parties in a country  <br>ordered_potential_party = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: party  ",
            "ordered_power_bloc": "Iterate through all power blocs  <br>ordered_power_bloc = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: power_bloc  ",
            "ordered_power_bloc_member": "Iterate through all members of the scoped power bloc including the leader  <br>ordered_power_bloc_member = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: power_bloc  <br><b>Supported Targets</b>: country  ",
            "ordered_preferred_law": "Iterate through all active and possible laws in an interest group's country, ordered by how much they prefer that law  <br>ordered_preferred_law = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: interest_group  <br><b>Supported Targets</b>: law  ",
            "ordered_primary_culture": "Primary cultures of the scoped country or country definition  <br>ordered_primary_culture = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, country_definition, state  <br><b>Supported Targets</b>: culture  ",
            "ordered_province": "Iterate through all Provinces in the scoped State  <br>ordered_province = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: province  <br><b>Supported Targets</b>: state  ",
            "ordered_rival_country": "Any country that is being rivaled by the country in a scope  <br>ordered_rival_country = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_rivaling_country": "Any country that is rivaling the country in a scope  <br>ordered_rivaling_country = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_scope_admiral": "Iterate through all admirals in a: country, interestgroup, or military formation  <br>ordered_scope_admiral = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "ordered_scope_ally": "Iterate through all allies to a: country  <br>ordered_scope_ally = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_scope_building": "Iterate through all buildings in a: state, country  <br>ordered_scope_building = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, state  <br><b>Supported Targets</b>: building  ",
            "ordered_scope_character": "Iterate through all characters in a: country, interestgroup, or front  <br>ordered_scope_character = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "ordered_scope_country": "Iterate through all countries with a presence in the supported scope (currently: market, strategic region)  <br>ordered_scope_country = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: market, strategic_region  <br><b>Supported Targets</b>: country  ",
            "ordered_scope_culture": "Iterate through all cultures in the scope  <br>ordered_scope_culture = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, state  <br><b>Supported Targets</b>: culture  ",
            "ordered_scope_diplomatic_pact": "Any diplomatic pact of the country in a scope  <br>ordered_scope_diplomatic_pact = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: diplomatic_pact  ",
            "ordered_scope_front": "Iterate through all Fronts related to the scoped War  <br>ordered_scope_front = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: war  <br><b>Supported Targets</b>: front  ",
            "ordered_scope_general": "Iterate through all generals in a: country, interestgroup, front, or military formation  <br>ordered_scope_general = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "ordered_scope_held_interest_marker": "Iterate through all interest markers held by a country  <br>ordered_scope_held_interest_marker = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: interest_marker  ",
            "ordered_scope_initiator_ally": "Iterate through all allies to an initiator in a: diplomatic play  <br>ordered_scope_initiator_ally = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "ordered_scope_interest_marker": "Iterate through all interest markers in a: country, strategic region  <br>ordered_scope_interest_marker = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, strategic_region  <br><b>Supported Targets</b>: interest_marker  ",
            "ordered_scope_play_involved": "Iterate through all involved in a: diplomatic play  <br>ordered_scope_play_involved = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "ordered_scope_politician": "Iterate through all politicians in a: country or interestgroup  <br>ordered_scope_politician = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "ordered_scope_pop": "Iterate through all pops in a: country, state, interest group, culture  <br>ordered_scope_pop = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, culture, interest_group, state  <br><b>Supported Targets</b>: pop  ",
            "ordered_scope_state": "Iterate through all states including provinces from a: country, state_region, theater, or front  <br>ordered_scope_state = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, front, state_region, strategic_region, theater  <br><b>Supported Targets</b>: state  ",
            "ordered_scope_target_ally": "Iterate through all allies to a target in a: diplomatic play  <br>ordered_scope_target_ally = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "ordered_scope_theater": "Iterate through all theaters in a: country  <br>ordered_scope_theater = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: theater  ",
            "ordered_scope_violate_sovereignty_interested_parties": "Iterate through all countries that would be interested if country in scope has their sovereignty violated  <br>ordered_scope_violate_sovereignty_interested_parties = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_scope_violate_sovereignty_wars": "Iterate through all relevant wars if target country had their sovereignty violated by scoped country  <br>ordered_scope_violate_sovereignty_wars = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: war  ",
            "ordered_scope_war": "Iterate through all wars related to the scope  <br>ordered_scope_war = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: war  ",
            "ordered_sea_node_adjacent_state": "Iterate through all states that share a sea node with a state  <br>ordered_sea_node_adjacent_state = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: state  ",
            "ordered_state": "Iterate through all states globally  <br>ordered_state = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: state  ",
            "ordered_state_region": "Iterate through all state regions  <br>ordered_state_region = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: state_region  ",
            "ordered_strategic_objective": "Iterate through all Strategic Objective states from the scoped Country  <br>ordered_strategic_objective = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: state  ",
            "ordered_subject_or_below": "Any country below current in hierarchy  <br>ordered_subject_or_below = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "ordered_supporting_character": "Iterate through all characters that support the scoped political movement  <br>ordered_supporting_character = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: political_movement  <br><b>Supported Targets</b>: character  ",
            "ordered_supporting_interest_group": "Iterate through all interest groups supporting a political movement  <br>ordered_supporting_interest_group = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: political_movement  <br><b>Supported Targets</b>: interest_group  ",
            "ordered_trade_route": "Iterate through all trade routes in a: market, country, marketgoods  <br>ordered_trade_route = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country, market, market_goods  <br><b>Supported Targets</b>: trade_route  ",
            "ordered_valid_mass_migration_culture": "Lists for cultures in the scoped country that are valid for mass migration  <br>ordered_valid_mass_migration_culture = {  <br>limit = { triggers }  <br>order_by = script_value  <br>position = int  <br>min = int  <br>max = script_value  <br>check_range_bounds = no # If you don't want an error logged if the list is smaller than the min/max  <br>effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: culture  ",
            "place_character_in_void": "Banishes a character to the void, duration is how long character is kept before being deleted  <br>place_character_in_void = months  <br><b>Supported Scopes</b>: character  ",
            "play_as": "Change which country scoped country's player will play as  <br>play_as = <scope>  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "post_notification": "Posts notification  <br><b>Supported Scopes</b>: none/all  ",
            "post_proposal": "Posts proposal  <br><b>Supported Scopes</b>: none/all  ",
            "random": "run an effect depending on a random chance, do nothing otherwise.  <br>random = {  <br>    chance = 0-100     # random chance in percent. can also be a script value or complex math  <br>    modifier = { ... } # optional MTTH-style modifier for the chance  <br>    effects...         # effects to run if the random roll succeeds  <br>}  <br><b>Supported Scopes</b>: none/all  ",
            "random_active_law": "Iterate through all active laws in a country  <br>random_active_law = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law  ",
            "random_active_party": "Iterate through all active political parties in a country  <br>random_active_party = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: party  ",
            "random_character": "Iterate through all characters globally  <br>random_character = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "random_character_in_exile_pool": "Iterate through characters in the exile pool  <br>random_character_in_exile_pool = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "random_character_in_void": "Iterate through characters in the void  <br>random_character_in_void = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "random_civil_war": "Iterate through all civil wars related to the scoped country  <br>random_civil_war = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: civil_war  ",
            "random_cobelligerent_in_diplo_play": "Iterate through all co-belligerents of scope country in all diplomatic plays (includes wars)  <br>random_cobelligerent_in_diplo_play = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_cobelligerent_in_war": "Iterate through all co-belligerents of scope country in all wars  <br>random_cobelligerent_in_war = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_combat_unit": "Iterate through all combat units of input scope  <br>Supported scopes: building, military formation, front, battle  <br>random_combat_unit = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: battle, building, front, hq, military_formation  <br><b>Supported Targets</b>: new_combat_unit  ",
            "random_company": "Iterate through all companies in a country  <br>random_company = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: company  ",
            "random_country": "Iterate through all countries globally  <br>random_country = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: country  ",
            "random_diplomatic_catalyst": "Iterate through all diplomatic catalysts in the recent memory of a country  <br>random_diplomatic_catalyst = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: diplomatic_catalyst  ",
            "random_diplomatic_play": "Iterate through all diplomatic plays globally  <br>random_diplomatic_play = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: diplomatic_play  ",
            "random_diplomatically_relevant_country": "Iterate through all diplomatically relevant countries of a country scope  <br>random_diplomatically_relevant_country = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_enemy_in_diplo_play": "Iterate through all enemies of scope country in all diplomatic plays (includes wars)  <br>random_enemy_in_diplo_play = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_enemy_in_war": "Iterate through all enemies of scope country in all wars  <br>random_enemy_in_war = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_in_global_list": "Iterate through all items in global list. list = name or variable = name  <br>random_in_global_list = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  ",
            "random_in_hierarchy": "Any country in current hierarchy, including current  <br>random_in_hierarchy = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_in_list": "Iterate through all items in list. list = name or variable = name  <br>random_in_list = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  ",
            "random_in_local_list": "Iterate through all items in local list. list = name or variable = name  <br>random_in_local_list = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  ",
            "random_interest_group": "Iterate through all interest groups in a country  <br>random_interest_group = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: interest_group  ",
            "random_law": "Iterate through all laws in a country  <br>random_law = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law  ",
            "random_list": "a random list effect  <br>random_list = { X1 = { trigger = { enables/disable this effect} modifier = Y1 effect1 } X2 = { trigger = { enables/disable this effect} modifier = Y2 effect2 } ... }  <br>Selects one effect from the list and fires it. The effects are weighted by numbers X1, X2... (the higher the number, the higher the chance of the effect being picked).  <br>The chances can be modified by optional value modifier lists Y1, Y2... (AKA MTTH constructs)  <br><b>Supported Scopes</b>: none/all  ",
            "random_lobby_member": "Iterate through all interest group members of a lobby  <br>random_lobby_member = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: political_lobby  <br><b>Supported Targets</b>: interest_group  ",
            "random_log_scopes": "Log the current scope to the random log when this effect executes.  <br>Only use temprorarily for debugging purposes as it can introduce localized strings into the random log.  <br>random_log_scopes = yes # log full scope info  <br>random_log_scopes = no  # log only current scope  <br><b>Supported Scopes</b>: none/all  ",
            "random_market": "Iterate through all markets globally  <br>random_market = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: market  ",
            "random_market_goods": "Iterate through all active (market) goods in a market  <br>random_market_goods = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: market  <br><b>Supported Targets</b>: market_goods  ",
            "random_member": "Iterate through all interest group members of a party  <br>random_member = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: party  <br><b>Supported Targets</b>: interest_group  ",
            "random_military_formation": "Iterate through all military formations currently present at input scope  <br>Supported scopes: country, front, hq  <br>random_military_formation = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, front, hq  <br><b>Supported Targets</b>: military_formation  ",
            "random_neighbouring_state": "Iterate through all states neighbouring a state region  <br>random_neighbouring_state = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, state, state_region, strategic_region  <br><b>Supported Targets</b>: state  ",
            "random_overlord_or_above": "Any country above current in hierarchy  <br>random_overlord_or_above = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_participant": "Any of two participants of the diplomatic pact in a scope  <br>random_participant = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: diplomatic_pact  <br><b>Supported Targets</b>: country  ",
            "random_political_lobby": "Iterate through all political lobbies in a country or interest group  <br>random_political_lobby = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, interest_group  <br><b>Supported Targets</b>: political_lobby  ",
            "random_political_movement": "Iterate through all political movements in a country  <br>random_political_movement = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: political_movement  ",
            "random_potential_party": "Iterate through all potential political parties in a country  <br>random_potential_party = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: party  ",
            "random_power_bloc": "Iterate through all power blocs  <br>random_power_bloc = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: power_bloc  ",
            "random_power_bloc_member": "Iterate through all members of the scoped power bloc including the leader  <br>random_power_bloc_member = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: power_bloc  <br><b>Supported Targets</b>: country  ",
            "random_preferred_law": "Iterate through all active and possible laws in an interest group's country, ordered by how much they prefer that law  <br>random_preferred_law = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: interest_group  <br><b>Supported Targets</b>: law  ",
            "random_primary_culture": "Primary cultures of the scoped country or country definition  <br>random_primary_culture = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, country_definition, state  <br><b>Supported Targets</b>: culture  ",
            "random_province": "Iterate through all Provinces in the scoped State  <br>random_province = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: province  <br><b>Supported Targets</b>: state  ",
            "random_rival_country": "Any country that is being rivaled by the country in a scope  <br>random_rival_country = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_rivaling_country": "Any country that is rivaling the country in a scope  <br>random_rivaling_country = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_scope_admiral": "Iterate through all admirals in a: country, interestgroup, or military formation  <br>random_scope_admiral = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "random_scope_ally": "Iterate through all allies to a: country  <br>random_scope_ally = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_scope_building": "Iterate through all buildings in a: state, country  <br>random_scope_building = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, state  <br><b>Supported Targets</b>: building  ",
            "random_scope_character": "Iterate through all characters in a: country, interestgroup, or front  <br>random_scope_character = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "random_scope_country": "Iterate through all countries with a presence in the supported scope (currently: market, strategic region)  <br>random_scope_country = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: market, strategic_region  <br><b>Supported Targets</b>: country  ",
            "random_scope_culture": "Iterate through all cultures in the scope  <br>random_scope_culture = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, state  <br><b>Supported Targets</b>: culture  ",
            "random_scope_diplomatic_pact": "Any diplomatic pact of the country in a scope  <br>random_scope_diplomatic_pact = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: diplomatic_pact  ",
            "random_scope_front": "Iterate through all Fronts related to the scoped War  <br>random_scope_front = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: war  <br><b>Supported Targets</b>: front  ",
            "random_scope_general": "Iterate through all generals in a: country, interestgroup, front, or military formation  <br>random_scope_general = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "random_scope_held_interest_marker": "Iterate through all interest markers held by a country  <br>random_scope_held_interest_marker = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: interest_marker  ",
            "random_scope_initiator_ally": "Iterate through all allies to an initiator in a: diplomatic play  <br>random_scope_initiator_ally = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "random_scope_interest_marker": "Iterate through all interest markers in a: country, strategic region  <br>random_scope_interest_marker = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, strategic_region  <br><b>Supported Targets</b>: interest_marker  ",
            "random_scope_play_involved": "Iterate through all involved in a: diplomatic play  <br>random_scope_play_involved = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "random_scope_politician": "Iterate through all politicians in a: country or interestgroup  <br>random_scope_politician = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "random_scope_pop": "Iterate through all pops in a: country, state, interest group, culture  <br>random_scope_pop = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, culture, interest_group, state  <br><b>Supported Targets</b>: pop  ",
            "random_scope_state": "Iterate through all states including provinces from a: country, state_region, theater, or front  <br>random_scope_state = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, front, state_region, strategic_region, theater  <br><b>Supported Targets</b>: state  ",
            "random_scope_target_ally": "Iterate through all allies to a target in a: diplomatic play  <br>random_scope_target_ally = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "random_scope_theater": "Iterate through all theaters in a: country  <br>random_scope_theater = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: theater  ",
            "random_scope_violate_sovereignty_interested_parties": "Iterate through all countries that would be interested if country in scope has their sovereignty violated  <br>random_scope_violate_sovereignty_interested_parties = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_scope_violate_sovereignty_wars": "Iterate through all relevant wars if target country had their sovereignty violated by scoped country  <br>random_scope_violate_sovereignty_wars = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: war  ",
            "random_scope_war": "Iterate through all wars related to the scope  <br>random_scope_war = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: war  ",
            "random_sea_node_adjacent_state": "Iterate through all states that share a sea node with a state  <br>random_sea_node_adjacent_state = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: state  ",
            "random_state": "Iterate through all states globally  <br>random_state = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: state  ",
            "random_state_region": "Iterate through all state regions  <br>random_state_region = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: state_region  ",
            "random_strategic_objective": "Iterate through all Strategic Objective states from the scoped Country  <br>random_strategic_objective = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: state  ",
            "random_subject_or_below": "Any country below current in hierarchy  <br>random_subject_or_below = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "random_supporting_character": "Iterate through all characters that support the scoped political movement  <br>random_supporting_character = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: political_movement  <br><b>Supported Targets</b>: character  ",
            "random_supporting_interest_group": "Iterate through all interest groups supporting a political movement  <br>random_supporting_interest_group = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: political_movement  <br><b>Supported Targets</b>: interest_group  ",
            "random_trade_route": "Iterate through all trade routes in a: market, country, marketgoods  <br>random_trade_route = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country, market, market_goods  <br><b>Supported Targets</b>: trade_route  ",
            "random_valid_mass_migration_culture": "Lists for cultures in the scoped country that are valid for mass migration  <br>random_valid_mass_migration_culture = { limit = { triggers } (optional) weight = { mtth } effects }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: culture  ",
            "recalculate_pop_ig_support": "Recalculates and updates a country's pop IG memberships = bool  <br><b>Supported Scopes</b>: country  ",
            "regime_change": "Executes a regime change by the scope country in the target country.  <br>regime_change = scope:upstart_country  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "remove_active_objective_subgoal": "Removes an active objective subgoal  <br>remove_active_objective_subgoal = <key>  <br><b>Supported Scopes</b>: country  ",
            "remove_as_interest_group_leader": "Removes a character from position as interest group leader  <br>remove_as_interest_group_leader = yes  <br><b>Supported Scopes</b>: character  ",
            "remove_banned_goods": "Removes a total ban of a good from a country  <br>remove_banned_goods = <goods key/scope>  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "remove_building": "Remove a building in the scope state  <br>remove_building = building_key  <br><b>Supported Scopes</b>: state  ",
            "remove_character_role": "Removes an existing role from a character  <br>remove_character_role = general  <br><b>Supported Scopes</b>: character  ",
            "remove_claim": "Removes scoped state region as a claim for target country  <br>add_claim = scope/country  <br><b>Supported Scopes</b>: state_region  <br><b>Supported Targets</b>: country  ",
            "remove_company": "Removes company type from a country's companies  <br>remove_company = company_type:key  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: company_type  ",
            "remove_cultural_obsession": "Removes a new obsession to the culture in scope  <br>remove_cultural_obsession = X  <br>Where X is a goods  <br><b>Supported Scopes</b>: culture  ",
            "remove_diplomatic_pact": "Removes a diplomatic pact between two countries, with scope country as initiator  <br>remove_diplomatic_pact = {  <br>   country = country scope/tag  <br>   type = diplomatic action type  <br>}  <br><b>Supported Scopes</b>: country  ",
            "remove_enactment_modifier": "Removes an enactment-related timed modifier effect to object in scope  <br><b>Supported Scopes</b>: country  ",
            "remove_from_list": "Removes the current scope from a named list remove_from_list = <string>  <br><b>Supported Scopes</b>: none/all  ",
            "remove_global_variable": "Removes a variable  <br>remove_variable = variable_name  <br><b>Supported Scopes</b>: none/all  ",
            "remove_homeland": "Removes scoped state region as Homeland for target culture  <br>remove_homeland = cu:culture  <br><b>Supported Scopes</b>: state_region  <br><b>Supported Targets</b>: culture  ",
            "remove_ideology": "Removes an ideology from scoped interest group  <br>remove_ideology = x  <br><b>Supported Scopes</b>: interest_group  ",
            "remove_ig_from_party": "Removes target interest group from scope party  <br>py:py_key = {  <br>    remove_ig_from_party = ig:ig_key  <br>}  <br><b>Supported Scopes</b>: party  <br><b>Supported Targets</b>: interest_group  ",
            "remove_initiator_backers": "Remove a tag/scope country from the initiator side of a diplomatic play  <br>remove_initiator_backers = { list of scopes/tags }  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "remove_list_global_variable": "Removes the target from a variable list  <br>remove_list_variable = { name = X target = Y }  <br>Where X is the name of the variable  <br>Where Y is an event target  <br><b>Supported Scopes</b>: none/all  ",
            "remove_list_local_variable": "Removes the target from a variable list  <br>remove_list_variable = { name = X target = Y }  <br>Where X is the name of the variable  <br>Where Y is an event target  <br><b>Supported Scopes</b>: none/all  ",
            "remove_list_variable": "Removes the target from a variable list  <br>remove_list_variable = { name = X target = Y }  <br>Where X is the name of the variable  <br>Where Y is an event target  <br><b>Supported Scopes</b>: none/all  ",
            "remove_lobby_member": "Removes an interest group as a member of scope political lobby  <br>remove_lobby_member = scope:interest_group  <br><b>Supported Scopes</b>: political_lobby  <br><b>Supported Targets</b>: interest_group  ",
            "remove_local_variable": "Removes a variable  <br>remove_variable = variable_name  <br><b>Supported Scopes</b>: none/all  ",
            "remove_modifier": "Removes a timed modifier effect to object in scope  <br><b>Supported Scopes</b>: country, building, character, institution, interest_group, journalentry, political_movement, power_bloc, state  ",
            "remove_primary_culture": "Removes a culture from the primary cultures of a country  <br>remove_primary_culture = X  <br>Where X is a culture scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: culture  ",
            "remove_principle": "Removes principle from powerbloc  <br>power_bloc =  <br>{  <br>remove_principle = test_principle_group_A_1  <br>}  <br><b>Supported Scopes</b>: power_bloc  ",
            "remove_ruling_interest_group": "Removes interest group in scope from government  <br>remove_ruling_interest_group = yes/no  <br><b>Supported Scopes</b>: interest_group  ",
            "remove_state_trait": "remove state trait in a scoped state region  <br>remove_state_trait = <state_trait_name>  <br><b>Supported Scopes</b>: state_region  ",
            "remove_target_backers": "Remove a tag/scope country to the target side of a diplomatic play  <br>remove_target_backers = { list of scopes/tags }  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "remove_taxed_goods": "Removes consumption taxes on a good from a country  <br>remove_taxed_goods = <goods key/scope>  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "remove_trait": "Remove a trait from a Character  <br>remove_trait = trait  <br><b>Supported Scopes</b>: character  ",
            "remove_variable": "Removes a variable  <br>remove_variable = variable_name  <br><b>Supported Scopes</b>: none/all  ",
            "remove_war_goal": "Removes a war goal from a DP.  <br>any_diplomatic_play = { limit = { has_war_goal = return_state } remove_war_goal = { who = initiator war_goal = return_state } }  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "resolve_play_for": "effect end diplo play for one side, with it gaining war goals  <br>resolve_play_for = initiator  <br>resolve_play_for = scope:custom_scoped_country  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "round_global_variable": "Rounds a variable to the nearest specified value  <br>round_variable = { name = X nearest = Y }  <br>Where X is the name of the variable  <br>Where Y is a script value  <br><b>Supported Scopes</b>: none/all  ",
            "round_local_variable": "Rounds a variable to the nearest specified value  <br>round_variable = { name = X nearest = Y }  <br>Where X is the name of the variable  <br>Where Y is a script value  <br><b>Supported Scopes</b>: none/all  ",
            "round_variable": "Rounds a variable to the nearest specified value  <br>round_variable = { name = X nearest = Y }  <br>Where X is the name of the variable  <br>Where Y is a script value  <br><b>Supported Scopes</b>: none/all  ",
            "save_scope_as": "Saves the current scope as an arbitrarily-named target to be referenced later in the (unbroken) event chain  <br>save_scope_as = <string>  <br><b>Supported Scopes</b>: none/all  ",
            "save_scope_value_as": "Saves a numerical or bool value as an arbitrarily-named target to be referenced later in the (unbroken) event chain  <br>save_scope_value_as = { name = <string> value = x }  <br><b>Supported Scopes</b>: none/all  ",
            "save_temporary_scope_as": "Saves the current scope as an arbitrarily-named temporary target to be referenced later in the same effect  <br>save_temporary_scope_as = <string>  <br><b>Supported Scopes</b>: none/all  ",
            "save_temporary_scope_value_as": "Saves a numerical or bool value as an arbitrarily-named temporary target to be referenced later in the same effect  <br>save_temporary_scope_value_as = { name = <string> value = x }  <br><b>Supported Scopes</b>: none/all  ",
            "seize_investment_pool": "Seize investment pool for the treasury and transfer all private construction queue elements to the government queue = bool  <br><b>Supported Scopes</b>: country  ",
            "set_as_interest_group_leader": "Sets a character as interest group leader  <br>set_as_interest_group_leader = yes  <br><b>Supported Scopes</b>: character  ",
            "set_available_for_autonomous_investment": "Sets a building type as available for autonomous investment in the current scoped State  <br>set_available_for_autonomous_investment = building type scope  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: building_type  ",
            "set_bar_progress": "Sets progress for a journal entry scripted progressbar  <br>set_bar_progress = {value = -5name = example_progress_bar_name}  <br><b>Supported Scopes</b>: journalentry  ",
            "set_capital": "Set capital state in a country scope  <br>set_capital = X  <br>Where X is a state region  <br><b>Supported Scopes</b>: country  ",
            "set_character_as_ruler": "Set scoped character as ruler in their country.  <br>scope:larry = { set_character_as_ruler = yes }  <br><b>Supported Scopes</b>: character  ",
            "set_character_busy_and_immortal": "Mark a character as busy and immortal or clear said mark  <br>set_character_busy = bool  <br><b>Supported Scopes</b>: character  ",
            "set_character_immortal": "Set scoped character as immortal.  <br>scope:larry = { set_character_immortal = yes/no }  <br><b>Supported Scopes</b>: character  ",
            "set_commander_rank": "Promotes/demotes a character to a given military rank value  <br>set_commander_rank = 3  <br><b>Supported Scopes</b>: character  ",
            "set_company_establishment_date": "Sets the establishment date of scope company  <br>set_company_establishment_date = 1782.7.18  <br><b>Supported Scopes</b>: company  ",
            "set_country_type": "Sets the type of country for a country, for history  <br><b>Supported Scopes</b>: country  ",
            "set_devastation": "Set devastation to a state region  <br><b>Supported Scopes</b>: state_region  ",
            "set_diplomats_expelled": "Expels diplomats from target country in scoped country  <br>set_diplomats_expelled = scope:target_country  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "set_global_variable": "Sets a variable  <br>set_variable = { name = X value = Y days = Z }  <br>Where X is the name of the variable used to then access it  <br>Where Y is any event target, bool, value, script value or flag (flag:W)  <br>An optional days where Z is the number of days or script value  <br>This variable will be accessible with <type_>var:X. With type being in a scope object or in a top scope  <br>Can also be used as set_variable = X (equivalent to set_variable = { name = X value = yes })  <br><b>Supported Scopes</b>: none/all  ",
            "set_government_wage_level": "Sets the government wage level of scoped country  <br>set_government_wage_level = very_low/low/medium/high/very_high  <br><b>Supported Scopes</b>: country  ",
            "set_home_country": "Set a character's home country. This makes them start considering themselves as having been exiled, i.e. was_exiled starts evaluating to yes for them.  <br>set_home_country = c:FRA  <br><b>Supported Scopes</b>: character  <br><b>Supported Targets</b>: country  ",
            "set_home_country_definition": "Set a character's home country directly to a tag, you can use this to avoid making sure that the tag exists, this makes them an exile  <br>set_home_country_definition = cd:FRA  <br><b>Supported Scopes</b>: character  <br><b>Supported Targets</b>: country_definition  ",
            "set_ideology": "Changes scoped character's ideology  <br>set_ideology = x  <br><b>Supported Scopes</b>: character  <br><b>Supported Targets</b>: ideology  ",
            "set_ig_bolstering": "Starts/stops bolstering the interest group in scope  <br>set_ig_bolstering = yes/no  <br><b>Supported Scopes</b>: interest_group  ",
            "set_ig_suppression": "Starts/stops suppressing the interest group in scope  <br>set_ig_suppression = yes/no  <br><b>Supported Scopes</b>: interest_group  ",
            "set_ig_trait": "Adds a trait to the Interest Group, or replaces their current trait with the same approval level  <br>set_ig_trait = ig_trait:ig_trait_engines_of_progress  <br><b>Supported Scopes</b>: interest_group  <br><b>Supported Targets</b>: interest_group_trait  ",
            "set_immune_to_revolutions": "Makes a country immune to revolutions or removes such immunity.  <br>set_immune_to_revolutions = yes/no  <br><b>Supported Scopes</b>: country  ",
            "set_institution_investment_level": "Sets the investment level for an institution  <br>set_institution_investment_level = { institution = <key> level = x }  <br><b>Supported Scopes</b>: country  ",
            "set_interest_group_name": "Renames interest group to the specified loc key  <br>set_interest_group_name = x  <br><b>Supported Scopes</b>: interest_group  ",
            "set_key": "Set name to a diplomatic play  <br>set_key = loc_key  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "set_local_variable": "Sets a variable  <br>set_variable = { name = X value = Y days = Z }  <br>Where X is the name of the variable used to then access it  <br>Where Y is any event target, bool, value, script value or flag (flag:W)  <br>An optional days where Z is the number of days or script value  <br>This variable will be accessible with <type_>var:X. With type being in a scope object or in a top scope  <br>Can also be used as set_variable = X (equivalent to set_variable = { name = X value = yes })  <br><b>Supported Scopes</b>: none/all  ",
            "set_market_capital": "Set market capital in a country scope  <br>set_market_capital = X  <br>Where X is a state region  <br><b>Supported Scopes</b>: country  ",
            "set_military_wage_level": "Sets the military wage level of scoped country  <br>set_military_wage_level = very_low/low/medium/high/very_high  <br><b>Supported Scopes</b>: country  ",
            "set_mutual_secret_goal": "Set mutual secret AI goal for scope country and target country  <br>set_mutual_secret_goal = {  <br> tcountry = country scope/tag  <br>  secret_goal = secret goal type  <br>}  <br><b>Supported Scopes</b>: country  ",
            "set_next_election_date": "Set next election date for country  <br>set_next_election_date = year.month.day  <br><b>Supported Scopes</b>: country  ",
            "set_owes_obligation_to": "Set whether a country owes another a obligation  <br>set_owes_obligation = {  <br>   country = country scope/tag  <br>   setting = yes/no  <br>}  <br><b>Supported Scopes</b>: country  ",
            "set_owner_of_provinces": "Gives a set of provinces in a state region to a specific country  <br>set_owner_of_provinces = { country = <scope> provinces = {} }  <br><b>Supported Scopes</b>: state_region  ",
            "set_pop_literacy": "Sets the literacy of the pop  <br>set_pop_literacy = { literacy_rate = {...} }  <br>Where the ratio is a script value computing the percentage of (workforce) pops that will be literate  <br><b>Supported Scopes</b>: pop  ",
            "set_pop_qualifications": "Sets the pop qualifications of the pop for the given type  <br>set_pop_qualifications = { pop_type = {} qualifications = {...} }  <br>Where the qualifications is a script value computing the percentage of (workforce) pops that will have the qualifications  <br><b>Supported Scopes</b>: pop  ",
            "set_pop_wealth": "Sets the wealth of the pop  <br>set_pop_wealth = { wealth_distribution = {...} update_loyalties = true/false }  <br>Where wealth is a script values  <br><b>Supported Scopes</b>: pop  ",
            "set_relations": "Set relations between two countries  <br>set_relations = {  <br>  tcountry = country scope/tag  <br>  value = amount  <br>}  <br><b>Supported Scopes</b>: country  ",
            "set_ruling_interest_groups": "Creates a government for the country in scope from a set of interest groups  <br>set_ruling_interest_groups = { ig_tag1 ig_tag2 }  <br><b>Supported Scopes</b>: country  ",
            "set_ruling_party": "Adds all interest groups in a party to government and removes all other interest groups from the government  <br>set_ruling_party = yes  <br><b>Supported Scopes</b>: party  ",
            "set_secret_goal": "Set a secret AI goal for scope country towards another country  <br>set_secret_goal = {  <br>   tcountry = country scope/tag  <br>  secret_goal = secret goal type  <br>}  <br><b>Supported Scopes</b>: country  ",
            "set_state_owner": "Set State Owner  <br>set_state_owner = scope  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: country  ",
            "set_state_religion": "Changes the state religion of the country to the specified religion  <br>set_state_religion = X  <br>Where X is a religion scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: religion  ",
            "set_state_type": "Sets a state to a certain type (incorporated, unincorporated, treaty_port)  <br><b>Supported Scopes</b>: state  ",
            "set_strategy": "Set AI strategy for scope country  <br>set_strategy = <key>  <br><b>Supported Scopes</b>: country  ",
            "set_subsidized": "Sets whether a building is subsidized  <br>set_subsidized = yes/no  <br><b>Supported Scopes</b>: building  ",
            "set_target_technology": "Sets a (new) target technology scope for a journal entry  <br>set_target_technology = <scope>  <br><b>Supported Scopes</b>: journalentry  ",
            "set_tariffs_export_priority": "Sets Export Prioritized tariffs for a good in scoped country  <br>set_tariffs_export_priority = <scope/key>  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "set_tariffs_import_priority": "Sets Import Prioritized tariffs for a good in scoped country  <br>set_tariffs_import_priority = <scope/key>  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "set_tariffs_no_priority": "Sets tariffs to have no import/export priority for a good in scoped country  <br>set_tariffs_no_priority = <scope/key>  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "set_tax_level": "Sets the overall tax level of scoped country  <br>set_tax_level = very_low/low/medium/high/very_high  <br><b>Supported Scopes</b>: country  ",
            "set_tension": "Set tension between two countries  <br>set_tension = {  <br>    tcountry = country scope/tag  <br>  value = amount  <br>}  <br><b>Supported Scopes</b>: country  ",
            "set_variable": "Sets a variable  <br>set_variable = { name = X value = Y days = Z }  <br>Where X is the name of the variable used to then access it  <br>Where Y is any event target, bool, value, script value or flag (flag:W)  <br>An optional days where Z is the number of days or script value  <br>This variable will be accessible with <type_>var:X. With type being in a scope object or in a top scope  <br>Can also be used as set_variable = X (equivalent to set_variable = { name = X value = yes })  <br><b>Supported Scopes</b>: none/all  ",
            "set_war": "Set a diplomatic play to be a war  <br>set_war = bool  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "show_as_tooltip": "Enclosed effects are only shown in tooltips (but are not actually executed)  <br>show_as_tooltip = { <more effects> }  <br><b>Supported Scopes</b>: none/all  ",
            "start_building_construction": "Start constructing a building in a scoped state as a government construction  <br>start_building_construction = building_barracks  <br><b>Supported Scopes</b>: state  ",
            "start_enactment": "Starts enacting the specified law type for the country in scope  <br>start_enactment = law_type:law_multicultural  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law_type  ",
            "start_privately_funded_building_construction": "Start constructing a building in a scoped state as a private construction  <br>start_privately_funded_building_construction = building_barracks  <br><b>Supported Scopes</b>: state  ",
            "start_research_random_technology": "Scoped country starts research of any random technology they can  <br>start_research_random_technology = yes  <br><b>Supported Scopes</b>: country  ",
            "start_tutorial_lesson": "Starts the tutorial lesson with the given key. Does nothing if the tutorial is not running, the lesson is completed (or already running), or the lesson cannot be triggered (e.g. trigger fails)  <br><b>Supported Scopes</b>: none/all  ",
            "switch": "Switch on a trigger for the evaluation of another trigger with an optional fallback trigger.  <br>switch = {  <br>   trigger = simple_assign_trigger  <br>   case_1 = { effects }  <br>  case_2 = { effects }  <br>  case_n = { effects }  <br>  fallback = { effects }  <br><b>Supported Scopes</b>: none/all  ",
            "take_on_scaled_debt": "Transfers an amount of debt equal to the defined multiplier on target's max credit  <br>take_on_scaled_debt = {  <br>   who = <country>  <br>   value = decimal value  <br>}  <br><b>Supported Scopes</b>: country  ",
            "teleport_to_front": "Teleports the scope formation to the target front  <br>teleport_to_front = p:xFAFAFA.front  <br><b>Supported Scopes</b>: military_formation  <br><b>Supported Targets</b>: front  ",
            "transfer_character": "Transfers current scope character to target country  <br>transfer_character = country  <br><b>Supported Scopes</b>: character  <br><b>Supported Targets</b>: country  ",
            "transfer_to_formation": "Transfers scope character to target formation  <br>transfer_to_formation = scope:formation  <br><b>Supported Scopes</b>: character  <br><b>Supported Targets</b>: military_formation  ",
            "trigger_event": "Triggers an event for the current scope  <br>trigger_event = X  <br>trigger_event = { id = X days/weeks/months/years = Y }  <br>Where X is an event ID and Y is an integer to delay the event by  <br><b>Supported Scopes</b>: none/all  ",
            "try_form_government_with": " Tries to form a new govt with provided IGs, If not possible with legitimacy provided will try and add as many IGs into the govt as possible  <br> try_form_government_with = {  <br>  value = 30  <br>    interest_group_type = ig_armed_forces  <br> interest_group_type = ig_devout  <br>    interest_group_type = ig_landowners}  <br><b>Supported Scopes</b>: country  ",
            "unset_available_for_autonomous_investment": "Sets a building type as unavailable for autonomous investment in the current scoped State  <br>unset_available_for_autonomous_investment = building type scope  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: building_type  ",
            "update_party_support": "Updates party support in scoped country.  <br>update_party_support = yes  <br><b>Supported Scopes</b>: country  ",
            "validate_subsidies": "Validates subsidies across a country's buildings.  <br>validate_subsidies = bool  <br><b>Supported Scopes</b>: country  ",
            "violate_sovereignty_join": "Target joins scoped war  <br>violate_sovereignty_accept = <country>  <br><b>Supported Scopes</b>: country  ",
            "while": "Repeats enclosed effects while limit criteria are met or until set iteration count is reached  <br>while = { limit = { triggers } effects }  <br> while = { count = 3 effects }  <br>Default max of 1000.  <br><b>Supported Scopes</b>: none/all  <br>",
        }

    @property
    def game_triggers(self):
        return {
            "active_lens": "Checks if the specified lens is open  <br>active_lens = lensAn interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "active_lens_option": "Checks if the specified lens option is activated  <br>active_lens_option = lens_option_keyAn interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "add_to_temporary_list": "Saves a temporary target for use during the trigger execution  <br>This is used to build lists in triggers.  <br>If used within an any-trigger, placement within the trigger is quite important. The game will iterate through every instance of the any-trigger until it finds a single instance that fulfills the requirements, and then it will stop.  <br>In order to add every instance of a scope that fulfills certain conditions, use 'count = all' while also placing this 'effect' at the very end of the any-trigger (so that every condition is evaluated for every iteration).  <br><b>Supported Scopes</b>: none/all  ",
            "additional_war_exhaustion": "Compares the additional war exhaustion the scoped country has accumulated from scripted events in the target diplomatic play  <br>additional_war_exhaustion = { target = scope:war.diplomatic_play value > 1.0 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "age": "Compares the character age  <br>age > 20Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: character  ",
            "aggressive_diplomatic_plays_permitted": "True if country is independent or permitted to start their own Diplomatic Plays  <br>aggressive_diplomatic_plays_permitted = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "all_false": "true if all children are false (equivalent to NOR)  <br><b>Supported Scopes</b>: none/all  ",
            "always": "checks if the assigned yes/no value is true  <br>always = yes # always succeeds  <br>always = no  # always fails  <br>always = scope:a_boolean_value # evaluated at runtime  <br>Traits: yes/no   <br><b>Supported Scopes</b>: none/all  ",
            "and": "all inside trigger must be true  <br><b>Supported Scopes</b>: none/all  ",
            "any_active_law": "Iterate through all active laws in a country  <br>any_active_law = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law  ",
            "any_active_party": "Iterate through all active political parties in a country  <br>any_active_party = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: party  ",
            "any_character": "Iterate through all characters globally  <br>any_character = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "any_character_in_exile_pool": "Iterate through characters in the exile pool  <br>any_character_in_exile_pool = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "any_character_in_void": "Iterate through characters in the void  <br>any_character_in_void = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: character  ",
            "any_civil_war": "Iterate through all civil wars related to the scoped country  <br>any_civil_war = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: civil_war  ",
            "any_cobelligerent_in_diplo_play": "Iterate through all co-belligerents of scope country in all diplomatic plays (includes wars)  <br>any_cobelligerent_in_diplo_play = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_cobelligerent_in_war": "Iterate through all co-belligerents of scope country in all wars  <br>any_cobelligerent_in_war = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_combat_unit": "Iterate through all combat units of input scope  <br>Supported scopes: building, military formation, front, battle  <br>any_combat_unit = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: battle, building, front, hq, military_formation  <br><b>Supported Targets</b>: new_combat_unit  ",
            "any_company": "Iterate through all companies in a country  <br>any_company = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: company  ",
            "any_country": "Iterate through all countries globally  <br>any_country = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: country  ",
            "any_diplomatic_catalyst": "Iterate through all diplomatic catalysts in the recent memory of a country  <br>any_diplomatic_catalyst = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: diplomatic_catalyst  ",
            "any_diplomatic_play": "Iterate through all diplomatic plays globally  <br>any_diplomatic_play = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: diplomatic_play  ",
            "any_diplomatically_relevant_country": "Iterate through all diplomatically relevant countries of a country scope  <br>any_diplomatically_relevant_country = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_enemy_in_diplo_play": "Iterate through all enemies of scope country in all diplomatic plays (includes wars)  <br>any_enemy_in_diplo_play = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_enemy_in_war": "Iterate through all enemies of scope country in all wars  <br>any_enemy_in_war = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_false": "true if any child is false (equivalent to NAND)  <br><b>Supported Scopes</b>: none/all  ",
            "any_in_global_list": "Iterate through all items in global list. list = name or variable = name  <br>any_in_global_list = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  ",
            "any_in_hierarchy": "Any country in current hierarchy, including current  <br>any_in_hierarchy = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_in_list": "Iterate through all items in list. list = name or variable = name  <br>any_in_list = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  ",
            "any_in_local_list": "Iterate through all items in local list. list = name or variable = name  <br>any_in_local_list = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  ",
            "any_interest_group": "Iterate through all interest groups in a country  <br>any_interest_group = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: interest_group  ",
            "any_law": "Iterate through all laws in a country  <br>any_law = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law  ",
            "any_lobby_member": "Iterate through all interest group members of a lobby  <br>any_lobby_member = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: political_lobby  <br><b>Supported Targets</b>: interest_group  ",
            "any_market": "Iterate through all markets globally  <br>any_market = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: market  ",
            "any_market_goods": "Iterate through all active (market) goods in a market  <br>any_market_goods = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: market  <br><b>Supported Targets</b>: market_goods  ",
            "any_member": "Iterate through all interest group members of a party  <br>any_member = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: party  <br><b>Supported Targets</b>: interest_group  ",
            "any_military_formation": "Iterate through all military formations currently present at input scope  <br>Supported scopes: country, front, hq  <br>any_military_formation = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, front, hq  <br><b>Supported Targets</b>: military_formation  ",
            "any_neighbouring_state": "Iterate through all states neighbouring a state region  <br>any_neighbouring_state = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, state, state_region, strategic_region  <br><b>Supported Targets</b>: state  ",
            "any_overlord_or_above": "Any country above current in hierarchy  <br>any_overlord_or_above = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_participant": "Any of two participants of the diplomatic pact in a scope  <br>any_participant = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: diplomatic_pact  <br><b>Supported Targets</b>: country  ",
            "any_political_lobby": "Iterate through all political lobbies in a country or interest group  <br>any_political_lobby = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, interest_group  <br><b>Supported Targets</b>: political_lobby  ",
            "any_political_movement": "Iterate through all political movements in a country  <br>any_political_movement = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: political_movement  ",
            "any_potential_party": "Iterate through all potential political parties in a country  <br>any_potential_party = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: party  ",
            "any_power_bloc": "Iterate through all power blocs  <br>any_power_bloc = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: power_bloc  ",
            "any_power_bloc_member": "Iterate through all members of the scoped power bloc including the leader  <br>any_power_bloc_member = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: power_bloc  <br><b>Supported Targets</b>: country  ",
            "any_preferred_law": "Iterate through all active and possible laws in an interest group's country, ordered by how much they prefer that law  <br>any_preferred_law = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: interest_group  <br><b>Supported Targets</b>: law  ",
            "any_primary_culture": "Primary cultures of the scoped country or country definition  <br>any_primary_culture = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, country_definition, state  <br><b>Supported Targets</b>: culture  ",
            "any_province": "Iterate through all Provinces in the scoped State  <br>any_province = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: province  <br><b>Supported Targets</b>: state  ",
            "any_rival_country": "Any country that is being rivaled by the country in a scope  <br>any_rival_country = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_rivaling_country": "Any country that is rivaling the country in a scope  <br>any_rivaling_country = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_scope_admiral": "Iterate through all admirals in a: country, interestgroup, or military formation  <br>any_scope_admiral = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "any_scope_ally": "Iterate through all allies to a: country  <br>any_scope_ally = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_scope_building": "Iterate through all buildings in a: state, country  <br>any_scope_building = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, state  <br><b>Supported Targets</b>: building  ",
            "any_scope_character": "Iterate through all characters in a: country, interestgroup, or front  <br>any_scope_character = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "any_scope_country": "Iterate through all countries with a presence in the supported scope (currently: market, strategic region)  <br>any_scope_country = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: market, strategic_region  <br><b>Supported Targets</b>: country  ",
            "any_scope_culture": "Iterate through all cultures in the scope  <br>any_scope_culture = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, state  <br><b>Supported Targets</b>: culture  ",
            "any_scope_diplomatic_pact": "Any diplomatic pact of the country in a scope  <br>any_scope_diplomatic_pact = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: diplomatic_pact  ",
            "any_scope_front": "Iterate through all Fronts related to the scoped War  <br>any_scope_front = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: war  <br><b>Supported Targets</b>: front  ",
            "any_scope_general": "Iterate through all generals in a: country, interestgroup, front, or military formation  <br>any_scope_general = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "any_scope_held_interest_marker": "Iterate through all interest markers held by a country  <br>any_scope_held_interest_marker = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: interest_marker  ",
            "any_scope_initiator_ally": "Iterate through all allies to an initiator in a: diplomatic play  <br>any_scope_initiator_ally = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "any_scope_interest_marker": "Iterate through all interest markers in a: country, strategic region  <br>any_scope_interest_marker = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, strategic_region  <br><b>Supported Targets</b>: interest_marker  ",
            "any_scope_play_involved": "Iterate through all involved in a: diplomatic play  <br>any_scope_play_involved = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "any_scope_politician": "Iterate through all politicians in a: country or interestgroup  <br>any_scope_politician = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, front, interest_group, military_formation  <br><b>Supported Targets</b>: character  ",
            "any_scope_pop": "Iterate through all pops in a: country, state, interest group, culture  <br>any_scope_pop = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, culture, interest_group, state  <br><b>Supported Targets</b>: pop  ",
            "any_scope_state": "Iterate through all states including provinces from a: country, state_region, theater, or front  <br>any_scope_state = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, front, state_region, strategic_region, theater  <br><b>Supported Targets</b>: state  ",
            "any_scope_target_ally": "Iterate through all allies to a target in a: diplomatic play  <br>any_scope_target_ally = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "any_scope_theater": "Iterate through all theaters in a: country  <br>any_scope_theater = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: theater  ",
            "any_scope_violate_sovereignty_interested_parties": "Iterate through all countries that would be interested if country in scope has their sovereignty violated  <br>any_scope_violate_sovereignty_interested_parties = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_scope_violate_sovereignty_wars": "Iterate through all relevant wars if target country had their sovereignty violated by scoped country  <br>any_scope_violate_sovereignty_wars = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: war  ",
            "any_scope_war": "Iterate through all wars related to the scope  <br>any_scope_war = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: war  ",
            "any_sea_node_adjacent_state": "Iterate through all states that share a sea node with a state  <br>any_sea_node_adjacent_state = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: state  ",
            "any_state": "Iterate through all states globally  <br>any_state = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: state  ",
            "any_state_region": "Iterate through all state regions  <br>any_state_region = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: none/all  <br><b>Supported Targets</b>: state_region  ",
            "any_strategic_objective": "Iterate through all Strategic Objective states from the scoped Country  <br>any_strategic_objective = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: state  ",
            "any_subject_or_below": "Any country below current in hierarchy  <br>any_subject_or_below = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "any_supporting_character": "Iterate through all characters that support the scoped political movement  <br>any_supporting_character = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: political_movement  <br><b>Supported Targets</b>: character  ",
            "any_supporting_interest_group": "Iterate through all interest groups supporting a political movement  <br>any_supporting_interest_group = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: political_movement  <br><b>Supported Targets</b>: interest_group  ",
            "any_trade_route": "Iterate through all trade routes in a: market, country, marketgoods  <br>any_trade_route = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country, market, market_goods  <br><b>Supported Targets</b>: trade_route  ",
            "any_valid_mass_migration_culture": "Lists for cultures in the scoped country that are valid for mass migration  <br>any_valid_mass_migration_culture = { <count=num/all> / <percent=fixed_point> triggers }  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: culture  ",
            "appeasement": "Compares the appeasement of a political lobby.Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: political_lobby  ",
            "approaching_bureaucracy_shortage": "Check if Institutions in the country will incur a Bureaucracy shortage eventuallyTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "arable_land": "Check arable land in state  <br>arable_land > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "arable_land_country": "Compare arable land in *all* states  <br>arable_land_country > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "army_mobilization_option_fraction": "Checks that a countries army has a certain percentage of units with a specific monbilization option  <br>scope:country = {  <br>  army_mobilization_option_fraction = {  <br>    target = mobilization_option:key  <br>    value >= 0.2  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "assert_if": "Conditionally cause an assert during run time  <br>assert_if = { limit = { X } text = Y }, where X is a trigger and Y is an optional string  <br><b>Supported Scopes</b>: none/all  ",
            "assert_read": "Conditionally cause an assert during read time  <br>assert_read = X, where X is yes or the string to be printed in the assert  <br><b>Supported Scopes</b>: none/all  ",
            "authority": "Compares the available authority of the scoped countryTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "available_jobs": "Checks the state's number of available jobs in non-subsistence buildings  <br>available_jobs > 10000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "average_country_infrastructure": "Check average infrastructure in all states owned by scope country  <br>average_country_infrastructure = 3Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "average_incorporated_country_infrastructure": "Check average infrastructure in incorporated states owned by the scope country  <br>average_incorporated_country_infrastructure = 3Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "building_has_goods_shortage": "Check if building has a shortage of any of its inputs  <br>building_has_goods_shortage = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: building  ",
            "bureaucracy": "Compares the available bureaucracy of the scoped countryTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "calc_true_if": "Returns true if the specified number of sub-triggers return true  <br>calc_true_if = { amount = 2 <trigger> <trigger> <trigger> }  <br><b>Supported Scopes</b>: none/all  ",
            "can_activate_production_method": "Checks if the building of a particular type in scoped state is able to active the specified production method  <br>can_activate_production_method = { building_type = <key> production_method = <key> }  <br><b>Supported Scopes</b>: state  ",
            "can_add_wargoal_against": "Checks if scope country can add any wargoal against target country in an active diplomatic play  <br>can_add_wargoal_against = <scope>Traits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "can_afford_diplomatic_action": "Checks if the country in scope can afford the Influence for the specified diplomatic action (pact or ongoing)  <br>can_afford_diplomatic_action = { target = X type = Y }  <br>Where X = country and Y = diplomatic action type  <br><b>Supported Scopes</b>: country  ",
            "can_agitate": "Check if the scope character can agitate the target country  <br>can_agitate = <scope/c:TAG>Traits: country scope  <br><b>Supported Scopes</b>: character  <br><b>Supported Targets</b>: country  ",
            "can_be_enacted": "Checks if a law could be enacted by its country, considering its current situation  <br>can_be_enacted = yesTraits: yes/no   <br><b>Supported Scopes</b>: law  ",
            "can_break_diplomatic_pact": "Checks if there is a diplomatic pact of the specified type with target country that can be broken by scope country  <br>can_break_diplomatic_pact = { target = <country scope> type = <action type key> first_state = <state scope, optional> second_state = <state scope, optional>  <br>  <br><b>Supported Scopes</b>: country  ",
            "can_create_diplomatic_pact": "Checks if a diplomatic pact is valid to create with another country  <br>can_create_diplomatic_pact = { target = <country scope> type = <action type key> first_state = <state scope, optional> second_state = <state scope, optional>  <br>  <br><b>Supported Scopes</b>: country  ",
            "can_decrease_autonomy": "Check if a subject country is able to become a less autonomous subject type  <br>can_increase_autonomy = yesTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "can_establish_any_export_route": "Check if a country can establish any export routes  <br>can_establish_any_export_route = <goods key/scope>  <br>Traits: goods scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "can_establish_any_import_route": "Check if a country can establish any import routes  <br>can_establish_any_import_route = <goods key/scope>  <br>Traits: goods scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "can_establish_company": "Check if the country can establish a new companyTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "can_form_nation": "Check if the target country is able to potentially form a nation  <br>can_form_nation = <tag>  <br><b>Supported Scopes</b>: country  ",
            "can_have_as_subject": "Checks if a country can have another country as a particular type of subject  <br>can_have_as_subject = { who = X type = Y }  <br>Where X = country and Y = subject type  <br><b>Supported Scopes</b>: country  ",
            "can_have_declared_interest_here": "Check if the target country scope fulfills the rules for conditions for having a declared interest in the strategic region in scope. Does not check for availability of declared interests.  <br>can_have_declared_interest_here = c:SWETraits: country scope  <br><b>Supported Scopes</b>: strategic_region  <br><b>Supported Targets</b>: country  ",
            "can_have_political_movement": "Checks if a political movement for the specified law can arise in scope country  <br>can_have_political_movement = law_type:law_landed_votingTraits: law_type scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law_type  ",
            "can_have_subjects": "Check if the country is able to have subjects of it sownTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "can_increase_autonomy": "Check if a subject country is able to become a more autonomous subject type  <br>can_increase_autonomy = yesTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "can_invite_any_country": "Checks whether is possible to invite any country to the scoped Power Bloc.  <br>can_invite_any_country = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: power_bloc  ",
            "can_leave_power_bloc": "Checks if the country in scope can leave its current Power Bloc (returns false if country is not in a Power Bloc)  <br>can_leave_power_bloc = yesTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "can_lobbies_target": "Checks if target country is a valid target for lobbies in the scoped country  <br>can_lobbies_target = <target country scope>Traits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "can_own_autonomy_be_decreased": "Check if scoped country can have it's autonomy decreased  <br>can_own_autonomy_be_decreased = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "can_queue_building_levels": "Checks if the building's owner could queue the provided number of additional levels without hitting a level or resource potential cap  <br>can_queue_building_levels = number  <br><b>Supported Scopes</b>: building  ",
            "can_research": "True if a country can research an technology  <br>can_research = technology  <br><b>Supported Scopes</b>: country  ",
            "can_send_diplomatic_action": "Checks if a diplomatic action is valid to send by scope country to target country  <br>can_send_diplomatic_action = { target = <country scope> type = <action type key> first_state = <state scope, optional> second_state = <state scope, optional>  <br>  <br><b>Supported Scopes</b>: country  ",
            "can_start_tutorial_lesson": "Can the specified tutorial lesson be started?  <br>can_start_tutorial_lesson = reactive_advice_successionAn interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "can_take_on_scaled_debt": "Checks if scoped country can take on a certain amount of scaled debt from another country  <br>can_take_on_scaled_debt = { who = X value = Y }  <br>Where X = country and Y = decimal value  <br><b>Supported Scopes</b>: country  ",
            "can_trigger_event": "Check if country can trigger the specified event  <br>can_trigger_event = key  <br><b>Supported Scopes</b>: country  ",
            "cash_reserves_available": "Evaluates a production building's available cash reserves  <br>cash_reserves_available > 25000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "cash_reserves_ratio": "Evaluates a production building's available cash reserve ratio compared to its maximum  <br>Returns 1 if the building has no maximum cash reserves  <br>cash_reserves_ratio > 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "character_is_discriminated": "Checks if character is discriminated against  <br>character_is_discriminated = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "character_supports_political_movement": "Checks whether the scoped character supports a political movement  <br>character_supports_political_movement = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "check_area": "Compares areas of object to another object  <br><b>Supported Scopes</b>: country, province, state, state_region, strategic_region, theater  ",
            "civil_war_progress": "Compare progress of civil war  <br>civil_war_progress > 0.50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: civil_war  ",
            "commander_is_available": "Check if a commander is not busy  <br>commander_is_available = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "commander_rank": "Compares the commanders rank  <br>commander_rank > 2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: character  ",
            "construction_queue_duration": "Compares the maximum of all the very roughly approximated weeks remaining to finish the constructions in any queue: construction_queue_duration < 52Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "construction_queue_government_duration": "Compares the very roughly approximated weeks remaining to finish the constructions in the government queue: construction_queue_government_duration < 52Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "construction_queue_num_queued_government_levels": "Compares the number of government constructed building levels in the construction queueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "construction_queue_num_queued_levels": "Compares the number of building levels in the construction queueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "construction_queue_num_queued_private_levels": "Compares the number of privately constructed building levels in the construction queueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "construction_queue_private_duration": "Compares the very roughly approximated weeks remaining to finish the constructions in the private queue: construction_queue_private_duration < 52Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "contains_capital_of": "Checks if scoped state region contains the capital of target tag  <br>contains_capital_of = country scope/tag  <br><b>Supported Scopes</b>: state_region  ",
            "country_army_unit_type_fraction": "Checks that a country has a certain percentage of a specific army unit type  <br>scope:example_formation = {  <br>  country_military_unit_type_fraction = {  <br>    target = unit_type:key  <br>    value >= 0.2  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "country_can_have_mass_migration_to": "Checks if the scoped country can have mass migration to target country  <br>can_have_mass_migration_to = c:countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "country_definition_has_culture": "Checks if a culture is one of the cultures of the country definition  <br>country_definition_has_culture = <culture>Traits: culture scope  <br><b>Supported Scopes</b>: country_definition  <br><b>Supported Targets</b>: culture  ",
            "country_has_building_group_levels": "Checks the sum of building levels for a building group in a country  <br> country_has_building_group_levels = {  <br> type = bg_heavy_industry  <br> value >= 100 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "country_has_building_levels": "Checks the sum of building levels for a country  <br>country_has_building_levels >= 10 Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "country_has_building_type_levels": "Checks the sum of building levels for a building type in a country  <br> country_has_building_type_levels = {  <br> target = bt:building_barracks  <br> value  >= 100Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "country_has_local_shortage": "Whether the scoped market goods are in shortage in the target country  <br>country_has_local_shortage = scope:example_countryTraits: country scope  <br><b>Supported Scopes</b>: market_goods  <br><b>Supported Targets</b>: country  ",
            "country_has_primary_culture": "Checks if a culture is one of the primary cultures in the country  <br>country_has_primary_culture = <culture>Traits: culture scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: culture  ",
            "country_has_state_religion": "Checks if a religion is the state religion in the country  <br>country_has_accepted_religion = <religion>Traits: religion scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: religion  ",
            "country_innovation": "Checks the amount of weekly innovation a country produces  <br>country_innovation <= 200Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "country_navy_unit_type_fraction": "Checks that a country has a certain percentage of a specific navy unit type  <br>scope:example_formation = {  <br>  country_navy_unit_type_fraction = {  <br>    target = unit_type:key  <br>    value >= 0.2  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "country_or_subject_owns_entire_state_region": "Checks whether the scoped country or any of its subjects owns the entire specified state region  <br>country_or_subject_owns_entire_state_region = key  <br><b>Supported Scopes</b>: country  ",
            "country_ownership_fraction": "Compares the fraction of this building's levels that are owned by a country  <br> country_ownership_fraction > 0.5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "country_rank": "Compares a Country's Power Ranking  <br>country_rank < rank_value:major_powerTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "country_tier": "Compare tier of country tag  <br>country_tier = x  <br><b>Supported Scopes</b>: country  ",
            "country_turmoil": "Compares the country's population weighted turmoil  <br>country_turmoil > 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "culture_accepted": "Checks if pop's culture is accepted  <br>culture_accepted = boolTraits: yes/no   <br><b>Supported Scopes</b>: pop  ",
            "culture_can_have_mass_migration_to_country": "Checks if the scoped culture can have mass migration to target country  <br>can_have_mass_migration_to_country = c:countryTraits: country scope  <br><b>Supported Scopes</b>: culture  <br><b>Supported Targets</b>: country  ",
            "culture_has_community_in_state": "Checks if the scoped culture has a cultural community in a state.  <br>culture_has_community_in_state = <state>  <br><b>Supported Scopes</b>: culture  ",
            "culture_is_discriminated_in": "Checks if a culture is discriminated against within the scope country  <br>culture_is_discriminated_in = c:USATraits: country scope  <br><b>Supported Scopes</b>: culture  <br><b>Supported Targets</b>: country  ",
            "culture_percent_country": "Checks that a country's population has a certain percentage of a specific culture  <br>scope:example_country = {  <br>  culture_percent_country = {  <br>    target = cu:dixie  <br>    value >= 0.2  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "culture_percent_state": "Checks that a state's population has a certain percentage of a specific culture  <br>scope:example_state = {  <br>  culture_percent_state = {  <br>    target = cu:dixie  <br>    value >= 0.2  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "culture_secession_progress": "Checks the culture's progress percentage towards secession in a country. 0 if no secession movement is active for the culture.  <br>culture_secession_progress = { target = scope:example_country value > 0.5 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: culture  ",
            "current_cohesion_number": "Compare the current Cohesion as a numeric value  <br>current_cohesion_number > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "current_cohesion_percentage": "Compare the current Cohesion as a percentage of the maximum of a Power Bloc in scope  <br>current_cohesion_percentage > 0.5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "current_manpower": "Compares the current manpower of a battle side  <br>manpower > 10000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: battle_side  ",
            "current_tooltip_depth": "Returns the number of tooltips currently open on screenAn interface trigger, can only be used in specific places<br>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: none/all  ",
            "custom_description": "Wraps triggers that get a custom description instead of the auto-generated one  <br>custom_description = {  <br> text = <trigger_localization_key>  <br> subject = <optional subject scope> #defaults to current scope  <br> object = <optional object scope>  <br>  value = <optional script value>  <br>   ... triggers ...  <br>}  <br><b>Supported Scopes</b>: none/all  ",
            "custom_tooltip": "Replaces the tooltips for the enclosed triggers with a custom text  <br>custom_tooltip = {  <br> text = <text>  <br> subject = <scope> (optional)  <br>  <trigger>  <br>}  <br><b>Supported Scopes</b>: none/all  ",
            "day_value": "Day valueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: none/all  ",
            "daynight_value": "DayNight valueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: none/all  ",
            "debug_log": "Log whether the parent trigger succeeded or failed  <br><b>Supported Scopes</b>: none/all  ",
            "debug_log_details": "Log whether the parent trigger succeeded or failed. Log which children succeeded or failed  <br><b>Supported Scopes</b>: none/all  ",
            "devastation": "Compares the devastation of a given state  <br>devastation > 5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "discriminates_religion": "Checks if the scoped country discriminates the given religion (key)  <br>discriminates_religion = <religion key/scope>  <br><b>Supported Scopes</b>: country  ",
            "earnings": "Compare a building's current annual earnings per employee  <br>earnings >= 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "economic_dependence": "Compares the degree of dependence the country in scope has to the target country  <br>economic_dependence = { target = scope:other_country value > 2.2 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "election_momentum": "Compare election momentum of the scoped party against a value  <br>election_momentum = 0.75Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: party  ",
            "empty_agitator_slots": "Checks number of empty agitator slots in a country  <br>empty_agitator_slots >= 1Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "enacting_any_law": "Checks if you're enacting any law.  <br>enacting_any_law = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "enactment_chance": "Compares the current enactment chance in scope country (including values from enactment modifier)Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "enactment_chance_for_law": "Compares the enactment chance in scope country for given law (including values from enactment modifier)  <br>enactment_chance_for_law = { target = scope:my_lawtype value > 0.2 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "enactment_chance_for_law_without_enactment_modifier": "Compares the enactment chance in scope country for given law but excludes values from enactment modifier  <br>enactment_chance_for_law_without_enactment_modifier = { target = scope:my_lawtype value > 0.2 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "enactment_chance_without_enactment_modifier": "Compares the current enactment chance in scope country but excludes values from enactment modifierTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "enactment_phase": "Compares the current law enactment phase in scope country.Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "enactment_setback_count": "Compares the current enactment setback count in scope country.Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "enemy_contested_wargoals": "Determines the fraction of wargoals that enemies in the war are currently contesting  <br>enemy_contested_wargoals = { target = scope:war value > 0.4 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "enemy_occupation": "Determines the (weighted) enemy occupation score of a country  <br>enemy_occupation > 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "escalation": "Checks whether escalation has passed a certain threshold  <br>escalation > -58Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "exists": "Checks whether the specified scope target exists (check for not being the null object)  <br>exists = from.owner.var:cool_var.mother  <br><b>Supported Scopes</b>: none/all  ",
            "expanding_institution": "Checks if the institution is expanding  <br>expanding_institution = <scope/key>  <br><b>Supported Scopes</b>: country  ",
            "experience_level": "Compares the character experience level  <br>experience_level > 1Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: character  ",
            "formation_army_unit_type_fraction": "Checks that a formation has a certain percentage of a specific army unit type  <br>scope:example_formation = {  <br>  country_military_unit_type_fraction = {  <br>    target = unit_type:key  <br>    value >= 0.2  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: military_formation  ",
            "formation_navy_unit_type_fraction": "Checks that a formation has a certain percentage of a specific navy unit type  <br>scope:example_formation = {  <br>  formation_navy_unit_type_fraction = {  <br>    target = unit_type:key  <br>    value >= 0.2  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: military_formation  ",
            "fraction_of_levels_owned_by_country": "Compares the fraction of total levels of a building a country owns  <br> fraction_of_levels_owned_by_country = {  <br> target = c:GBR  <br> value  > 0.5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "free_arable_land": "Check free arable land in state  <br>free_arable_land > 0Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "free_principle_slots": "Compare a power bloc's free principle slot count  <br>power_bloc =  <br>{  <br>        free_principle_slots >= 2  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "game_date": "Compare to current game date  <br>current_game_date = 1837.1.1Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: none/all  ",
            "gdp_ownership_ratio": "Compares the ratio of GDP the specified country owns in the scoped country  <br>gdp_ownership_ratio = { target = scope:owner_country value > 0.1 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "gdp_per_capita_ranking": "Compares a Country's GDP per Capita Ranking (position)  <br>gdp_per_capita_ranking > 42Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "global_country_ranking": "Compares a Country's Power Ranking (position)  <br>global_country_ranking > 42Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "global_population": "Compares the global population  <br>global_population > 2000000000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: none/all  ",
            "global_variable_list_size": "Checks the size of a variable list  <br>variable_list_size = { name = X target >= Y }  <br>Where X is the name of the variable  <br>Where Y is a script value or number  <br><b>Supported Scopes</b>: none/all  ",
            "gold_reserves": "Does the country have the required gold reserves  <br>gold_reserves > 500Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "gold_reserves_limit": "Compares the country's gold reserves limit  <br>gold_reserves > gold_reserves_limitTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "goods_production_rank": "Compare to a country's production leaderboard rank of a good  <br>leading_producer_of = { target = g:coal value < 10 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "government_legitimacy": "Compare LegitimacyTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "government_transfer_of_power": "Checks country's government's transfer of power  <br>government_transfer_of_power = keyTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "government_wage_level": "Compares the government wage level of scoped country  <br>government_wage_level = <level>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "government_wage_level_value": "Compares the government wage level value of scoped country  <br>government_wage_level_value = <level>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "has_active_building": "True if a state has an active building type  <br>has_active_building = building  <br><b>Supported Scopes</b>: market, state  ",
            "has_active_peace_deal": "True if the country is in a war where there is a proposed peace deal  <br>has_active_peace_deal = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_active_production_method": "Checks if a scoped building has the specified production method active  <br>has_active_production_method = key  <br><b>Supported Scopes</b>: building  ",
            "has_any_secessionists_broken_out": "Check if the country has secessionists broken outTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_any_secessionists_growing": "Check if the country has any secessionists growingTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_any_secessionists_possible": "Check if the country has any new secessionists possibleTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_assimilating_pops": "Check if a state has any pops currently in the process of assimilating.Traits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "has_attitude": "Checks if scoped country has a particular attitude towards another country  <br>has_attitude = { who = X attitude = Y }  <br>Where X = country and Y = attitude type  <br><b>Supported Scopes</b>: country  ",
            "has_battle_condition": "True if the battle side currently has a condition with the given key  <br>has_battle_condition = battle_condition_key  <br><b>Supported Scopes</b>: battle_side  ",
            "has_building": "True if a state/market/state region/country has a building type  <br>has_building = building  <br><b>Supported Scopes</b>: country, market, state, state_region  ",
            "has_claim": "Checks if country in scope has a claim on state/state region/country  <br>has_claim = <scope>  <br><b>Supported Scopes</b>: country  ",
            "has_claim_by": "Checks if a state is claimed by a country  <br>any_state = {  <br> owner = root  <br>  has_claim_by = c:MEX  <br>}Traits: country scope  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: country  ",
            "has_commander_order": "Checks whether the scoped character is following the given order  <br>has_order = order type key/order type scope  <br><b>Supported Scopes</b>: character  ",
            "has_company": "Checks if a company of the specified type exists in scope country  <br>has_company = company_type:company_rheinmetallTraits: company_type scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: company_type  ",
            "has_completed_subgoal": "Checks if the scoped country has completed a certain subgoal  <br>has_completed_subgoal = subgoal_key  <br><b>Supported Scopes</b>: country  ",
            "has_consumption_tax": "Checks if the country is taxing the target good.  <br>c:FRA = { has_consumption_tax = g:grain }Traits: goods scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "has_converting_pops": "Check if a state has any pops currently in the process of converting.Traits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "has_convoys_being_sunk": "Check if the country has convoys being sunk through convoy raidingTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_cosmetic_dlc": "Does the client have this cosmetic DLCAn interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "has_cultural_community": "Checks if a culture has a cultural community in the scoped state.  <br>has_cultural_community = <culture>  <br><b>Supported Scopes</b>: state  ",
            "has_cultural_obsession": "Checks if a culture has a certain goods as obsession  <br>has_cultural_obsession = <goods key>  <br><b>Supported Scopes</b>: culture  ",
            "has_culture": "Checks characters culture  <br>has_culture = culture scope or character scope  <br><b>Supported Scopes</b>: character  ",
            "has_culture_graphics": "Checks if a culture has a certain culture_graphics  <br>has_culture_graphics = <culture graphics key>  <br><b>Supported Scopes</b>: culture  ",
            "has_decreasing_interests": "Checks if the country has decreasing interest levelsTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_decree": "Checks if scope state has a particular type of decree  <br>has_decree = <key>  <br><b>Supported Scopes</b>: state  ",
            "has_deployed_units": "Check if a building supports any units which have been deployed outside of home HQ  <br>has_deployed_units = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: building  ",
            "has_diplomatic_pact": "Checks if two countries have an active diplomatic pact of type  <br>has_diplomatic_pact = { who = X type = Y is_initiator = yes/no }  <br>Where X = country and Y = diplomatic action type, is_initiator is optional parameter that checks to see if scope country is the original initiator/target of the pact  <br><b>Supported Scopes</b>: country  ",
            "has_diplomatic_play": "Check if strategic region has a diplomatic play or notTraits: yes/no   <br><b>Supported Scopes</b>: strategic_region  ",
            "has_diplomatic_relevance": "Checks if target country is diplomatically relevant for scope country  <br>has_diplomatic_relevance = <scope>Traits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "has_diplomats_expelled": "Checks if country in scope has recently expelled diplomats of event target  <br>has_diplomats_expelled = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "has_discrimination_trait": "Checks if scoped culture or religion has the given discrimination trait  <br>has_trait = trait  <br><b>Supported Scopes</b>: culture, religion  ",
            "has_dlc_feature": "Does the host have DLC that enables this particular feature  <br><b>Supported Scopes</b>: none/all  ",
            "has_employee_slots_filled": "Checks whether the amount of employees of a certain poptype are above or below a given percentage of the total amount the building can currently hire. I.e. if a building is at 80% (given as 0.8) of its current hiring capacity for Shopkeepers, for example.  <br>has_employee_slots_filled = { pop_type = X percent = Y }  <br>Where X is a pop type and Y is a fixed point  <br><b>Supported Scopes</b>: building  ",
            "has_export_priority_tariffs": "Checks if scoped country has Import Prioritized tariffs for a good  <br>has_export_priority_tariffs = <key/scope>Traits: goods scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "has_failed_hires": "Checks if a building failed to hire someone last week  <br>has_failed_hires = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: building  ",
            "has_free_government_reform": "Check if the country has a free (of radicals) government reform   <br>has_free_government_reform = <yes/no>Traits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_game_rule": "Is the given game rule setting enabled?  <br>has_game_rule = faster_conversion  <br><b>Supported Scopes</b>: none/all  ",
            "has_game_started": "True if game has started  <br>has_game_started = boolTraits: yes/no   <br><b>Supported Scopes</b>: none/all  ",
            "has_gameplay_dlc": "Does the host have this gameplay DLC  <br><b>Supported Scopes</b>: none/all  ",
            "has_global_highest_gdp": "Checks if the scoped country has the highest GDP  <br>has_global_highest_gdp = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_global_highest_innovation": "Checks if the scoped country has the highest weekly innovation  <br>has_global_highest_innovation = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_global_variable": "Checks whether the current scope has the specified variable set  <br>has_variable = name  <br><b>Supported Scopes</b>: none/all  ",
            "has_global_variable_list": "Checks whether the current scope has the specified variable list set  <br>has_variable_list = name  <br><b>Supported Scopes</b>: none/all  ",
            "has_government_clout": "Does the country's government have the necessary total CloutTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "has_government_type": "Is the country's government type as specified  <br>has_government_type = key  <br><b>Supported Scopes</b>: country  ",
            "has_healthy_economy": "Check if the country has a healthy economyTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_high_attrition": "Checks if a Military Formation's attrition risk is higher than the base value for their type  <br>has_high_attrition = boolTraits: yes/no   <br><b>Supported Scopes</b>: military_formation  ",
            "has_homeland": "Checks if scoped culture has a homeland in target state or state region  <br>has_homeland = state/state region  <br><b>Supported Scopes</b>: culture  ",
            "has_identity": "Checks if the scoped power bloc has certain central identity  <br>has_identity = identity:keyTraits: power_bloc_identity scope  <br><b>Supported Scopes</b>: power_bloc  <br><b>Supported Targets</b>: power_bloc_identity  ",
            "has_ideology": "Check if scoped object has ideology  <br><b>Supported Scopes</b>: character, interest_group  ",
            "has_import_priority_tariffs": "Checks if scoped country has Import Prioritized tariffs for a good  <br>has_import_priority_tariffs = <key/scope>Traits: goods scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "has_institution": "Checks if scope country has a particular type of institution  <br>has_institution = <scope/key>  <br><b>Supported Scopes</b>: country  ",
            "has_insurrectionary_interest_groups": "Check if the country has Interest Groups that are insurrectionaryTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_interest_marker_in_region": "True if scope country has an interest marker in target region  <br>has_interest_marker_in_region = region scope/tag  <br><b>Supported Scopes</b>: country  ",
            "has_journal_entry": "Check if the country has at least one active journal entry of the specified type  <br>has_journal_entry = key  <br><b>Supported Scopes</b>: country  ",
            "has_label": "Check if the scope object has the specified label  <br>has_label = label_key  <br><b>Supported Scopes</b>: province  ",
            "has_law": "Checks if a country has a certain Law activeTraits: law_type scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law_type  ",
            "has_law_imposition_rights": "Checks if the scoped country has the necessary permits to demand another country enacts a certain law  <br>has_law_imposition_rights = { target_country = scope:target_country type = law_type:law_serfdom }  <br><b>Supported Scopes</b>: country  ",
            "has_local_variable": "Checks whether the current scope has the specified variable set  <br>has_variable = name  <br><b>Supported Scopes</b>: none/all  ",
            "has_local_variable_list": "Checks whether the current scope has the specified variable list set  <br>has_variable_list = name  <br><b>Supported Scopes</b>: none/all  ",
            "has_map_interaction": "Checks if the map interaction type is active  <br>has_map_interaction = keyAn interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "has_map_interaction_diplomatic_action": "Checks if our current map interaction is a specific diplomatic action  <br>has_map_interaction_diplomatic_action = <key>An interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "has_map_interaction_export_goods": "Checks if the specified lens option is to export the specified goods  <br>has_selected_export_option_for_goods = <scope>An interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "has_map_interaction_import_goods": "Checks if the specified lens option is to import the specified goods  <br>has_selected_import_option_for_goods = <scope>An interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "has_military_formation": "Checks if character has a Military Formation  <br>has_military_formation = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "has_mobilization_option": "Checks that a formation has a specific mobilization option  <br>  has_mobilization_option = mobilization_option:keyTraits: mobilization_option scope  <br><b>Supported Scopes</b>: military_formation  <br><b>Supported Targets</b>: mobilization_option  ",
            "has_mobilizing_unit": "Checks if any Building in a scoped State maintains any Combat Units that are currently mobilizing  <br>has_mobilizing_unit = boolTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "has_modifier": "Check if a supported scope has a certain timed modifier  <br>Supported scopes: Country, Character, State, Building, InterestGroup, PoliticalMovement, Institution, Front  <br>has_modifier = <key>  <br><b>Supported Scopes</b>: country, building, character, institution, interest_group, journalentry, political_movement, power_bloc, state  ",
            "has_no_priority_tariffs": "Checks if scoped country has Unprioritized tariffs for a good  <br>has_no_priority_tariffs = <key/scope>Traits: goods scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "has_objective": "Checks if the scoped country has a certain objective type  <br>has_objective = objective_type_key  <br><b>Supported Scopes</b>: country  ",
            "has_ongoing_assimilation": "Checks if the scoped pop has ongoing cultural assimilation  <br>has_ongoing_assimilation = yesTraits: yes/no   <br><b>Supported Scopes</b>: pop  ",
            "has_ongoing_conversion": "Checks if the scoped pop has ongoing religious conversion  <br>has_ongoing_conversion = yesTraits: yes/no   <br><b>Supported Scopes</b>: pop  ",
            "has_overlapping_interests": "Checks if country in scope has an overlapping interest marker with any of target country's interests  <br>has_overlapping_interests = <scope>Traits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "has_party": "True if IG scope has a party  <br>has_party = boolTraits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "has_party_member": "Checks if the target interest group is a member of scope party  <br>has_party_member = <ig>Traits: interest_group scope  <br><b>Supported Scopes</b>: party  <br><b>Supported Targets</b>: interest_group  ",
            "has_play_goal": "Checks if diplomatic play has a certain war goal type  <br>has_play_goal = return_state  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "has_political_movement": "Checks if a political movement for the specified law exists in scope country  <br>can_have_political_movement = law_type:law_landed_votingTraits: law_type scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law_type  ",
            "has_pop_culture": "Checks if pop has specific culture  <br>has_pop_culture = culture  <br><b>Supported Scopes</b>: pop  ",
            "has_pop_religion": "Checks if pop has specific religion  <br>has_pop_religion = religion  <br><b>Supported Scopes</b>: pop  ",
            "has_port": "Check if state has at least one port  <br>has_port = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country, market, state  ",
            "has_possible_decisions": "Check if a country has any possible Decisions  <br>has_possible_decisions = yesTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_potential_resource": "Checks if the specificed building group is allowed in the scoped state. Used to check if a state can potentially produce a resource  <br>has_potential_resource = bg_rubber_plantations  <br><b>Supported Scopes</b>: state  ",
            "has_potential_to_form_country": "Check if the target country could ever be able to form a nation  <br>has_potential_to_form_country = <tag>  <br><b>Supported Scopes</b>: country  ",
            "has_power_struggle": "Checks if scope Power Bloc has a power struggle  <br>has_power_struggle = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_principle": "Checks if the scoped power bloc has certain principle  <br>has_principle = principle:keyTraits: power_bloc_principle scope  <br><b>Supported Scopes</b>: power_bloc  <br><b>Supported Targets</b>: power_bloc_principle  ",
            "has_principle_group": "Checks if the scoped power bloc has a principle in the specified group  <br>has_principle_group = principle_group:keyTraits: power_bloc_principle_group scope  <br><b>Supported Scopes</b>: power_bloc  <br><b>Supported Targets</b>: power_bloc_principle_group  ",
            "has_reached_end_date": "True if the end date (NDefines::NGame::END_DATE) has been reached  <br>has_reached_end_date = yesTraits: yes/no   <br><b>Supported Scopes</b>: none/all  ",
            "has_religion": "Checks characters religion  <br>has_religion = religion/character scope  <br><b>Supported Scopes</b>: character  ",
            "has_researchable_technology": "Check if the country has any researchable technology left.Traits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_revolution": "Check if the country has revolutionary uprisingTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_revolution_over_law_type": "Checks if a country is having a revolution over a particular law type  <br>has_revolution_over_law_type = law_type:law_autocracyTraits: law_type scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law_type  ",
            "has_role": "Checks if character has the specified role  <br>has_role = role  <br><b>Supported Scopes</b>: character  ",
            "has_ruling_interest_group": "Does the country's government include the named IG  <br><b>Supported Scopes</b>: country  ",
            "has_ruling_interest_group_count": "Does the country's government consist of the specified number of IGsTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "has_secret_goal": "Checks if scoped country has a particular secret goal towards another country  <br>has_secret_goal = { who = X secret_goal = Y }  <br>Where X = country and Y = secret_goal type  <br><b>Supported Scopes</b>: country  ",
            "has_state_in_state_region": "Check if country has a state in the state region  <br>has_state_in_state_region = key  <br><b>Supported Scopes</b>: country  ",
            "has_state_religion": "Check if the Pop has the state religionTraits: yes/no   <br><b>Supported Scopes</b>: pop  ",
            "has_state_trait": "Checks if scoped state has a certain trait  <br>has_state_trait = key  <br><b>Supported Scopes</b>: state  ",
            "has_strategic_adjacency": "Checks if country in scope has a strategic adjacency (direct/coastal/wargoal adjacency) to target state/country  <br>has_strategic_adjacency = <scope>  <br><b>Supported Scopes</b>: country  ",
            "has_strategic_land_adjacency": "Checks if country in scope has a strategic adjacency (direct land border or wargoal adjacency only) to target state/country  <br>has_strategic_adjacency = <scope>  <br><b>Supported Scopes</b>: country  ",
            "has_strategy": "Checks if country in scope has a particular AI strategy  <br>has_strategy = <key>  <br><b>Supported Scopes</b>: country  ",
            "has_subject_relation_with": "Checks if country in scope is subject or overlord of event target  <br>has_subject_relation_with = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "has_sufficient_construction_capacity_for_investment": "Check if country has enough construction capacity to be spending all of its incoming investment pool funds.Traits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "has_technology_progress": "Does the country have the required progress for an technology  <br>has_technology_progress = { technology = X progress = Y }  <br>Where X is an technology and Y is a fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "has_technology_researched": "True if a country has researched an technology  <br>has_technology_researched = <scope/key>  <br><b>Supported Scopes</b>: country  ",
            "has_template": "Checks if character was made from the specified template  <br>has_template = template_key  <br><b>Supported Scopes</b>: character  ",
            "has_terrain": "Check if the province has the specified terrain type  <br>has_terrain = terrain_key  <br><b>Supported Scopes</b>: province  ",
            "has_trait": "Checks if character has specific trait  <br>has_trait = trait  <br><b>Supported Scopes</b>: character  ",
            "has_treaty_port_in_country": "Checks if the scoped country has a treaty port in target country  <br>c:POR = { has_treaty_port_in_country = c:CHI }Traits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "has_truce_with": "Check if a country has a truce with a different target country  <br>has_truce_with = c:GBRTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "has_unification_candidate": "Check if there is at least one unification candidate for country tag  <br>has_country_unification_candidate = GER  <br><b>Supported Scopes</b>: none/all  ",
            "has_unit_type": "Checks if a Combat Unit is of the specified type  <br>has_unit_type = unit_type:keyTraits: combat_unit_type scope  <br><b>Supported Scopes</b>: new_combat_unit  <br><b>Supported Targets</b>: combat_unit_type  ",
            "has_variable": "Checks whether the current scope has the specified variable set  <br>has_variable = name  <br><b>Supported Scopes</b>: none/all  ",
            "has_variable_list": "Checks whether the current scope has the specified variable list set  <br>has_variable_list = name  <br><b>Supported Scopes</b>: none/all  ",
            "has_war_exhaustion": "Checks the war exhaustion of the target country in the scoped war  <br>has_war_exhaustion = { target = c:GBR value > 50 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: war  ",
            "has_war_goal": "Checks if war has a certain war goal type  <br>has_war_goal = return_state  <br><b>Supported Scopes</b>: war  ",
            "has_war_support": "Checks the war support of the target country in the scoped war  <br>has_war_support = { target = c:GBR value > 50 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: war  ",
            "has_war_with": "Checks if country in scope is at war with event target  <br>has_war_with = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "has_wasted_construction": "Check if country is wasting any of its produced construction.Traits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "hidden_trigger": "AndTrigger that doesn't generate tooltips for contents within  <br>hidden_trigger = {}  <br><b>Supported Scopes</b>: none/all  ",
            "highest_secession_progress": "Compares the highest secession progress of any secession movement in a given country  <br>highest_secession_progress > 0.7Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "ig_approval": "Compare to scoped interest group approval  <br>Usages: ig_approval > 2, ig_approval < happyTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: interest_group  ",
            "ig_clout": "Compare to scoped interest group's clout  <br>ig_clout >= 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: interest_group  ",
            "ig_government_power_share": "Compare to scoped interest group's political strength divided by total government political strength  <br>ig_government_power_share >= 0.5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: interest_group  ",
            "ig_state_pol_strength_share": "True if IG in scope has scripted political strength in state  <br>ig_state_pol_strength_share = {  <br> target = scope:target_ig  <br>  value = 0.3  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "in_default": "Check if the country is currently in defaultTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "in_election_campaign": "Check if the country is in election campaign period  <br>in_election_campaign = <yes/no>Traits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "income_transfer": "Compares the base income transfer of the diplomatic pact  <br>income_transfer > 0.05Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: diplomatic_pact  ",
            "incorporation_progress": "Check incorporation progress in state  <br>incorporation_progress > 0.25Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "influence": "Compares the available influence of the scoped countryTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "infrastructure": "Compares the infrastructure value of a given state  <br>infrastructure > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state, state_region  ",
            "infrastructure_usage": "Compares the infrastructure usage value of a given state  <br>infrastructure_usage > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state, state_region  ",
            "initiator_is": "Checks who the initiator of a diplomatic play is  <br>initiator_is = countryTraits: country scope  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "institution_investment_level": "Compares the level of investment in an institution  <br>institution_investment_level = { institution = <key> value = <comparator value> }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "interest_group_population": "Compares population number in an interest group  <br>interest_group_population > 1000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: interest_group  ",
            "interest_group_population_percentage": "Compares percentage of population in an interest group  <br>interest_group_population_percentage > 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: interest_group  ",
            "interest_group_supports_political_movement": "Checks whether the scoped interest group supports a political movement  <br>interest_group_supports_political_movement = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "investment_pool": "Does the country have this amount of money saved in its investment pool  <br>investment_pool > 1000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "investment_pool_gross_income": "Does the country have this amount of gross income (income before expenses) for its investment pool  <br>investment_pool_gross_income > 1000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "investment_pool_net_income": "Does the country have this amount of net income (income after expenses) for its investment pool  <br>investment_pool_net_income > 1000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "is_active": "Checks if a naval invasion is currently active (started or ongoing)  <br>is_active = boolTraits: yes/no   <br><b>Supported Scopes</b>: naval_invasion  ",
            "is_adjacent_to_country": "Checks if country in scope is adjacent to a target country  <br>is_adjacent_to_country = <scope>Traits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_adjacent_to_state": "Checks if country in scope is adjacent to a target state  <br>is_adjacent_to_state = <scope>Traits: state scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: state  ",
            "is_advancing_on_front": "Checks if a commander is advancing on a front  <br>is_advancing_on_front = frontTraits: front scope  <br><b>Supported Scopes</b>: character  <br><b>Supported Targets</b>: front  ",
            "is_ai": "True if country scope is controlled by an AI  <br>is_ai = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_army": "Checks if a military formation is Army  <br>is_army = boolTraits: yes/no   <br><b>Supported Scopes</b>: military_formation  ",
            "is_at_war": "Check if the country is at warTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_attacker_in_battle": "Checks if a Commander is attacker in a battle  <br>is_attacker_in_battle = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_banning_goods": "Check if a country is banning a good  <br>is_banning_goods = <goods key/scope>  <br>  <br><b>Supported Scopes</b>: country  ",
            "is_being_bolstered": "Check if scoped ig is being bolstered  <br>is_being_bolstered = <yes>/<no>Traits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "is_being_suppressed": "Check if scoped ig is being suppressed  <br>is_being_suppressed = <yes>/<no>Traits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "is_buildable": "Check if a building is buildable = yes (default)  <br>is_buildable = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: building  ",
            "is_building_group": "True if scope is a building of given group  <br>building_group = building  <br><b>Supported Scopes</b>: building  ",
            "is_building_type": "True if scope is a building of given type  <br>is_building_type = building  <br><b>Supported Scopes</b>: building  ",
            "is_building_type_expanded": "Checks if the CProductionMethodsPanelEntry for a particular CBuildingType is expanded  <br>is_building_type_expanded = <scope/key>An interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "is_busy": "Check if character is busy  <br>is_busy = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_capital": "Check if state is the capital of the owner = boolTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_character_alive": "Checks if the scoped character is alive  <br>is_character_alive = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_civil_war_type": "Check if the scoped civil war is of a specific type  <br>is_civil_war_type = revolution / secession  <br><b>Supported Scopes</b>: civil_war  ",
            "is_coastal": "Check if state borders a (non-impassable) sea region  <br>is_coastal = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_considered_adjacent_due_to_wargoals": "Checks if the scoped country is considered adjacent to the target country by virtue of the scoped country having wargoals that are adjacent to the target country in a committed diplomatic play  <br>is_considered_adjacent_due_to_wargoals = <target country scope>Traits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_construction_paused": "Check if construction in a state is paused.Traits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_consumed_by_government_buildings": "Check if the market goods is instrumental in running the bureaucratic machineTraits: yes/no   <br><b>Supported Scopes</b>: market_goods  ",
            "is_consumed_by_military_buildings": "Check if the goods is instrumental in running the war machineTraits: yes/no   <br><b>Supported Scopes</b>: market_goods  ",
            "is_country_alive": "Checks if the scoped country is alive, i.e. if it has at least one state on the map and can be interacted with  <br>is_country_alive = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_country_type": "Checks the countrys type  <br>is_country_type = country type  <br><b>Supported Scopes</b>: country  ",
            "is_defender_in_battle": "Checks if a Commander is defender in a battle  <br>is_defender_in_battle = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_diplomatic_action_type": "Checks diplomatic pact is of a certain action type  <br>is_diplomatic_action_type = diplomatic action type  <br><b>Supported Scopes</b>: diplomatic_pact  ",
            "is_diplomatic_catalyst_type": "Checks diplomatic catalyst is of a certain catalyst type  <br>is_diplomatic_catalyst_type = diplomatic catalyst type  <br><b>Supported Scopes</b>: diplomatic_catalyst  ",
            "is_diplomatic_pact_in_danger": "Checks if diplomatic pact is in danger of breaking  <br>is_diplomatic_pact_in_danger = yesTraits: yes/no   <br><b>Supported Scopes</b>: diplomatic_pact  ",
            "is_diplomatic_play_ally_of": "Checks if country in scope is in a diplomatic play together with event target  <br>is_diplomatic_play_ally_of = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_diplomatic_play_committed_participant": "True if country is a committed participant of any diplomatic play  <br>is_diplomatic_play_participant = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_diplomatic_play_enemy_of": "Checks if country in scope is in a diplomatic play against event target  <br>is_diplomatic_play_enemy_of = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_diplomatic_play_initiator": "True if country is the initiator of any diplomatic play  <br>is_diplomatic_play_initiator = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_diplomatic_play_involved_with": "Checks if country in scope is involved in the same diplomatic play as event target  <br>is_diplomatic_play_involved_with = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_diplomatic_play_participant_with": "Checks if country in scope is a committed participant in the same diplomatic play as event target  <br>is_diplomatic_play_participant_with = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_diplomatic_play_target": "True if country is the target of any diplomatic play  <br>is_diplomatic_play_target = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_diplomatic_play_type": "Checks diplomatic play is of a certain type  <br>is_diplomatic_play_type = play type  <br><b>Supported Scopes</b>: diplomatic_play  ",
            "is_diplomatic_play_undecided_participant": "True if country is a undecided participant of any diplomatic play  <br>is_diplomatic_play_participant = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_direct_subject_of": "Checks if country in scope is a direct subject (not subject-of-subject) of event target  <br>is_direct_subject_of = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_employed": "Check if the pop is employedTraits: yes/no   <br><b>Supported Scopes</b>: pop  ",
            "is_enacting_law": "Checks if the scoped country is enacting a specific law type.  <br>is_enacting_law = law_type:law_conscriptionTraits: law_type scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: law_type  ",
            "is_expanding_institution": "Are you expanding an institution  <br>is_expanding_institution = <yes>/<no>Traits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_female": "Check if character is female  <br>is_female = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_fleet": "Checks if a military formation is Fleet  <br>is_fleet = boolTraits: yes/no   <br><b>Supported Scopes</b>: military_formation  ",
            "is_forced_pact": "Check if a diplomatic pact has a forced duration due to reasons such as a sway or obligationTraits: yes/no   <br><b>Supported Scopes</b>: diplomatic_pact  ",
            "is_forced_to_join_plays": "Checks if the scoped country is forced to join the target country's Diplomatic Plays  <br>is_forced_to_join_plays = c:countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_fully_mobilized": "Checks if the Military Formation is fully mobilized  <br>is_fully_mobilized = boolTraits: yes/no   <br><b>Supported Scopes</b>: military_formation  ",
            "is_game_paused": "Checks if the game is paused  <br>is_game_paused = yes/noAn interface trigger, can only be used in specific places<br>Traits: yes/no   <br><b>Supported Scopes</b>: none/all  ",
            "is_gamestate_tutorial_active": "Is the gamestate tutorial active? See save_progress_in_gamestate in tutorial_lesson_chains documentation.An interface trigger, can only be used in specific places<br>Traits: yes/no   <br><b>Supported Scopes</b>: none/all  ",
            "is_goal_complete": "Check if the journal entry's goal has been met  <br>is_goal_complete = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: journalentry  ",
            "is_government_funded": "Check if a building is is_government_funded  <br>is_government_funded = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: building  ",
            "is_heir": "Checks whether the scoped character is an heir  <br>is_heir = yes / noTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_historical": "Check if character is historical  <br>is_historical = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_home_country_for": "Checks if a country is the home country for target countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_homeland": "Checks if scoped state region is a homeland of target culture  <br>is_homeland = culture scope/name  <br><b>Supported Scopes</b>: state_region  ",
            "is_homeland_of_country_cultures": "Checks if state is homeland of any of the target country's primary cultures  <br>is_homeland_of_country_cultures = <country>Traits: country scope  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: country  ",
            "is_immune_to_revolutions": "Checks if the country has been set to be immune to revolutions via set_immune_to_revolutions  <br>Warning: This does not check if the country is naturally immune to revolutions due to for example being a revolutionary country itself, only for the effects of set_immune_to_revolutions.  <br>is_immune_to_revolutions = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_in_battle": "Checks if a Commander is engaged in battle  <br>is_in_battle = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_in_customs_union": "Check if the country is part of a customs unionTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_in_customs_union_with": "Check if the country is in a customs union with scoped country  <br>is_in_customs_union_with = c:FRATraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_in_exile_pool": "Checks whether the scoped character is in the exile pool  <br>is_in_exile_pool = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_in_government": "True if IG scope is in the government  <br>is_in_government = boolTraits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "is_in_list": "Checks if a target in in a list  <br><b>Supported Scopes</b>: none/all  ",
            "is_in_power_bloc": "Checks if the country is in a Power Bloc  <br>is_in_power_bloc = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_in_revolt": "Check if a state has any chance to split off into a revolutionary or seceding country  <br>is_in_revolt = yes/no.Traits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_in_same_power_bloc": "Checks if the scoped country is in the same power bloc as the target scoped country  <br>is_in_same_power_bloc = c:GBRTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_in_void": "Check if character is in the void  <br>is_in_void = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_in_war_together": "Checks if country in scope is in war on the same side as event target  <br>is_in_war_together = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_incorporated": "Check if state is incorporated = boolTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_indirect_subject_of": "Checks if country in scope is an indirect subject (subject-of-subject) of event target  <br>is_indirect_subject_of = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_insurrectionary": "True if IG scope is contributing to a brewing revolution  <br>is_insurrectionary = boolTraits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "is_interest_active": "Is the interest marker active  <br>is_interest_active = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: interest_marker  ",
            "is_interest_group_type": "Checks if Interest Group is of a certain type  <br>Can also be used on characters directly  <br>is_interest_group_type = x  <br><b>Supported Scopes</b>: character, interest_group  ",
            "is_isolated_from_market": "Check if a state is isolated from its marketTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_junior_in_customs_union": "True if country is a junior country in a customs custom  <br>is_junior_in_customs_union = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_land_theater": "Checks if a theater is a land theater  <br>is_land_theater = boolTraits: yes/no   <br><b>Supported Scopes</b>: theater  ",
            "is_largest_state_in_region": "Check if state is the largest in the state region = boolTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_lens_open": "Checks if a certain lens is open, specified as a lens key. Specify an optional named tab to check if this tab is open.  <br>is_lens_open = { lens = lens_key tab_name = tab_key }An interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "is_local_player": "True if country scope is a player  <br>is_local_player = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_losing_power_rank": "Check if the country is in the process of dropping in power rankingTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_marginal": "True if IG scope is marginal  <br>is_marginal = boolTraits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "is_mass_migration_origin": "Checks if the scoped country is the origin of mass migration  <br>is_mass_migration_origin = yesTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_mass_migration_origin_of_culture": "Checks if the scoped country origin of mass migration of specific culture  <br>is_mass_migration_origin_of_culture = cu:example_cultureTraits: culture scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: culture  ",
            "is_mass_migration_target": "Mass migration target is state.  <br>any_state = { limit = { owner = ROOT is_mass_migration_target = yes } }Traits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_member_of_any_lobby": "Checks if interest group is member of any lobby  <br>is_member_of_any_lobby = yesTraits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "is_member_of_lobby": "Checks if interest group is member of a certain lobby type  <br>is_member_of_lobby = lobby_type:pro_country_lobbyTraits: political_lobby_type scope  <br><b>Supported Scopes</b>: interest_group  <br><b>Supported Targets</b>: political_lobby_type  ",
            "is_member_of_party": "Checks if Interest Group is a member of target party  <br>is_member_of_party = <party>Traits: party scope  <br><b>Supported Scopes</b>: interest_group  <br><b>Supported Targets</b>: party  ",
            "is_mobilized": "Checks if the military formation is mobilized  <br>is_mobilized = boolTraits: yes/no   <br><b>Supported Scopes</b>: military_formation  ",
            "is_monarch": "Checks if character is a monarch of a country with hereditary succession  <br>is_monarch = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_naval_invasion_stalled_due_to_orders": "Checks if a naval invasion is stalled due to wrong admiral orders  <br>is_naval_invasion_stalled = boolTraits: yes/no   <br><b>Supported Scopes</b>: naval_invasion  ",
            "is_objective_completed": "Is the objective completed for the country in scope?  <br>is_objective_completed = yesTraits: yes/no   <br><b>Supported Scopes</b>: none/all  ",
            "is_on_front": "Checks if a character or military formation has been assigned to a Front and has arrived there  <br>is_on_front = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: character, military_formation  ",
            "is_owed_obligation_by": "Checks if the scoped country is owed a obligation by the target country  <br>is_owed_obligation_by = c:FRATraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_panel_open": "Checks if a certain infopanel is open, specified as an event target (target) or as a string (panel_name). Specify an optional named tab (tab_name) to check if this tab is open.  <br>is_panel_open = { target = <scope> OR panel_name = panel_name tab_name = tab_name }An interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "is_party": "Checks if the target party is same as scoped party. Will only work on exact same party object, meaning you can't compare across countries.  <br>is_party = <party>Traits: party scope  <br><b>Supported Scopes</b>: party  <br><b>Supported Targets</b>: party  ",
            "is_party_type": "Checks if the scoped party's type is the specified one  <br>is_party_type = party_type_database_key  <br><b>Supported Scopes</b>: party  ",
            "is_player": "True if country scope is a player  <br>is_player = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_political_lobby_type": "Checks political lobby is of a certain lobby type  <br>is_political_lobby_type = political lobby type  <br><b>Supported Scopes</b>: political_lobby  ",
            "is_political_movement_type": "Check if a political movement is a particular type  <br>is_political_movement_type = movement_to_enact  <br>  <br><b>Supported Scopes</b>: political_movement  ",
            "is_pop_type": "Checks if pop is of specified type  <br>is_pop_type = poptype  <br><b>Supported Scopes</b>: pop  ",
            "is_popup_open": "Checks if the specified popup panel is open  <br>is_popup_open = popupAn interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "is_power_bloc_leader": "Checks if the country is a leader of a Power Bloc  <br>is_power_bloc_leader = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_powerful": "True if IG scope is influential  <br>is_powerful = boolTraits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "is_primary_culture_of": "Checks if culture is any of a country's primary cultures  <br>is_primary_culture_of = <country>Traits: country scope  <br><b>Supported Scopes</b>: culture  <br><b>Supported Targets</b>: country  ",
            "is_production_method_active": "Checks if the building of a particular type in scoped state has the specified production method active  <br>is_production_method_active = { building_type = <key> production_method = <key> }  <br><b>Supported Scopes</b>: state  ",
            "is_progressing": "Check if the journal entry is progressing  <br>is_progressing = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: journalentry  ",
            "is_province_land": "Check if the province is on landTraits: yes/no   <br><b>Supported Scopes</b>: province  ",
            "is_researching_technology": "Check if the country is actively researching a tech  <br>is_researching_technology = <scope/key/any>  <br><b>Supported Scopes</b>: country  ",
            "is_researching_technology_category": "Check if the country is actively researching a tech category  <br>is_researching_technology_category = <key/any>  <br><b>Supported Scopes</b>: country  ",
            "is_revolutionary": "Check if the country is revolutionaryTraits: yes/no   <br><b>Supported Scopes</b>: country, interest_group  ",
            "is_revolutionary_movement": "Check whether the scoped political movement is causing a brewing revolution in the country  <br>is_revolutionary_movement = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: political_movement  ",
            "is_rightclick_menu_open": "Checks if the specified rightclick menu is open  <br>is_rightclick_menu_open = <menu_key>An interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "is_ruler": "Checks if character is a ruler/head of state of a country  <br>is_ruler = boolTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "is_same_interest_group_type": "Checks if Interest Group is of the same IG type as target  <br>is_interest_group_type = scope:neighbor_leading_igTraits: interest_group scope  <br><b>Supported Scopes</b>: interest_group  <br><b>Supported Targets</b>: interest_group  ",
            "is_same_law_group_as": "Checks if scope law type is in the same group as the target law type scope  <br>is_same_law_group_as = <law type scope>Traits: law_type scope  <br><b>Supported Scopes</b>: law_type  <br><b>Supported Targets</b>: law_type  ",
            "is_same_party_type": "Checks if Party is of the same party type as target  <br>is_same_party_type_as = scope:neighboring_partyTraits: party scope  <br><b>Supported Scopes</b>: party  <br><b>Supported Targets</b>: party  ",
            "is_sea_adjacent": "Check if state borders a sea region (regular or impassable)  <br>is_sea_adjacent = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_secessionist": "Check if the country is secessionistTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_set": "Checks whether the specified scope target has been set (includes being the null object)  <br>is_set = from.owner.var:cool_var.mother  <br><b>Supported Scopes</b>: none/all  ",
            "is_slave_state": "Check if a state employs or has the potential to employ slaves.Traits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_split_state": "Checks if the scoped state is a split state.  <br>scope:example_state = { is_split_state = yes }Traits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_state_region_land": "Check if the state region is on landTraits: yes/no   <br><b>Supported Scopes</b>: state_region  ",
            "is_state_religion": "Checks if the religion is the state religion in a country  <br>is_accepted_religion = <country>Traits: country scope  <br><b>Supported Scopes</b>: religion  <br><b>Supported Targets</b>: country  ",
            "is_strategic_objective": "Checks if the scoped State is a Strategic Objective of a Country  <br>is_strategic_objective = <country>Traits: country scope  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: country  ",
            "is_strongest_ig_in_government": "Checks whether the scoped interest group has the most clout out of all interest groups in government  <br>is_strongest_ig_in_government = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: interest_group  ",
            "is_subject": "True if country is a subject  <br>is_subject = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "is_subject_of": "Checks if country in scope is subject (or subject-of-subject) of event target  <br>is_subject_of = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_subject_type": "Checks the country's subject type  <br>is_subject_type = subject type  <br><b>Supported Scopes</b>: country  ",
            "is_subsidized": "Check if a building is being subsidized  <br>is_subsidized = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: building  ",
            "is_subsistence_building": "Check if a building is a subsistence building  <br>is_subsistence_building = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: building  ",
            "is_supporting_unification_candidate": "Check if scope country is supporting a unification candidate for a specific country formation  <br>is_supporting_unification_candidate = { who = c:PRU country_formation = GER }  <br><b>Supported Scopes</b>: country  ",
            "is_target_in_global_variable_list": "Checks if a target is in a variable list  <br>is_target_in_variable_list = { name = X target = Y }  <br>Where X is the name of the variable  <br>Where Y is an event target  <br><b>Supported Scopes</b>: none/all  ",
            "is_target_in_local_variable_list": "Checks if a target is in a variable list  <br>is_target_in_variable_list = { name = X target = Y }  <br>Where X is the name of the variable  <br>Where Y is an event target  <br><b>Supported Scopes</b>: none/all  ",
            "is_target_in_variable_list": "Checks if a target is in a variable list  <br>is_target_in_variable_list = { name = X target = Y }  <br>Where X is the name of the variable  <br>Where Y is an event target  <br><b>Supported Scopes</b>: none/all  ",
            "is_target_of_wargoal": "Checks if state is target of any wargoal in wars involving a specific country  <br>has_war_goal = <country>Traits: country scope  <br><b>Supported Scopes</b>: state  <br><b>Supported Targets</b>: country  ",
            "is_taxing_goods": "Check if a country is taxing a good  <br>has_embargo = <goods key/scope>  <br>  <br><b>Supported Scopes</b>: country  ",
            "is_trade_route_active": "Checks if the scoped trade route is active  <br>is_trade_route_active = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: trade_route  ",
            "is_trade_route_productive": "Checks if the scoped trade route is productive  <br>is_trade_route_productive = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: trade_route  ",
            "is_tradeable": "Check if a goods or market goods is tradeable  <br>is_tradeable = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: goods, market_goods  ",
            "is_treaty_port": "Checks if the scoped state is a treaty port  <br>is_treaty_port = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_tutorial_active": "Is the tutorial active?An interface trigger, can only be used in specific places<br>Traits: yes/no   <br><b>Supported Scopes</b>: none/all  ",
            "is_tutorial_lesson_active": "Is this the current tutorial lesson?  <br>is_tutorial_lesson_active = reactive_advice_successionAn interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "is_tutorial_lesson_chain_completed": "Has the tutorial lesson chain with the specified key been finished?An interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "is_tutorial_lesson_completed": "has the tutorial lesson with the specified name been finished?An interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "is_tutorial_lesson_step_completed": "Has the tutorial lesson step been finished?  <br>is_tutorial_lesson_step_completed = lesson_key:step_keyAn interface trigger, can only be used in specific places  <br><b>Supported Scopes</b>: none/all  ",
            "is_under_colonization": "Check if state is under colonization  <br>is_under_colonization = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "is_under_construction": "Checks if building is under construction  <br>is_under_construction = boolTraits: yes/no   <br><b>Supported Scopes</b>: building  ",
            "is_unification_candidate": "Check if scope country is a unification candidate for country tag  <br>has_country_unification_candidate = GER  <br><b>Supported Scopes</b>: country  ",
            "is_violating_sovereignty_of": "Check if the scoped country is violating the sovereignty of a target country  <br>is_violating_sovereignty_of = c:GBRTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "is_vulnerable_front": "Whether the scoped Front doesn't have any Battalions nor Generals on target side, and the enemy has at least one General.  <br>is_vulnerable_front = scope:example_countryTraits: country scope  <br><b>Supported Scopes</b>: front  <br><b>Supported Targets</b>: country  ",
            "is_war": "True if the diplomatic play has escalated into war  <br>is_war = boolTraits: yes/no   <br><b>Supported Scopes</b>: diplomatic_play  ",
            "is_war_participant": "Check if the target country is participant in a warTraits: country scope  <br><b>Supported Scopes</b>: war  <br><b>Supported Targets</b>: country  ",
            "is_warleader": "Check if country is warleader in warTraits: country scope  <br><b>Supported Scopes</b>: war  <br><b>Supported Targets</b>: country  ",
            "isolated_states": "Compare number of Isolated StatesTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "journal_entry_age": "Return the age of the journal entry (since activation) in days  <br>journal_entry_age > 720Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: journalentry  ",
            "law_approved_by": "Checks whether the scoped law is approved by an interest group  <br>law_approved_by = ig_rural_folk  <br><b>Supported Scopes</b>: law  ",
            "law_progressiveness_difference": "Compares the progressiveness of the scoped law type to the target law type, higher value means greater difference  <br>law_progressiveness_difference( scope:target_law ) > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: law_type  ",
            "law_stance": "Compares the stance of the scoped character or interest group about the specified law  <br><b>Supported Scopes</b>: character, interest_group  ",
            "leading_producer_of": "Checks if country is producing the most of a certain good  <br>leading_producer_of = g:luxury_clothesTraits: goods scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: goods  ",
            "leads_customs_union": "Check if any other country is part of this country's customs union  <br>leads_customs_union = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "levels_owned_by_country": "Compares how many levels a country owns in a building  <br> levels_owned_by_country = {  <br> target = c:GBR  <br> value  >= 1Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "leverage_advantage": "Checks that the leverage advantage between power bloc and target country meets condition  <br>power_bloc =  <br>{  <br>      leverage = { target = c:BEL value > 0 }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "liberty_desire": "Compare trigger for the Liberty Desire value in a scoped country.  <br>liberty_desire > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "liberty_desire_weekly_progress": "Compare trigger for the weekly Liberty Desire progress value in a scoped country.  <br>liberty_desire_weekly_progress > 0Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "list_size": "Checks the size of a list  <br>list_size = { name = X value >= Y }  <br>Where X is the name of the list  <br>Where Y is a script valueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: none/all  ",
            "literacy_rate": "Checks if a pop, state or country has a certain amount of literacy  <br>literacy = valueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country, pop, state  ",
            "lobby_clout": "Compare to total clout of scoped lobby's interest groups  <br>lobby_clout >= 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: political_lobby  ",
            "lobby_formation_reason": "Check scope diplomatic catalyst or political lobby scope for lobby formation reason  <br>lobby_formation_reason = diplomacy  <br>  <br><b>Supported Scopes</b>: diplomatic_catalyst, political_lobby  ",
            "local_variable_list_size": "Checks the size of a variable list  <br>variable_list_size = { name = X target >= Y }  <br>Where X is the name of the variable  <br>Where Y is a script value or number  <br><b>Supported Scopes</b>: none/all  ",
            "loyalist_fraction": "Compares loyalist fraction in pops in state or country, all parameters except value are optional  <br>loyalist_fraction = { value = x pop_type = <key> strata = <key> culture = <key/scope> religion = <key/scope> }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country, state  ",
            "loyalty": "Compares the loyalty in a given state, i.e. the fraction of Loyalists  <br>loyalty > 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "market_access": "Checks the market access of the scoped state  <br>market_access > 0.8Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "market_goods_buy_orders": "Checks if market goods has the specified number of buy orders  <br>market_goods_buy_orders < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_cheaper": "Checks if market goods is at least the specified percentage cheaper than base price  <br>market_goods_cheaper > X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_consumption": "Checks if market goods has the specified number of total consumption  <br>market_goods_consumption < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_delta": "Checks if market has the specified goods delta (production + imports) - (consumption + exports)  <br>market_goods_delta < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_exports": "Checks if market goods has the specified number of exports  <br>market_goods_exports < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_has_goods_shortage": "Check if market goods has a shortage in the market  <br>market_goods_has_goods_shortage = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_imports": "Checks if market goods has the specified number of imports  <br>market_goods_imports < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_pricier": "Checks if market goods is at least the specified percentage more expensive than base price  <br>market_goods_pricier > X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_production": "Checks if market goods has the specified number of total production  <br>market_goods_production < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_sell_orders": "Checks if market goods has the specified number of sell orders  <br>market_goods_sell_orders < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_goods_shortage_ratio": "Compares the shortage ratio of a market goods in its market  <br>market_goods_shortage_ratio > 0.33Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market_goods  ",
            "market_has_goods_shortage": "Check if market has a shortage on any of its building inputs  <br>market_has_goods_shortage = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: market  ",
            "market_number_goods_shortages": "Check how many shortages a market has on any of its building inputs  <br>market_number_goods_shortages >= 2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market  ",
            "market_number_goods_shortages_with": "Check how many shortages a market has on any of its building inputs, plus the ones from the target country  <br>'market_number_goods_shortages_with(scope:target) >= 2'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market  ",
            "market_number_goods_shortages_without": "Check how many shortages a market has on any of its building inputs, subtracting the ones from the target country  <br>'market_number_goods_shortages_without(scope:target) >= 2'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: market  ",
            "max_law_enactment_setbacks": "Compares to the max number of law enactment setbacks a country can suffer before the law failsTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "max_num_declared_interests": "Compares the maximum number of declared interests of scoped country  <br>max_num_declared_interests = <value>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "max_organization": "Compares the effective maximum Organization of the Military Formation in scope  <br>max_organization < define:NMilitary|MILITARY_FORMATION_ORGANIZATION_MAXTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: military_formation  ",
            "military_wage_level": "Compares the military wage level of scoped country  <br>military_wage_level = <level>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "military_wage_level_value": "Compares the military wage level value of scoped country  <br>military_wage_level_value = <level>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "month": "Compare to current game date month (Jan: 0, Dec: 11)  <br>month > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: none/all  ",
            "most_powerful_strata": "Compares an interest groups most powerful strata  <br><b>Supported Scopes</b>: interest_group  ",
            "most_prominent_revolting_interest_group": "Checks if the most prominent revolting interest group in the scoped state has the given interest group type. Evaluates false if the scoped state is not in revolt.  <br>most_prominent_revolting_interest_group = ig_landowners  <br><b>Supported Scopes</b>: state  ",
            "nand": "a negated AND trigger  <br><b>Supported Scopes</b>: none/all  ",
            "nationalization_cost": "Compares the total cost of nationalizing all buildings in scope country owned by the government or pops of target country  <br>nationalization_cost = { target = scope:other_country value > 100000 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "naval_power_projection": "Compares a Country's naval_power_projection   <br> scope:example_country = { naval_power_projection < root.naval_power_projectionTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "neighbors_any_power_bloc": "Checks if the scoped country neighbors any power bloc. Note: the scoped country is not considered to be neighboring the power bloc it belongs to (if any)  <br>neighbors_any_power_bloc = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "neighbors_member_of_same_power_bloc": "Checks if the scoped country neighbors any other country belonging to the same power bloc  <br>neighbors_member_of_same_power_bloc = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "neighbors_power_bloc": "Checks if the scoped country neighbors the target power bloc. Note: the scoped country is not considered to be neighboring the power bloc it belongs to (if any)  <br>neighbors_power_bloc = c:PRU.power_blocTraits: power_bloc scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: power_bloc  ",
            "night_value": "Night valueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: none/all  ",
            "nor": "a negated OR trigger  <br><b>Supported Scopes</b>: none/all  ",
            "not": "negates content of trigger  <br><b>Supported Scopes</b>: none/all  ",
            "num_casualties": "Checks the number of total casualties in the scoped war  <br>num_casualties >= 5000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: war  ",
            "num_country_casualties": "Checks the number of casualties for the target country in the scoped war  <br>num_country_casualties = { target = country value < 5000 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: war  ",
            "num_country_dead": "Checks the number of dead for the target country in the scoped war  <br>num_country_dead = { target = country value < 5000 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: war  ",
            "num_country_wounded": "Checks the number of wounded for the target country in the scoped war  <br>num_country_wounded = { target = country value < 5000 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: war  ",
            "num_cultural_communities": "Check cultural communities in state  <br>num_cultural_communities > 5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "num_dead": "Checks the number of total dead in the scoped war  <br>num_dead >= 5000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: war  ",
            "num_declared_interests": "Compares the number of declared interests of scoped country  <br>num_declared_interests = <value>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "num_investments_of_type": "Checks the number of buildings levels of a given type the scoped country has outside their own country.  <br> num_investments_of_type = { type = building_oil_rig value > 5 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "num_mobilized_units_in_theater": "Determines the number of mobilized units belonging to the scoped theater's owner or their allies, in fronts intersecting the scoped theater  <br>num_mobilized_units_in_theater > 25Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: theater  ",
            "num_political_lobbies": "Compare to number of political lobbies in scoped country or interest group  <br>num_political_lobbies > 0Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country, interest_group  ",
            "num_power_bloc_members": "Compare the number of members in a power bloc against a value  <br>num_power_bloc_members >= 2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "num_power_bloc_states": "Compare the number of states in a power bloc against a value  <br>num_power_bloc_states >= 2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "num_provinces_in_theater": "Determines the number provinces in the scoped theater  <br>num_provinces_in_theater > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: theater  ",
            "num_subjects": "Compares the number of subjects of scoped country  <br>num_subjects = <value>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "num_taxed_goods": "Compares the number of consumption taxed goods of scoped country  <br>num_taxed_goods = <value>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "num_wounded": "Checks the number of total wounded in the scoped war  <br>num_wounded >= 5000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: war  ",
            "number_of_possible_decisions": "The number of possible Descision a Country can take  <br>umber_of_possible_decisions > 0Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "occupancy": "Evaluates a building's current occupancy  <br>occupancy < 0.25Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "or": "at least one entry inside trigger must be true  <br><b>Supported Scopes</b>: none/all  ",
            "organization": "Compares the Organization of the Military Formation in scope  <br>organization <= define:NMilitary|MILITARY_FORMATION_ORGANIZATION_MINTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: military_formation  ",
            "overlord_can_decrease_subject_autonomy": "Check if an overlord can decrease a subject autonomy  <br>overlord_can_decrease_subject_autonomy = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "owes_obligation_to": "Checks if country in scope owes a obligation to event target  <br>owes_obligation_to = countryTraits: country scope  <br><b>Supported Scopes</b>: country  <br><b>Supported Targets</b>: country  ",
            "owns_entire_state_region": "Check if country owns entire region  <br>owns_entire_state_region = key  <br><b>Supported Scopes</b>: country  ",
            "owns_treaty_port_in": "Does country own the treaty port in assigned state region  <br>owns_treaty_port_in = key  <br><b>Supported Scopes</b>: country  ",
            "play_participant_has_war_goal_of_type_against": "Checks if scope country holds a wargoal of a specific type targeting a specific country in any diplomatic play  <br>play_participant_has_war_goal_of_type_against = { type = <wargoaltype key>, target = <country scope> }  <br><b>Supported Scopes</b>: country  ",
            "play_side_has_war_goal_of_type_against": "Checks if any country on the same side as scope country in any diplomatic play holds a wargoal of a specific type targeting a specificcountry  <br>play_side_has_war_goal_of_type_against = { type = <wargoal type key>, target = <country scope> }  <br><b>Supported Scopes</b>: country  ",
            "political_movement_radicalism": "Compare radicalism of political movement  <br>political_movement_radicalism > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: political_movement  ",
            "political_movement_support": "Compare support of political movement  <br>political_movement_support > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: political_movement  ",
            "politically_involved_ratio": "Compares the percentage of politically involved population in a country  <br>politically_involved_ratio > 0.25Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "pollution_amount": "Compare state region pollutionTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state_region  ",
            "pollution_generation": "Compare total pollution generation across all buildings in the stateTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "pop_employment_building": "Checks if pop is working in a specific building type  <br>pop_employment_building = building  <br><b>Supported Scopes</b>: pop  ",
            "pop_employment_building_group": "Checks if pop is working in a specific building type  <br>pop_employment_building = building  <br><b>Supported Scopes</b>: pop  ",
            "pop_has_primary_culture": "Checks if pop's culture is primary  <br>pop_has_primary_culture = boolTraits: yes/no   <br><b>Supported Scopes</b>: pop  ",
            "pop_is_discriminated": "Checks if pop is discriminated against  <br>pop_is_discriminated = boolTraits: yes/no   <br><b>Supported Scopes</b>: pop  ",
            "pop_loyalist_fraction": "Compares the number of Radicals in a pop to its total size  <br>pop_loyalty_fraction < 0.5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: pop  ",
            "pop_neutral_fraction": "Compares the number of Neutrals (not Radical, not Loyalist) in a pop to its total size  <br>pop_neutral_fraction > 0.95Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: pop  ",
            "pop_radical_fraction": "Compares the number of Radicals in a pop to its total size  <br>pop_radical_fraction > 0.25Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: pop  ",
            "pop_type_percent_country": "Checks whether the scoped country has <percent> of its population belonging to the specified pop type  <br>scope:example_country = {  <br> pop_type_percent_country = {  <br>      pop_type = <pop_type>  <br>     percent <compare operator (<,>,= and so on)> <percent>  <br>    }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "pop_type_percent_state": "Checks that a state's population has a certain percentage of a specific pop type  <br>scope:example_state = {  <br>  pop_type_percent_state = {  <br>    target = pop_type:laborer  <br>    value <= 0.8  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "potential_diplomatic_play_power_ratio": "Check the expected power ratio between scope country side and target country side in a potential diplomatic play  <br>Attempts to predict which sides involved participants will take (if any) so doesn't just check 'starting strengths'  <br>potential_diplomatic_play_power_ratio = { type = dp_open_market target = c:BEL state = c:BEL.capital value > 1.0 }  <br>state and type are optional, will default to dp_open_market on target capitalTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_rank": "Compare a power bloc's rank  <br>power_bloc =  <br>{  <br>      power_bloc_rank <= 2  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_share_gdp": "Compare the share of GDP of the country in scope against all its Power Bloc current members, returns -1 if not in a Power Bloc  <br>power_bloc_share_gdp > 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_share_gdp_with": "Compare the share of GDP of the country in scope against all its Power Bloc members plus an additional country, returns -1 if not in a Power Bloc  <br>'power_bloc_share_gdp_with(scope:country) > 0.2'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_share_gdp_without": "Compare the share of GDP of the country in scope against all its Power Bloc members minus one of the members, returns -1 if not in a Power Bloc  <br>'power_bloc_share_gdp_without(scope:country) > 0.2'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_share_power_projection": "Compare the share of Power Projection of the country in scope against all its Power Bloc members, returns -1 if not in a Power Bloc  <br>power_bloc_share_power_projection > 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_share_power_projection_with": "Compare the share of Power Projection of the country in scope against all its Power Bloc members plus an additional country, returns -1 if not in a Power Bloc  <br>'power_bloc_share_power_projection_with(scope:country) > 0.2'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_share_power_projection_without": "Compare the share of Power Projection of the country in scope against all its Power Bloc members minus one of the members, returns -1 if not in a Power Bloc  <br>'power_bloc_share_power_projection_without(scope:country) > 0.2'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_share_prestige": "Compare the share of Prestige of the country in scope against all its Power Bloc members, returns -1 if not in a Power Bloc  <br>power_bloc_share_prestige > 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_share_prestige_with": "Compare the share of Prestige of the country in scope against all its Power Bloc members plus an additional country, returns -1 if not in a Power Bloc  <br>'power_bloc_share_prestige_with(scope:country) > 0.2'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_share_prestige_without": "Compare the share of Prestige of the country in scope against all its Power Bloc members minus one of the members, returns -1 if not in a Power Bloc  <br>'power_bloc_share_prestige_without(scope:country) > 0.2'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "power_bloc_total_leading_goods_producers": "Compare how many members are among the leading producers for all goods worldwide weighted by their position in the ranking.The top producer is weighted by MIN_SPOT_PRESTIGE_AWARD and then each subsequent position is weighted by one less until.By default this means 1st counts as 3, 2nd as 2 and 3rd as 1. Any other positions as 0.  <br>power_bloc_total_leading_goods_producers > 15Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_total_leading_goods_producers_with": "Compare how many members are among the leading producers for all goods worldwide weighted by their position in the ranking, plus one additional country not currently in the power bloc.The top producer is weighted by MIN_SPOT_PRESTIGE_AWARD and then each subsequent position is weighted by one less until.By default this means 1st counts as 3, 2nd as 2 and 3rd as 1. Any other positions as 0.  <br>'power_bloc_total_leading_goods_producers_with(scope:target) > 15'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_total_leading_goods_producers_without": "Compare how many members are among the leading producers for all goods worldwide weighted by their position in the ranking, minus one country that is currently in the power bloc.The top producer is weighted by MIN_SPOT_PRESTIGE_AWARD and then each subsequent position is weighted by one less until.By default this means 1st counts as 3, 2nd as 2 and 3rd as 1. Any other positions as 0.  <br>'power_bloc_total_leading_goods_producers_without(scope:target) > 15'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_economic_dependence": "If used in a power bloc scope, compare the member with the lowest economic dependence on the leader.  <br>power_bloc_worst_economic_dependence > 2.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_economic_dependence_with": "If used in a power bloc scope, compare the member with the lowest economic dependence on the leader.  <br>power_bloc_worst_economic_dependence > 2.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_economic_dependence_without": "If used in a power bloc scope, compare the member with the lowest economic dependence on the leader.  <br>power_bloc_worst_economic_dependence > 2.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_infamy": "If used in a power bloc scope, compare the Infamy value of the member country with the worst (highest) Infamy  <br>power_bloc_worst_infamy > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_infamy_with": "If used in a power bloc scope, compare the Infamy value of the member country with the worst (highest) Infamy  <br>power_bloc_worst_infamy > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_infamy_without": "If used in a power bloc scope, compare the Infamy value of the member country with the worst (highest) Infamy  <br>power_bloc_worst_infamy > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_leader_relations": "If used in a power bloc scope, compare the Relations value to the power bloc leader for the member country with the worst (lowest) Relations  <br>power_bloc_worst_leader_relations > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_leader_relations_with": "If used in a power bloc scope, compare the Relations value to the power bloc leader for the member country with the worst (lowest) Relations  <br>power_bloc_worst_leader_relations > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_leader_relations_without": "If used in a power bloc scope, compare the Relations value to the power bloc leader for the member country with the worst (lowest) Relations  <br>power_bloc_worst_leader_relations > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_leader_religion_population_fraction": "If used in a power bloc scope, compare the lowest population fraction in a member country that follows the leader's religion.  <br>power_bloc_worst_leader_religion_population_fraction > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_leader_religion_population_fraction_with": "If used in a power bloc scope, compare the lowest population fraction in a member country that follows the leader's religion.  <br>power_bloc_worst_leader_religion_population_fraction > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_leader_religion_population_fraction_without": "If used in a power bloc scope, compare the lowest population fraction in a member country that follows the leader's religion.  <br>power_bloc_worst_leader_religion_population_fraction > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_liberty_desire": "If used in a power bloc scope, compare the Liberty Desire value of the member country with the worst (highest) Liberty Desire  <br>power_bloc_worst_liberty_desire > 75Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_liberty_desire_with": "If used in a power bloc scope, compare the Liberty Desire value of the member country with the worst (highest) Liberty Desire  <br>power_bloc_worst_liberty_desire > 75Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_liberty_desire_without": "If used in a power bloc scope, compare the Liberty Desire value of the member country with the worst (highest) Liberty Desire  <br>power_bloc_worst_liberty_desire > 75Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_progressiveness_difference_government_type": "If used in a power bloc scope, compare the total Progressiveness value difference for the member country with the worst (highest) difference in progressiveness between their Governance Principles and Distribution of Power Laws compared to the power bloc leader  <br>power_bloc_worst_progressiveness_compatibility_government_type > 100Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_progressiveness_difference_government_type_with": "If used in a power bloc scope, compare the total Progressiveness value difference for the member country with the worst (highest) difference in progressiveness between their Governance Principles and Distribution of Power Laws compared to the power bloc leader  <br>power_bloc_worst_progressiveness_compatibility_government_type > 100Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "power_bloc_worst_progressiveness_difference_government_type_without": "If used in a power bloc scope, compare the total Progressiveness value difference for the member country with the worst (highest) difference in progressiveness between their Governance Principles and Distribution of Power Laws compared to the power bloc leader  <br>power_bloc_worst_progressiveness_compatibility_government_type > 100Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "predicted_cohesion_percentage_with": "Predicts the cohesion of a Power Bloc (as a fraction of 1) if it included target country as a member  <br>predicted_cohesion_percentage_with, = { target = scope:other_country value > 0.9 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "prefers_law": "Checks if the scoped interest group prefers the specified law to the comparison law  <br><b>Supported Scopes</b>: interest_group  ",
            "prestige": "Compare prestigeTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "private_ownership_fraction": "Compares the fraction of this building's levels that are privately owned  <br> private_ownership_fraction > 0.5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "produced_authority": "Compares the produced authority of the scoped countryTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "produced_bureaucracy": "Compares the produced bureaucracy of the scoped countryTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "produced_influence": "Compares the produced influence of the scoped countryTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "progressiveness": "Compare the progressiveness of the law type in scope  <br>law_type:law_isolationism.progressiveness > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: law_type  ",
            "quality_of_life": "Compares the quality of life of the given pop  <br>quality_of_life > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: pop  ",
            "radical_fraction": "Compares radical fraction in pops in state or country, all parameters except value are optional  <br>radical_fraction = { value = x pop_type = <key> strata = <key> culture = <key/scope> religion = <key/scope> }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country, state  ",
            "relative_infrastructure": "Compares the infrastructure to infrastructure usage of a state  <br>relative_infrastructure > 1.1Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "religion_accepted": "Checks if pop's religion is accepted  <br>religion_accepted = boolTraits: yes/no   <br><b>Supported Scopes</b>: pop  ",
            "religion_percent_country": "Checks that a country's population has a certain percentage of a specific religion  <br>scope:example_country = {  <br>  religion_percent_country = {  <br>    target = rel:catholic  <br>    value <= 0.8  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "religion_percent_state": "Checks that a state's population has a certain percentage of a specific religion  <br>scope:example_state = {  <br>  religion_percent_state = {  <br>    target = rel:catholic  <br>    value <= 0.8  <br>  }  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "remaining_undepleted": "Check remaining amount of resource, like gold mines in a state  <br>remaining_undepleted = {  <br> type = bg_gold_mining  <br> amount > 1  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state_region  ",
            "ruler_can_have_command": "Checks if the country's government type allows its ruler to have command  <br>ruler_can_have_command = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "save_temporary_scope_as": "Saves a temporary target for use during the trigger execution  <br><b>Supported Scopes</b>: none/all  ",
            "save_temporary_scope_value_as": "Saves a numerical or bool value as an arbitrarily-named temporary target to be referenced later in the same effect  <br>save_temporary_scope_value_as = { name = <string> value = x }  <br><b>Supported Scopes</b>: none/all  ",
            "scaled_debt": "Compare value to a country's debt relative to debt ceiling  <br>scaled_debt = valueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "scaled_gold_reserves": "Compare value to a country's gold reserves relative to reserves limit  <br>scaled_gold_reserves = valueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "scripted_bar_progress": "Determines the progress of a scripted progress bar  <br>scripted_bar_progress = { name = progress_bar_tag value > 0.4 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: journalentry  ",
            "self_ownership_fraction": "Compares the fraction of this building's levels that are owned by the building itself  <br> self_ownership_fraction > 0.5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "shares_heritage_and_other_trait_with_any_primary_culture": "Checks if culture shares any trait marked as 'heritage' and other 'non-heritage' trait with any of a country's primary cultures  <br>shares_heritage_and_other_trait_with_any_primary_culture = <country>Traits: country scope  <br><b>Supported Scopes</b>: culture  <br><b>Supported Targets</b>: country  ",
            "shares_heritage_trait_with_any_primary_culture": "Checks if culture shares any trait marked as 'heritage' with any of a country's primary cultures  <br>shares_heritage_trait_with_any_primary_culture = <country>Traits: country scope  <br><b>Supported Scopes</b>: culture  <br><b>Supported Targets</b>: country  ",
            "shares_heritage_trait_with_state_religion": "Checks if the religion shares any trait marked as 'religion_group' with a country's religion  <br>shares_heritage_trait_with_state_religion = <country>Traits: country scope  <br><b>Supported Scopes</b>: religion  <br><b>Supported Targets</b>: country  ",
            "shares_non_heritage_trait_with_any_primary_culture": "Checks if culture shares any trait *other than* one marked as 'heritage' with any of a country's primary cultures  <br>shares_non_heritage_trait_with_any_primary_culture = <country>Traits: country scope  <br><b>Supported Scopes</b>: culture  <br><b>Supported Targets</b>: country  ",
            "shares_trait_with_any_primary_culture": "Checks if the culture shares any trait with any of a country's primary cultures  <br>shares_trait_with_any_primary_culture = <country>Traits: country scope  <br><b>Supported Scopes</b>: culture  <br><b>Supported Targets</b>: country  ",
            "shares_trait_with_state_religion": "Checks if the religion shares any trait with a country's state religion  <br>shares_trait_with_state_religion = <country>Traits: country scope  <br><b>Supported Scopes</b>: religion  <br><b>Supported Targets</b>: country  ",
            "should_set_wargoal": "Check if the country is lacking a primary wargoal in any diplomatic play it is part ofTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "should_show_nudity": "can nudity be shown?  <br>should_show_nudity = yes/noAn interface trigger, can only be used in specific places<br>Traits: yes/no   <br><b>Supported Scopes</b>: none/all  ",
            "shrinking_institution": "Checks if the institution is shrinking  <br>expanding_institution = <scope/key>  <br><b>Supported Scopes</b>: country  ",
            "size_weighted_lost_battles_fraction": "Determines the fraction of battles the target country has lost in the target war, weighted by manpower size of all battles in the war  <br>size_weighted_lost_battles_fraction = { target = scope:war value > 0.3 }  <br>add = 'size_weighted_lost_battles_fraction(scope:war)'Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "sol_ranking": "Compares a Country's Standard of Living Ranking (position)  <br>sol_ranking > 42Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "standard_of_living": "Compares the standard of living of a given pop  <br>standard_of_living > 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: pop  ",
            "starting_manpower": "Compares the starting manpower of a battle side  <br>starting_manpower > 25000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: battle_side  ",
            "state_goods_cheaper": "Checks if state goods is at least the specified percentage cheaper than base price  <br>state_goods_cheaper > X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state_goods  ",
            "state_goods_consumption": "Checks if state goods has the specified number of total consumption  <br>state_goods_consumption < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state_goods  ",
            "state_goods_delta": "Checks if state has the specified goods delta (production - consumption)  <br>state_goods_delta < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state_goods  ",
            "state_goods_has_local_goods_shortage": "Check if state goods has a shortage in a state, but NOT in the whole market  <br>state_goods_has_local_goods_shortage = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: state_goods  ",
            "state_goods_pricier": "Checks if state goods is at least the specified percentage more expensive than base price  <br>state_goods_pricier > X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state_goods  ",
            "state_goods_production": "Checks if state goods has the specified number of total production  <br>state_goods_production < X  <br>Where X = fixed pointTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state_goods  ",
            "state_has_building_group_levels": "Checks the sum of building levels for a building group in a state  <br> state_has_building_group_levels = {  <br> type = bg_heavy_industry  <br> value >= 100 }Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "state_has_building_levels": "Checks the sum of building levels for a state  <br>state_has_building_levels >= 10Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "state_has_building_type_levels": "Checks the sum of building levels for a building type in a state  <br> state_has_building_type_levels = {  <br> target = bt:building_barracks  <br> value >= 100Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "state_has_goods_shortage": "Check if state has a shortage on any of its building inputs  <br>state_has_goods_shortage = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "state_is_eligible_as_mass_migration_target": "Check if state can receive a mass migration at all.  <br>any_state = { limit = { state_is_eligible_as_mass_migration_target = yes } }Traits: yes/no   <br><b>Supported Scopes</b>: state  ",
            "state_population": "Checks the total population of the scoped state  <br>state_population <= 250000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "state_unemployment_rate": "Checks the unemployment rate (percentage) in the scoped state  <br>state_unemployment_rate > 0.1Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "strata": "Checks the strata of the scoped pop  <br>strata >= rich/middle/poorTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: pop  ",
            "subject_can_increase_autonomy": "Check if a subject can increase its autonomy  <br>subject_can_increase_autonomy = boolTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "supply_network_strength": "Compares the country's supply network strength (can exceed 1)  <br>supply_network_strength > 1.1Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "switch": "Switch on a trigger for the evaluation of another trigger with an optional fallback trigger.  <br>switch = {  <br>   trigger = simple_assign_trigger  <br>   case_1 = { triggers }  <br> case_2 = { triggers }  <br> case_n = { triggers }  <br> fallback = { triggers }  <br><b>Supported Scopes</b>: none/all  ",
            "taking_loans": "Check if the country is currently running a weekly deficit and taking loans to compensateTraits: yes/no   <br><b>Supported Scopes</b>: country  ",
            "target_cohesion_number": "Compare the target Cohesion as a numeric value  <br>target_cohesion_number > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "target_cohesion_percentage": "Compare the target Cohesion as a percentage of the maximum of a Power Bloc in scope  <br>target_cohesion_percentage > 0.5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "target_is": "Checks who the target of a diplomatic play is  <br>target_is = countryTraits: country scope  <br><b>Supported Scopes</b>: diplomatic_play  <br><b>Supported Targets</b>: country  ",
            "tax_capacity": "Checks the taxation capacity of the scoped state  <br>tax_capacity > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "tax_capacity_usage": "Checks the taxation capacity usage of the scoped state  <br>tax_capacity_usage > 50Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "tax_level": "Compares the overall tax level of scoped country  <br>tax_level = <level>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "tax_level_value": "Compares the overall tax level integer value of scoped country  <br>income_tax_level_value = <level>Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "tenure_in_current_power_bloc_days": "Compare the number of days the country in scope has been a member of their current Power Bloc  <br>tenure_in_current_power_bloc_days > 720Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "tenure_in_current_power_bloc_months": "Compare the number of (whole) months the country in scope has been a member of their current Power Bloc  <br>tenure_in_current_power_bloc_months > 20Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "tenure_in_current_power_bloc_weeks": "Compare the number of (whole) weeks the country in scope has been a member of their current Power Bloc  <br>tenure_in_current_power_bloc_weeks > 12Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "tenure_in_current_power_bloc_years": "Compare the number of (whole) years the country in scope has been a member of their current Power Bloc  <br>tenure_in_current_power_bloc_years > 5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "total_population": "Compares the total population of a given country  <br>total_population > 100000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "total_population_including_subjects": "Compares the total population in the scope country and its subjects  <br>total_population_including_subjects > 40000000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "total_population_including_subjects_share": "Compares the total population in the scope country and its subjects' share of the global population  <br>total_population_including_subjects_share > 0.4Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "total_population_share": "Compares the total population of a given country's share of the global population  <br>total_population_share > 0.02Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "total_urbanization": "Compares the total urbanization of a given state/ntotal_urbanization > 5Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "total_used_principle_levels": "Compare a power bloc's total number of active principle levels  <br>power_bloc =  <br>{  <br>   total_used_principle_levels >= 10}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "trade_route_needs_convoys_to_grow": "Checks if the scoped trade route needs more convoys to be able to grow  <br>trade_route_needs_convoys_to_grow = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: trade_route  ",
            "trait_value": "Compares the character's total trait value  <br>trait_value < experience_levelTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: character  ",
            "trigger_else": "Evaluates the triggers if the display_triggers of preceding 'trigger_if' or 'trigger_else_if' is not mettrigger_if = { limit = { <display_triggers> } triggers }  <br> trigger_else = { triggers }  <br><b>Supported Scopes</b>: none/all  ",
            "trigger_else_if": "Evaluates the enclosed triggers if the display_triggers of the preceding `trigger_if` or `trigger_else_if` is not met and its own display_trigger of the limit is mettrigger_if = { limit = { <display_triggers> } triggers }  <br>trigger_else_if = { limit = { <display_triggers> } triggers }  <br><b>Supported Scopes</b>: none/all  ",
            "trigger_if": "Evaluates the triggers if the display_triggers of the limit are met  <br>trigger_if = { limit = { <display_triggers> } triggers }  <br><b>Supported Scopes</b>: none/all  ",
            "turmoil": "Compares the turmoil in a given state, i.e. the fraction of Radicals  <br>turmoil > 0.2Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: state  ",
            "used_principle_slots": "Compare a power bloc's used principle slot count  <br>power_bloc =  <br>{  <br>        used_principle_slots >= 2  <br>}Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: power_bloc  ",
            "variable_list_size": "Checks the size of a variable list  <br>variable_list_size = { name = X target >= Y }  <br>Where X is the name of the variable  <br>Where Y is a script value or number  <br><b>Supported Scopes</b>: none/all  ",
            "war_has_active_peace_deal": "True if the war has a proposed peace deal  <br>war_has_active_peace_deal = boolTraits: yes/no   <br><b>Supported Scopes</b>: war  ",
            "war_participant_has_war_goal_of_type_against": "Checks if scope country holds a wargoal of a specific type targeting a specific country in any war  <br>war_participant_has_war_goal_of_type_against = { type = <wargoal type key>,target = <country scope> }  <br><b>Supported Scopes</b>: country  ",
            "war_side_has_war_goal_of_type_against": "Checks if any country on the same side as scope country in any war holds a wargoal of a specific type targeting a specific country  <br>war_side_has_war_goal_of_type_against = { type =<wargoal type key>, target = <country scope> }  <br><b>Supported Scopes</b>: country  ",
            "was_exiled": "Checks whether the scoped character was exiled  <br>was_exiled = yes/noTraits: yes/no   <br><b>Supported Scopes</b>: character  ",
            "was_formed_from": "Check if a formed country previously had a specific definition  <br>was_formed_from = <tag>  <br><b>Supported Scopes</b>: country  ",
            "wealth": "Checks if a pop has a certain amount of wealth  <br>wealth = valueTraits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: pop  ",
            "weekly_net_fixed_income": "Does the country have this amount of weekly income after fixed expenses  <br>weekly_net_income > 1000Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: country  ",
            "weekly_profit": "Checks whether the profits the building has made this week are above or below a given value  <br>weekly_profit >= 20.0Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: building  ",
            "weighted_calc_true_if": "Returns true if the sum of weights of fulfilled sub-triggers amount to the specified sum  <br>weighted_calc_true_if = { amount = 10 5 = { <trigger> } 15 = { <trigger> } 7 = { <trigger> } }  <br><b>Supported Scopes</b>: none/all  ",
            "would_accept_diplomatic_action": "Checks if a country would accept a diplomatic action proposed by another country  <br>would_accept_diplomatic_action = { actor = <country scope> type = <action type key> first_state = <state scope, optional> second_state = <state scope, optional>, modify_acceptance = <script value, optional> }  <br>if set, modify_acceptance will be added to their acceptance score, to allow for checking if they would accept with an obligation, etc  <br><b>Supported Scopes</b>: country  ",
            "year": "Compares the current year of the game  <br>year > 1850Traits: &lt;, &le;, =, !=, &gt;, &ge;  <br><b>Supported Scopes</b>: none/all  <br>",
        }

    @property
    def game_scopes(self):
        return {
            "array_define": "Reference the value of a numeric value in an array define: array_define:Namespace|Name|Index. Index is 0-based.<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: value",
            "bt": "Scope to a building type<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: building_type",
            "c": "Scope to the country with specified tag<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: country",
            "catalyst_type": "Scope to a diplomatic catalyst type from its name (catalyst_type:catalyst_relations_level_improved)<br>Requires Data: yes<br>Output Scopes: diplomatic_catalyst_type",
            "cd": "Scope to the country definition with specified tag<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: country_definition",
            "company_type": "Scope to a company type from its name (company_type:company_rheinmetall)<br>Requires Data: yes<br>Output Scopes: company_type",
            "compare_complex_value": "A comparison trigger that needs a parsable string parameter that will return its value in the context it is used eg: scope:root.number_of(armies)<br>Wild Card: yes<br>Requires Data: yes<br>Output Scopes: value",
            "compare_value": "A comparison trigger that will return its value in the context it is used eg: root.gold<br>Wild Card: yes<br>Output Scopes: value",
            "cu": "Scope to the culture with specified key<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: culture",
            "define": "Reference the value of a numeric or color define: define:Namespace|Name<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: value",
            "flag": "Flag literals eg: flag:the_boss<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: flag",
            "g": "Scope to the goods with specified key<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: goods",
            "global_gdp": "Get the global yearly predicted GDP<br>Output Scopes: value",
            "global_var": "Reference a previous set global variable via its name eg: global_var:important_thing<br>Requires Data: yes<br>Global Link: yes",
            "i": "Scope to ideology specified by key<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: ideology",
            "identity": "Scope to the central identity for the scoped power bloc<br>Input Scopes: power_bloc<br>Output Scopes: power_bloc_identity",
            "ideology": "Scope to the ideology of the scoped character (example: scope:example_character = { ideology = { save_scope_as = example_ideology } } )<br>Input Scopes: character<br>Output Scopes: ideology",
            "ig_trait": "Scope to the Interest Group trait with specified key<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: interest_group_trait",
            "ig_type": "Scope to an interest group type<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: interest_group_type",
            "infamy_threshold": "Scope to infamy level threshold for comparison purposes (infamy_threshold:infamous)<br>Requires Data: yes<br>Output Scopes: value",
            "is_setup": "Scope to true/false if gamestate is being initialized!<br>Global Link: yes<br>Output Scopes: value",
            "je_tutorial": "Scope to the active tutorial lesson's journal entry (do not use this outside tutorial)<br>Output Scopes: journalentry",
            "law_type": "Scope to a law type from its name (law_type:law_protected_speech)<br>Requires Data: yes<br>Output Scopes: law_type",
            "lobby_type": "Scope to a political lobby type from its name (lobby_type:lobby_pro_country)<br>Requires Data: yes<br>Output Scopes: political_lobby_type",
            "local_var": "Reference a previous set local variable via its name eg: local_var:person_of_interest<br>Requires Data: yes<br>Global Link: yes",
            "mobilization_option": "Scope to a mobilization option from its name (mobilization_option:key)<br>Requires Data: yes<br>Output Scopes: mobilization_option",
            "named_script_value": "A script value that will calculate and returns its value in the context it is used<br>Wild Card: yes<br>Output Scopes: value, color",
            "no": "Boolean literal for false values<br>Global Link: yes<br>Output Scopes: bool",
            "p": "Scope to province specified by hex key<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: province",
            "play_type": "Scope to a diplomatic play type from its name (play_type:dp_war_reparations)<br>Requires Data: yes<br>Output Scopes: diplomatic_play_type",
            "player": "Scope to the player (do not use this outside tutorial)<br>Output Scopes: country",
            "pop_type": "Scope to a pop type from its name (pop_type:laborers)<br>Requires Data: yes<br>Output Scopes: pop_type",
            "prev": "The previous scope<br>Global Link: yes",
            "principle": "Scope to the power bloc principle from its name (principle:key)<br>Requires Data: yes<br>Output Scopes: power_bloc_principle",
            "principle_group": "Scope to the power bloc principle group from its name (principle_group:key)<br>Requires Data: yes<br>Output Scopes: power_bloc_principle_group",
            "rank_value": "Scope to rank value of a particular country rank (rank_value:great_power)<br>Requires Data: yes<br>Output Scopes: value",
            "rel": "Scope to the religion with specified key<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: religion",
            "relations_threshold": "Scope to relations threshold level for comparison purposes (relations_threshold:warm)<br>Requires Data: yes<br>Output Scopes: value",
            "root": "The head of the current top scope eg: reciever of an event, taker of a decision<br>Global Link: yes",
            "s": "Scope to state region specified by key<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: state_region",
            "scope": "Reference a previously saved scope via its name eg: scope:target<br>Requires Data: yes<br>Global Link: yes",
            "sr": "Scope to the strategic region of specified key<br>Requires Data: yes<br>Global Link: yes<br>Output Scopes: strategic_region",
            "tension_threshold": "Scope to tension level threshold for comparison purposes (tension_threshold:warm)<br>Requires Data: yes<br>Output Scopes: value",
            "this": "The current scope",
            "unit_type": "Scope to a combat unit type from its name (unit_type:key)<br>Requires Data: yes<br>Output Scopes: combat_unit_type",
            "value": "A numeric literal value eg: 1, 5.2, -6<br>Wild Card: yes<br>Global Link: yes<br>Output Scopes: value",
            "var": "Reference a previous set variable via its name eg: var:mortal_enemy<br>Requires Data: yes",
            "yes": "Boolean literal for true values<br>Global Link: yes<br>Output Scopes: bool",
            "actor_market": "Scope to the actor market of the trade route<br>Input Scopes: trade_route<br>Output Scopes: market",
            "exporter": "Scope to the exporting market of the trade route<br>Input Scopes: trade_route<br>Output Scopes: market",
            "importer": "Scope to the importing market of the trade route<br>Input Scopes: trade_route<br>Output Scopes: market",
            "target_market": "Scope to the target market of the trade route<br>Input Scopes: trade_route<br>Output Scopes: market",
            "front": "Scope to a front from various scopes<br>  From a battle to the front where it takes place<br> From a character to the front where they are at or travelling towards<br>   From a military formation to the front it is currently at<br>   From a province to the front that contains it<br>Input Scopes: battle, character, military_formation, province<br>Output Scopes: front",
            "active_law": "Scope to the scoped country's active law in the named law group (active_law:lawgroup_trade_policy)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: law",
            "ai_army_comparison": "Scope to comparative army strength between two countries (example: value = ai_army_comparison:root)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "ai_gdp_comparison": "Scope to comparative GDP between two countries (example: value = ai_army_comparison:root)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "ai_ideological_opinion": "Scope to AI ideological opinion of scope country on target country (example: value = ai_ideological_opinion:root)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "ai_navy_comparison": "Scope to comparative navy strength between two countries (example: value = ai_navy_comparison:root)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "ai_subject_value": "Scope to AI desire of target country to have scope country as a subject (example: value = ai_subject_value:root)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "army_size": "Number of battalions of scope country, excluding currently raised conscripts.<br>army_size >= 20<br>army_size > c:FRA.army_size<br>Input Scopes: country<br>Output Scopes: value",
            "army_size_including_conscripts": "Number of battalions of scope country, including currently raised conscripts.<br>army_size_including_conscripts >= 20<br>army_size_including_conscripts > c:FRA.army_size_including_conscripts<br>Input Scopes: country<br>Output Scopes: value",
            "building_levels": "Get the total number of non-subsistence building levels of the scoped country<br>Input Scopes: country<br>Output Scopes: value",
            "cached_ai_coastal_population": "Scope to total coastal population recorded in AI spending variables (example: value = cached_ai_coastal_population)<br>Input Scopes: country<br>Output Scopes: value",
            "cached_ai_incorporated_coastal_population": "Scope to total incorporated coastal population recorded in AI spending variables (example: value = cached_ai_incorporated_coastal_population)<br>Input Scopes: country<br>Output Scopes: value",
            "cached_ai_incorporated_population": "Scope to total incorporated population recorded in AI spending variables (example: value = cached_ai_incorporated_population)<br>Input Scopes: country<br>Output Scopes: value",
            "cached_ai_overseas_subject_population": "Scope to total population in direct non-adjacent subjects recorded in AI spending variables (example: value = cached_ai_overseas_subject_population)<br>Input Scopes: country<br>Output Scopes: value",
            "cached_ai_subject_population": "Scope to total population in direct subjects recorded in AI spending variables (example: value = cached_ai_subject_population)<br>Input Scopes: country<br>Output Scopes: value",
            "cached_ai_total_population": "Scope to total population recorded in AI spending variables (example: value = cached_ai_total_population)<br>Input Scopes: country<br>Output Scopes: value",
            "cached_ai_unincorporated_coastal_population": "Scope to total unincorporated coastal population recorded in AI spending variables (example: value = cached_ai_unincorporated_coastal_population)<br>Input Scopes: country<br>Output Scopes: value",
            "cached_ai_unincorporated_population": "Scope to total unincorporated population recorded in AI spending variables (example: value = cached_ai_unincorporated_population)<br>Input Scopes: country<br>Output Scopes: value",
            "capital": "Scope to the capital state of a country<br>Input Scopes: country<br>Output Scopes: state",
            "civil_war_origin_country": "Scope to the origin country of a civil war country<br>Input Scopes: country<br>Output Scopes: country",
            "colonial_growth_per_colony": "Scope to the country's colonial growth per colony value (example: colonial_growth_per_colony > 0)<br>Input Scopes: country<br>Output Scopes: value",
            "company": "Scope to the scoped country's company of the named company type (company:company_rheinmetall)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: company",
            "country_definition": "Scope to country's definition<br>Input Scopes: country<br>Output Scopes: country_definition",
            "credit": "Scope to the current amount of max credit the country can take<br>Input Scopes: country<br>Output Scopes: value",
            "currently_enacting_law": "Scope from a country to the law that they're currently enacting<br>Input Scopes: country<br>Output Scopes: law",
            "expenses": "Get the current weekly expenses of the scoped country<br>Input Scopes: country<br>Output Scopes: value",
            "fixed_expenses": "Get the current weekly fixed expenses of the scoped country<br>Input Scopes: country<br>Output Scopes: value",
            "get_ruler_for": "Scopes from country to a character that would be ruler, under the given transfer of power type<br>get_ruler_for:parliamentary_elective = { effects... }<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: character",
            "government_size": "Get the scoped country's current number of Parties & independent IGs in government<br>Input Scopes: country<br>Output Scopes: value",
            "heir": "Scope to the heir of a country<br>Input Scopes: country<br>Output Scopes: character",
            "ig": "Scope to the interest group of specified key belonging to the country<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: interest_group",
            "imposed_law": "Scope from a country to the law currently imposed on them (enacting or not)<br>Input Scopes: country<br>Output Scopes: law",
            "income": "Get the current weekly income of the scoped country<br>Input Scopes: country<br>Output Scopes: value",
            "infamy": "Scope to infamy of scope country (example: infamy >= 2)<br>Input Scopes: country<br>Output Scopes: value",
            "institution": "Scope to a country's institution from its name (institution:institution_health_system)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: institution",
            "investment_pool_income": "Get the current weekly investment pool income of the scoped country<br>Input Scopes: country<br>Output Scopes: value",
            "je": "Scope to the journal entry of specified key belonging to the country<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: journalentry",
            "legitimacy": "Scope to the current amount of legitimacy in country<br>Input Scopes: country<br>Output Scopes: value",
            "lobby_foreign_anti_clout": "Scope to the total clout of all anti-country foreign policy lobbies targeting a specific country (lobby_foreign_anti_clout:root >= 0.2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "lobby_foreign_pro_clout": "Scope to the total clout of all pro-country foreign policy lobbies targeting a specific country (lobby_foreign_pro_clout:root >= 0.2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "lobby_in_government_foreign_anti_clout": "Scope to the total clout of all anti-country foreign policy lobbies in government targeting a specific country (lobby_in_government_foreign_anti_clout:root >= 0.2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "lobby_in_government_foreign_pro_clout": "Scope to the total clout of all pro-country foreign policy lobbies in government targeting a specific country (lobby_in_government_foreign_pro_clout:root >= 0.2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "lobby_war_opposition": "Scope to the total clout of all lobbies that oppose the scoped war (lobby_war_opposition:root >= 0.2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "lobby_war_support": "Scope to the total clout of all lobbies that support the scoped war (lobby_war_support:root >= 0.2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "market_capital": "Scope to the market capital of a country<br>Input Scopes: country<br>Output Scopes: state",
            "military_expenses": "Get the current military expenses (slaves, wages and goods) of the scoped country<br>Input Scopes: country<br>Output Scopes: value",
            "military_expenses_share": "Get the current share of military expenses (slaves, wages and goods) relative to the total expenses of the scoped country<br>Input Scopes: country<br>Output Scopes: value",
            "navy_size": "Number of flotillas of scope country.<br>navy_size >= 20<br>navy_size > c:FRA.navy_size<br>Input Scopes: country<br>Output Scopes: value",
            "num_active_declared_interests": "Scope to the number of active declared interests a country has<br>num_active_declared_interests > 5<br>Input Scopes: country<br>Output Scopes: value",
            "num_active_interests": "Scope to the number of active interests a country has<br>num_active_interests > 5<br>Input Scopes: country<br>Output Scopes: value",
            "num_active_natural_interests": "Scope to the number of active natural interests a country has<br>num_active_natural_interests > 5<br>Input Scopes: country<br>Output Scopes: value",
            "num_active_plays": "Get the current number of active Diplomatic Plays the scoped country started<br>Input Scopes: country<br>Output Scopes: value",
            "num_admirals": "Scope to the country's number of admirals<br>Input Scopes: country<br>Output Scopes: value",
            "num_alliances": "Scope to the number of alliances target country has in total (example: num_alliances:root >= 2)<br>Input Scopes: country<br>Output Scopes: value",
            "num_alliances_and_defensive_pacts_with_allies": "Scope to the number of alliances target country has with allies of scope country (example: num_alliances_and_defensive_pacts_with_allies:root >= 2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "num_alliances_and_defensive_pacts_with_rivals": "Scope to the number of alliances & defensive pacts target country has with rivals of scope country (example: num_alliances_and_defensive_pacts_with_rivals:root >= 2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "num_characters": "Scope to the country's number of characters<br>Input Scopes: country<br>Output Scopes: value",
            "num_colony_projects": "Get the scoped country's current number of incomplete / in progress colony projects<br>Input Scopes: country<br>Output Scopes: value",
            "num_commanders": "Scope to the country's number of commanders<br>Input Scopes: country<br>Output Scopes: value",
            "num_convoys_available": "Get the scoped country's current number of available convoys<br>Input Scopes: country<br>Output Scopes: value",
            "num_convoys_required": "Get the scoped country's current number of required convoys<br>Input Scopes: country<br>Output Scopes: value",
            "num_declared_interests": "Scope to the number of declared interests a country has (including inactive)<br>num_declared_interests > 5<br>Input Scopes: country<br>Output Scopes: value",
            "num_defensive_pacts": "Scope to the number of defensive pacts target country has in total (example: num_defensive_pacts >= 2)<br>Input Scopes: country<br>Output Scopes: value",
            "num_generals": "Scope to the country's number of generals<br>Input Scopes: country<br>Output Scopes: value",
            "num_income_transfer_pacts": "Scope to the number of income-transfering (to others) actions target country has in total (example: num_income_transfer_pacts >= 2)<br>Input Scopes: country<br>Output Scopes: value",
            "num_incorporated_states": "Get the scoped country's current number of incorporated states<br>Input Scopes: country<br>Output Scopes: value",
            "num_interests": "Scope to the number of interests a country has (including inactive)<br>num_interests > 5<br>Input Scopes: country<br>Output Scopes: value",
            "num_mutual_trade_route_levels_with_country": "Scope to the number of mutual trade route levels the two countries have to each others' owned markets (example: num_mutual_trade_routes_with_country:root >= 2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "num_natural_interests": "Scope to the number of natural interests a country has (including inactive)<br>num_natural_interests > 5<br>Input Scopes: country<br>Output Scopes: value",
            "num_obligations_earned": "Scope from a country to the number of obligations others owe them (=which they have earned)<br>Input Scopes: country<br>Output Scopes: value",
            "num_pending_events": "Scope to the number of pending events of given category in scope country<br>num_pending_events:enactment > 0<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "num_politicians": "Scope to the country's number of politicians<br>Input Scopes: country<br>Output Scopes: value",
            "num_positive_relations": "Get the current number of countries with positive Relation with the scoped country<br>Input Scopes: country<br>Output Scopes: value",
            "num_queued_constructions": "Scope to the number of queued constructions target country has in total (example: num_queued_constructions >= 2)<br>Input Scopes: country<br>Output Scopes: value",
            "num_queued_government_constructions": "Scope to the number of queued government constructions target country has in total (example: num_queued_government_constructions >= 2)<br>Input Scopes: country<br>Output Scopes: value",
            "num_queued_private_constructions": "Scope to the number of queued private constructions target country has in total (example: num_queued_private_constructions >= 2)<br>Input Scopes: country<br>Output Scopes: value",
            "num_rivals": "Scope to the number of rivals target country has in total (example: num_rivals >= 2)<br>Input Scopes: country<br>Output Scopes: value",
            "num_ruling_igs": "Get the scoped country's current number of IGs in government<br>Input Scopes: country<br>Output Scopes: value",
            "num_shared_rivals": "Scope to the number of shared rivals scope country has with target country (example: num_shared_rivals:root >= 2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "num_states": "Get the scoped country's current number of states<br>Input Scopes: country<br>Output Scopes: value",
            "num_trade_routes": "Get the scoped country's current number of trade routes<br>Input Scopes: country<br>Output Scopes: value",
            "num_treaty_ports": "Get the scoped country's current number of treaty ports<br>Input Scopes: country<br>Output Scopes: value",
            "num_unincorporated_states": "Get the scoped country's current number of unincorporated states<br>Input Scopes: country<br>Output Scopes: value",
            "overlord": "Scope to the direct overlord of the country in scope<br>Input Scopes: country<br>Output Scopes: country",
            "power_bloc": "Scope to the power bloc for the scoped country<br>Input Scopes: country<br>Output Scopes: power_bloc",
            "py": "Scope to the active party of specified key belonging to the country<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: party",
            "relations": "Scope to relations between two countries (example: relations:root >= 2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "relations_change_rate": "Scope to daily change in relations progress between two countries (example: relations_change_rate:root > 0)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "ruler": "Scope to the ruler of a country<br>Input Scopes: country<br>Output Scopes: character",
            "technology_being_researched": "Scope to the current technology a country is researching<br>Input Scopes: country<br>Output Scopes: technology",
            "techs_researched": "Scope to the current amount of techs researched of a country<br>Input Scopes: country<br>Output Scopes: value",
            "tension": "Scope to tension between two countries (example: tension:root >= 2)<br>Requires Data: yes<br>Input Scopes: country<br>Output Scopes: value",
            "top_overlord": "Scope to the top overlord of the country in scope<br>Input Scopes: country<br>Output Scopes: country",
            "num_export_trade_routes": "Get the scoped market good's current number of import trade routes owned by a market member<br>Input Scopes: market_goods<br>Output Scopes: value",
            "num_import_trade_routes": "Get the scoped market good's current number of import trade routes owned by a market member<br>Input Scopes: market_goods<br>Output Scopes: value",
            "home_country": "Scopes to the home country of an exile<br>Input Scopes: character, pop<br>Output Scopes: country",
            "owner": "Scope to the owner country of object<br>Input Scopes: country, building, character, new_combat_unit, decree, institution, interest_marker, interest_group, journalentry, law, market, market_goods, military_formation, pop, province, state, trade_route<br>Output Scopes: country",
            "num_mandates": "Scope to the number of available mandates of the scoped power bloc (power_bloc.num_mandates > 0)<br>Input Scopes: power_bloc<br>Output Scopes: value",
            "power_bloc_leader": "Scope to the leader country of the scoped power bloc<br>Input Scopes: power_bloc<br>Output Scopes: country",
            "power_struggle_contender": "Scope to the contender country if there is a power struggle<br>Input Scopes: power_bloc<br>Output Scopes: country",
            "attacker_side": "Scope from a battle to the BattleSide corresponding to the attacker<br>Input Scopes: battle<br>Output Scopes: battle_side",
            "defender_side": "Scope from a battle to the BattleSide corresponding to the defender<br>Input Scopes: battle<br>Output Scopes: battle_side",
            "num_garrison_units": "Returns the number of units garrisoned in a HQ<br>Input Scopes: hq<br>Output Scopes: value",
            "momentum": "Get the scoped party's raw momentum<br>Input Scopes: party<br>Output Scopes: value",
            "combat_width": "Scope to combat width multiplier of scope province<br>Input Scopes: province<br>Output Scopes: value",
            "naval_controller_hq": "Returns the province or state controller navy HQ<br>Input Scopes: province<br>Output Scopes: hq",
            "naval_hq": "Returns the province or state owner local navy HQ<br>Input Scopes: province<br>Output Scopes: hq",
            "civil_war": "Scope to the civil war started by the scoped (revolutionary) political movement.<br>Input Scopes: political_movement<br>Output Scopes: civil_war",
            "desired_law": "Scope to the law the scoped political movement wants to enact/preserve.<br>scope:example_movement = { desired_law = law_type:law_serfdom }<br>Input Scopes: political_movement<br>Output Scopes: law_type",
            "theater": "Scope from a BattleSide or State to its theater<br>Input Scopes: battle_side, state<br>Output Scopes: theater",
            "region_state": "Unknown, add something in code registration<br>Requires Data: yes<br>Input Scopes: state_region<br>Output Scopes: state",
            "state": "Scope to the state of the object<br>Input Scopes: building, market, pop, province<br>Output Scopes: state",
            "num_provinces": "Get the scoped entity's current number of provinces<br>scopes: state, stateregion, front<br>Input Scopes: front, state, state_region<br>Output Scopes: value",
            "building": "Scope to the related building<br>Input Scopes: new_combat_unit<br>Output Scopes: building",
            "commander": "Scope to the related commander<br>Input Scopes: new_combat_unit<br>Output Scopes: character",
            "defense": "Returns the unit's defense rating (including impact from their commander)<br>Input Scopes: new_combat_unit<br>Output Scopes: value",
            "demoralized": "Returns the unit's number of demoralized manpower<br>Input Scopes: new_combat_unit<br>Output Scopes: value",
            "manpower": "Returns the unit's manpower<br>Input Scopes: new_combat_unit<br>Output Scopes: value",
            "mobilization": "Returns the unit's mobilization value between 0 and 1<br>Input Scopes: new_combat_unit<br>Output Scopes: value",
            "morale": "Returns the unit's morale<br>Input Scopes: new_combat_unit<br>Output Scopes: value",
            "offense": "Returns the unit's offense rating (including impact from their commander)<br>Input Scopes: new_combat_unit<br>Output Scopes: value",
            "leader": "Scope to the leader of the interest group<br>Input Scopes: interest_group<br>Output Scopes: character",
            "lobby_join_weight": "Scope to the join weight of an interest group to a particular lobby (lobby_join_weight:root >= 5)<br>Requires Data: yes<br>Input Scopes: interest_group<br>Output Scopes: value",
            "party": "Scope to the party that an IG is supporting<br>Input Scopes: interest_group<br>Output Scopes: party",
            "goal_value": "Scope to the journal entry's goal value<br>Input Scopes: journalentry<br>Output Scopes: value",
            "culture": "Scope to pop's or character's culture<br>Input Scopes: character, new_combat_unit, pop<br>Output Scopes: culture",
            "modifier": "Scope to the value of the modifier type of specified key belonging to the current object<br>Requires Data: yes<br>Input Scopes: country, battle_side, building, character, interest_group, market, power_bloc, state<br>Output Scopes: value, bool",
            "initiator": "Scope to the initiator of the object<br>Input Scopes: diplomatic_play<br>Output Scopes: country",
            "war": "Scope from a diplomatic play to its war<br>Input Scopes: diplomatic_play<br>Output Scopes: war",
            "mg": "Scope from a market to the MarketGoods with the specified key<br>Requires Data: yes<br>Input Scopes: market<br>Output Scopes: market_goods",
            "participants": "Get the total number of participating countries in the scoped market<br>Input Scopes: market<br>Output Scopes: value",
            "trade_center": "Scope to the trade center state of the market!<br>Input Scopes: market<br>Output Scopes: state",
            "training_rate": "Scope to the current maximum weekly training rate of a building<br>Input Scopes: building<br>Output Scopes: value",
            "prosperity": "Scope to the amount of prosperity for scope company (example: prosperity >= 2)<br>Input Scopes: company<br>Output Scopes: value",
            "weekly_prosperity_change": "Scope to the weekly prosperity change for scope company (example: weekly_prosperity_change >= 2)<br>Input Scopes: company<br>Output Scopes: value",
            "investment": "Scope to current investment level in an institution (example: investment < investment_max)<br>Input Scopes: institution<br>Output Scopes: value",
            "investment_max": "Scope to the country's current maximum investment level in an institution (example: investment < investment_max)<br>Input Scopes: institution<br>Output Scopes: value",
            "pop_weight_modifier_scale": "Get the Pop's weight modifier scale multiplier<br>Input Scopes: pop<br>Output Scopes: value",
            "workplace": "Scope to the workplace of a pop<br>Input Scopes: pop<br>Output Scopes: building",
            "ai_state_value": "Scope to target country AI desire to own scope state (example: value = ai_state_value:root)<br>Requires Data: yes<br>Input Scopes: state<br>Output Scopes: value",
            "ai_treaty_port_value": "Scope to target country AI desire to have a treaty port in scope state (example: value = ai_treaty_port_value:root)<br>Requires Data: yes<br>Input Scopes: state<br>Output Scopes: value",
            "b": "Scope to the building of specified key in the state<br>Requires Data: yes<br>Input Scopes: state<br>Output Scopes: building",
            "decree_cost": "Scope to a state's cost for a certain decree<br>authority > decree_cost:decree_road_maintaintenance<br>Requires Data: yes<br>Input Scopes: state<br>Output Scopes: value",
            "mass_migration_culture": "Scope to the mass migration target culture of a state<br>Input Scopes: state<br>Output Scopes: culture",
            "nf": "Scope to a Decree of specified key applied to the state<br>Requires Data: yes<br>Input Scopes: state<br>Output Scopes: decree",
            "population_below_expected_sol": "Scope to the current percentage of the state's population that are below their expected standard of living (0-1)<br>Input Scopes: state<br>Output Scopes: value",
            "sg": "Scope from a state to the StateGoods with the specified key<br>Requires Data: yes<br>Input Scopes: state<br>Output Scopes: state_goods",
            "state_region": "Scope to the state region of a state<br>Input Scopes: state<br>Output Scopes: state_region",
            "target": "Scope to the target of the object<br>Input Scopes: diplomatic_play, diplomatic_catalyst, political_lobby, journalentry",
            "level": "Scope to the level of an object<br>Supported types: trade route, building<br>Input Scopes: building, trade_route<br>Output Scopes: value",
            "religion": "Scope to country or country definition's primary religion or pop religion<br>Input Scopes: country, character, country_definition, pop<br>Output Scopes: religion",
            "average_defense": "Returns the average defense of units on Front on the same side as Country<br>Requires Data: yes<br>Input Scopes: front<br>Output Scopes: value",
            "average_offense": "Returns the average offense of units on Front on the same side as Country<br>Requires Data: yes<br>Input Scopes: front<br>Output Scopes: value",
            "front_length": "Returns the number of provinces in Front<br>Input Scopes: front<br>Output Scopes: value",
            "num_defending_battalions": "Returns the total number of defending units on Front on the same side as Country<br>Requires Data: yes<br>Input Scopes: front<br>Output Scopes: value",
            "num_total_battalions": "Returns the total number of units on Front on the same side as Country<br>Requires Data: yes<br>Input Scopes: front<br>Output Scopes: value",
            "average_expected_sol": "Get the average expected Standard of Living of the scope<br>Input Scopes: country, state<br>Output Scopes: value",
            "average_sol": "Get the average Standard of Living of the scope<br>Input Scopes: country, state<br>Output Scopes: value",
            "gdp": "Get the scoped country's yearly predicted GDP<br>Input Scopes: country, state<br>Output Scopes: value",
            "migration_pull": "Get the migration pull for a state or the mass migration pull for a country.<br>Input Scopes: country, state<br>Output Scopes: value",
            "command_limit_num_units": "Get the baseline number of units from their military formation a commander would normally get, depending on their command limit<br>Input Scopes: character<br>Output Scopes: value",
            "commander_military_formation": "Scope to the Military Formation of a Character.<br>Input Scopes: character<br>Output Scopes: military_formation",
            "interest_group": "Scope to the interest group of the character!<br>Input Scopes: character<br>Output Scopes: interest_group",
            "interest_group_type": "Scope to the type of the scoped character's interest group<br>Input Scopes: character<br>Output Scopes: interest_group_type",
            "num_battalions": "Returns the number of battalions under a commander<br>Input Scopes: character<br>Output Scopes: value",
            "num_mobilized_battalions": "Returns the number of fully mobilized units under a General<br>Input Scopes: character<br>Output Scopes: value",
            "num_units_share": "Share of units a commander has considering his command limit. Example: if the character has 30 Command Limit, the fleet has 60 total Command Limit, and the formation has 50 total flotillas, then the character should get 25 flotillas for their battle)<br>Input Scopes: character<br>Output Scopes: value",
            "opposing_commander": "Scope from a character in battle to the character on the other side of the battle<br>Input Scopes: character<br>Output Scopes: character",
            "popularity": "Get the scoped character's popularity, normally ranging between -100 and +100<br>Input Scopes: character<br>Output Scopes: value",
            "attacker_warleader": "Scope to the attacker warleader of a war<br>Input Scopes: war<br>Output Scopes: country",
            "defender_warleader": "Scope to the defender warleader of a war<br>Input Scopes: war<br>Output Scopes: country",
            "diplomatic_play": "Scope from a war to its diplomatic play<br>Input Scopes: war<br>Output Scopes: diplomatic_play",
            "slaves_role": "Scope from building type to it's slaves role pop type<br>Input Scopes: building_type<br>Output Scopes: pop_type",
            "market": "Scope to the market of the object<br>Input Scopes: country, building, market, market_goods, province, state, state_goods, state_region<br>Output Scopes: market",
            "controller": "Scope to the controller of the object<br>Input Scopes: province, state<br>Output Scopes: country",
            "land_controller_hq": "Returns the province or state controller land HQ<br>Input Scopes: province, state<br>Output Scopes: hq",
            "land_hq": "Returns the province or state owner local land HQ<br>Input Scopes: province, state<br>Output Scopes: hq",
            "naval_invasion_attacker": "If used in a naval invasion scope, scope to the country executing the naval invasion.<br>Input Scopes: naval_invasion<br>Output Scopes: country",
            "naval_invasion_defender": "If used in a naval invasion scope, scope to the country the attacked state is controlled by.<br>Input Scopes: naval_invasion<br>Output Scopes: country",
            "num_units": "Get the current of units for a commander or military formation<br>Input Scopes: character, military_formation<br>Output Scopes: value",
            "diplomatic_pact_other_country": "Scope to the other country of the diplomatic pact in scope<br>Requires Data: yes<br>Input Scopes: diplomatic_pact<br>Output Scopes: country",
            "first_country": "Scope to the first country of the diplomatic pact in scope<br>Input Scopes: diplomatic_pact<br>Output Scopes: country",
            "second_country": "Scope to the second country of the diplomatic pact in scope<br>Input Scopes: diplomatic_pact<br>Output Scopes: country",
            "political_movement": "If used in a character scope, scope to the political movement that character supports.<br>If used in a revolution civil war scope, scope to the movement that started the revolution.<br>Input Scopes: character, civil_war<br>Output Scopes: political_movement",
            "battle": "Scope from a battle side to the battle itself<br>Input Scopes: battle_side<br>Output Scopes: battle",
            "opposite_battle_side": "Scope from a battle side to its opposite<br>Input Scopes: battle_side<br>Output Scopes: battle_side",
            "province": "Scope from a battle side to the province in which the battle is being fought<br>Input Scopes: battle_side<br>Output Scopes: province",
            "currently_active_law_in_group": "Scope from a law to the currently active law in that group<br>Input Scopes: law<br>Output Scopes: law",
            "region": "Scope to the strategic region of the object!<br>Input Scopes: building, diplomatic_play, hq, interest_marker, province, state, state_region<br>Output Scopes: strategic_region",
            "type": "Scope from an object to its type<br>Input Scopes: building, company, diplomatic_play, diplomatic_catalyst, political_lobby, institution, interest_group, law<br>Output Scopes: building_type, company_type, diplomatic_play_type, institution_type, interest_group_type, law_type",
            "player_owed_obligation_days_left": "Scope to number of days left on an obligation in diplomatic relations scope (example: obligation_days_left >= 2)<br>Input Scopes: diplomatic_relations<br>Output Scopes: value",
            "scope_relations": "Scope to relations value in diplomatic relations scope (example: scope_relations >= 2)<br>Input Scopes: diplomatic_relations<br>Output Scopes: value",
            "scope_tension": "Scope to tension value in diplomatic relations scope (example: scope_tension >= 2)<br>Input Scopes: diplomatic_relations<br>Output Scopes: value",
            "imposer_of_law": "Scope from a country to the country currrently imposing a law on them<br>Input Scopes: country, law<br>Output Scopes: country",
            "country": "If used in a military formation scope, scope to the country the formation belongs to.<br>Input Scopes: military_formation<br>Output Scopes: country",
            "current_hq": "Returns the current HQ of the scoped military formation (may not be valid if the formation is not currently stationed in an HQ)<br>Input Scopes: military_formation<br>Output Scopes: hq",
            "highest_ranked_commander": "Scope from a military formation to its highest ranking commander character<br>Input Scopes: military_formation<br>Output Scopes: character",
            "home_hq": "Returns the home HQ of the scoped military formation<br>Input Scopes: military_formation<br>Output Scopes: hq",
            "num_commanderless_units": "Number of units in a MilitaryFormation which currently don't have a commander due to commanders Command Limit. Obs: defeated commanders do not command units, i.e., the more defeated commanders, the more commanderless units.<br>Input Scopes: military_formation<br>Output Scopes: value",
            "goods": "Scope to the goods traded by a trade route<br>Input Scopes: market_goods, state_goods, trade_route<br>Output Scopes: goods<br>",
        }

    @property
    def game_modifiers(self):
        return {
            "battle_casualties_mult": "A bonus or penalty to the number of Casualties this side takes in Battle",
            "battle_combat_width_mult": "A bonus or penalty to the Combat Width for this side of the Battle",
            "battle_defense_owned_province_mult": "Alters the Defense of a Military Unit fighting in territory owned by its Country",
            "battle_offense_owned_province_mult": "Alters the Offense of a Military Unit fighting in territory owned by its Country",
            "building_cash_reserves_mult": "A bonus or penalty to the maximum Cash Reserves that Buildings can retain.",
            "building_economy_of_scale_level_cap_add": "The maximum number of Building levels that can confer Economy of Scale effects.",
            "building_goods_input_mult": "An adjustment to the amount of Goods Consumed by a Building.",
            "building_level_bureaucracy_cost_add": "Increasing amount of Bureaucracy spent per goverment owned building level",
            "building_minimum_wage_mult": "Employers must pay this fraction of the standard Normal Wage or higher to their employees",
            "building_mobilization_cost_mult": "Additional input Goods demand by Mobilized Battalions",
            "building_nationalization_cost_mult": "An increase or decrease in the compensation paid to the owning Pops when a Building is Nationalized",
            "building_nationalization_investment_return_add": "An increase or decrease to the portion of Nationalization compensation which is returned to the Investment Pool when Nationalizing Buildings owned by Pops.",
            "building_nationalization_radicals_mult": "An increase or decrease in the amount of Individuals that will become Radical when a Building is Nationalized",
            "building_subsistence_output_add": "An increase or decrease to the Subsistence Output of Peasants in the Building.",
            "building_subsistence_output_mult": "An increase or decrease to the Subsistence Output of Peasants in the Building.",
            "building_throughput_add": "A bonus or penalty to the building's throughput.",
            "building_training_rate_add": "How much Manpower can be trained per week",
            "building_training_rate_mult": "How much Manpower can be trained per week",
            "building_unincorporated_subsistence_output_mult": "An increase or decrease to the Subsistence Output of Peasants in Unincorporated States",
            "building_unincorporated_throughput_add": "A bonus or penalty to the Throughput of buildings in Unincorporated States",
            "building_working_conditions_mult": "An increase or decrease in workplace hazard levels",
            "character_advancement_speed_add": "A bonus or penalty to how quickly a General accumulates Advancement Progress",
            "character_battle_condition_aggressive_maneuver_mult": "Chance of being affected by the Aggressive Maneuver Battle Condition",
            "character_battle_condition_blunder_mult": "Chance of being affected by the Blunder Battle Condition",
            "character_battle_condition_broken_supply_line_mult": "Chance of being affected by the Broken Supply Line Battle Condition",
            "character_battle_condition_camouflaged_mult": "Chance of being affected by the Camouflaged Battle Condition",
            "character_battle_condition_careful_maneuver_mult": "Chance of being affected by the Careful Maneuver Battle Condition",
            "character_battle_condition_charted_terrain_mult": "Chance of being affected by the Charted Terrain Battle Condition",
            "character_battle_condition_death_from_below_mult": "Chance of being affected by the Death from Below Battle Condition",
            "character_battle_condition_dug_in_mult": "Chance of being affected by the Dug In Battle Condition",
            "character_battle_condition_exhausted_mult": "Chance of being affected by the Exhausted Battle Condition",
            "character_battle_condition_good_visibility_mult": "Chance of being affected by the Good Visibility Battle Condition",
            "character_battle_condition_logistics_secured_mult": "Chance of being affected by the Logistics Secured Battle Condition",
            "character_battle_condition_lost_mult": "Chance of being affected by the Lost Battle Condition",
            "character_battle_condition_mud_mult": "Chance of being affected by the Mud Battle Condition",
            "character_battle_condition_poor_visibility_mult": "Chance of being affected by the Poor Visibility Battle Condition",
            "character_battle_condition_ramming_maneuver_mult": "Chance of being affected by the Ramming Maneuver Battle Condition",
            "character_battle_condition_rapid_advance_mult": "Chance of being affected by the Rapid Advance Battle Condition",
            "character_battle_condition_rough_waters_mult": "Chance of being affected by the Rough Waters Battle Condition",
            "character_battle_condition_strong_winds_mult": "Chance of being affected by the Strong Winds Battle Condition",
            "character_battle_condition_surprise_maneuver_mult": "Chance of being affected by the Surprise Maneuver Battle Condition",
            "character_command_limit_mult": "Multiplies the amount of units this Character can command.",
            "character_convoy_protection_mult": "A bonus or penalty to how effectively a Admiral protects Convoys",
            "character_convoy_raiding_mult": "A bonus or penalty to a Admiral efficiency of raiding Convoys",
            "character_expedition_events_explorer_mult": "The chance that more good things than bad will happen on Expeditions this character leads",
            "character_health_add": "A character's health and longevity.",
            "character_interception_add": "The chance the Admiral’s Fleet has at intercepting Fleets every quarter of a day",
            "character_morale_cap_add": "A bonus or penalty to max unit morale.",
            "character_popularity_add": "How popular this character is with its constituents.",
            "character_supply_route_cost_mult": "How many convoys are needed to supply troops",
            "country_agitator_slots_add": "An increase or decrease to the number of potential Agitators a Country can maintain within its borders",
            "country_ahead_of_time_research_penalty_mult": "An increase or decrease to the research penalty from unresearched Technologies from previous Eras",
            "country_all_buildings_protected_bool": "Whether all Buildings are legally protected from being downsized",
            "country_allow_enacting_decrees_in_subject_bool": "Allows Overlords enact Decrees on their Subject States",
            "country_allow_multiple_alliances_bool": "Whether the country is allowed to form multiple Alliance Diplomatic Pacts",
            "country_allow_trade_routes_without_interest_bool": "Allows a country to establish Trade Routes towards targets that would normally be unavailable due to the lack of a Interest on the receiving end",
            "country_authority_add": "How much  Authority is gained or the country has",
            "country_authority_mult": "The amount of  Authority is modified up or down",
            "country_authority_per_subject_add": "The amount of  Authority which is scaled by the number of Subjects",
            "country_bolster_cost_mult": "An increase or decrease to the cost of Bolstering an Interest Group.",
            "country_bolster_ig_attraction_mult": "A bonus or penalty to how Attracted Pops are to an Interest Group as a result of being Bolstered",
            "country_bureaucracy_add": "How much  Bureaucracy the country has",
            "country_bureaucracy_investment_cost_factor_mult": "An increase or reduction to the Bureaucracy cost of bringing a Institution Investment to the citizens",
            "country_bureaucracy_mult": "The amount of  Bureaucracy is modified up or down",
            "country_can_form_construction_company_bool": "Can form Construction type Companies",
            "country_cannot_be_target_for_law_imposition_bool": "Country cannot be targeted for new Law Imposition attempts while this is in effect",
            "country_cannot_cancel_law_enactment_bool": "A penalty preventing a country from cancelling the enactment of any Laws currently in progress",
            "country_cannot_enact_laws_bool": "A penalty preventing a country from enacting any Laws",
            "country_cannot_start_law_enactment_bool": "A penalty preventing a country from starting to enact any new Laws",
            "country_company_construction_efficiency_bonus_add": "An increase or decrease to the weekly Construction progress added by Companies to their associated Buildings",
            "country_company_throughput_bonus_add": "An increase or decrease to the Throughput added by Companies to their associated Buildings",
            "country_construction_add": "The amount of Construction produced by a Construction Sector",
            "country_construction_goods_cost_mult": "A bonus or penalty to the monetary cost of construction material necessities.",
            "country_consumption_tax_cost_mult": "A bonus or penalty to the Authority cost of Consumption Taxes",
            "country_convoy_contribution_to_market_owner_add": "The percentage of  Convoys a member of a Customs Union must contribute to the Market Owner",
            "country_convoys_capacity_add": "Convoys are produced by Port Buildings and are required to operate Shipping Lanes.",
            "country_convoys_capacity_mult": "Convoys are produced by Port Buildings and are required to operate Shipping Lanes.",
            "country_damage_relations_speed_mult": "A bonus or penalty to the efficiency of the Damage Relations diplomatic action.",
            "country_diplomatic_play_maneuvers_add": "A bonus or penalty to the number of Maneuvers the country can take in a diplomatic play.",
            "country_disable_investment_pool_bool": "Disallow all reinvestment into and usage of the Investment Pool",
            "country_disable_nationalization_bool": "Prevent Buildings from being Nationalized",
            "country_disable_nationalization_without_compensation_bool": "Prevent Buildings from being Nationalized without compensation being paid to the owning Pops",
            "country_disable_privatization_bool": "Disallow any Privatization",
            "country_disallow_aggressive_plays_bool": "Not allowed to start Diplomatic Plays against other Countries",
            "country_disallow_agitator_invites_bool": "This country does not permit the invitation of Exiles",
            "country_disallow_discriminated_migration_bool": "This country does not permit its Discriminated Pops to Migrate",
            "country_disallow_migration_bool": "This country does not permit any of its Pops to Migrate",
            "country_expedition_events_explorer_mult": "The chance that more good things than bad will happen on Expeditions this country undertakes",
            "country_expenses_add": "A flat increase or reduction of government expenses",
            "country_force_collectivization_bool": "Force all available Buildings to become worker-owned",
            "country_force_privatization_bool": "Force all available Buildings to be available for Privatization",
            "country_free_trade_routes_add": "An increase or decrease to the number of Trade Routes a Country can support with countries they do not have a Trade Agreement with before incurring a Bureaucracy cost.",
            "country_gold_reserve_limit_mult": "Once your Gold Reserves exceed this limit, the amount of gold you get to stockpile for every diminishes progressively",
            "country_government_buildings_protected_bool": "Whether government owned Buildings are legally protected from being downsized",
            "country_government_dividends_efficiency_add": "An increase or decrease to the amount of Dividends (after reinvestment) from Nationally Owned Building levels that are converted into Government Dividends and paid into the Treasury",
            "country_government_dividends_reinvestment_add": "An increase or decrease to the fraction of Dividends from Nationally Owned Building levels that is paid into the Investment Pool instead of being converted into Government Dividends",
            "country_government_dividends_waste_add": "An increase or decrease to the amount of Government Dividends that are wasted instead of being paid into the Treasury",
            "country_government_wages_mult": "How much more or less than the Normal Wage government employees get paid.",
            "country_higher_diplomatic_acceptance_same_religion_bool": "Countries with the same state Religion will be more willing to accept diplomatic proposals",
            "country_higher_leverage_from_economic_dependence_bool": "Increased Leverage gain from Economic Dependence.",
            "country_ignores_landing_craft_penalty_bool": "Ignores the offensive penalty to winning the landing battle during a naval invasion",
            "country_improve_relations_speed_mult": "A bonus or penalty to the efficiency of the Improve Relations diplomatic action.",
            "country_infamy_decay_mult": "A bonus or penalty to Infamy decay",
            "country_infamy_generation_against_unrecognized_mult": "An increase or decrease in the amount of Infamy generated byDiplomatic Incidents targeting Unrecognized Powers.",
            "country_infamy_generation_mult": "An increase or decrease in the amount of Infamy generated byDiplomatic Incidents.",
            "country_influence_add": "How much  Influence the country has",
            "country_influence_mult": "The amount of  Influence is modified up or down",
            "country_initiator_war_goal_maneuver_cost_mult": "An increase or decrease to the War Goal Maneuver cost for the Diplomatic Play Initiator",
            "country_institution_size_change_speed_mult": "How fast you change the size of an institution",
            "country_join_power_bloc_member_in_defensive_plays_bool": "Can call Power Bloc members with the Call Ally Sway in defensive Diplomatic Plays",
            "country_join_power_bloc_member_in_plays_bool": "Can call Power Bloc members with the Call Ally Sway in all Diplomatic Plays",
            "country_law_enactment_imposition_success_add": "A flat percentage point increase to the likelihood of enacting a law imposed on the country",
            "country_law_enactment_max_setbacks_add": "A bonus or penalty to the amount of Enactment Setbacks that can be suffered before Law enactment fails.",
            "country_law_enactment_stall_mult": "A multiplier to the chance that a law enactment will stall due to opposition",
            "country_law_enactment_success_add": "A flat percentage point increase to the likelihood of enacting a law",
            "country_law_enactment_time_mult": "A reduction or increase to the time required for legislative enactments",
            "country_leader_has_law_enactment_success_mult": "Increases or decreases the Enactment Success for Laws the Power Bloc Leader already has enacted.",
            "country_legitimacy_base_add": "An increase or decrease of the Government's Legitimacy",
            "country_legitimacy_govt_leader_clout_add": "The amount of Legitimacy the Government gains or loses based on the Clout of the Interest Group leading the government.",
            "country_legitimacy_govt_size_add": "The number of Parties and Interest Groups that can be included In Government at one time without incurring Legitimacy penalties.",
            "country_legitimacy_govt_total_clout_add": "The amount of Legitimacy the Government gains or loses based on the total Clout of Interest Groups in the government.",
            "country_legitimacy_govt_total_votes_add": "The amount of Legitimacy the Government gains or loses based on the total percentage of Votes of Parties in the government.",
            "country_legitimacy_headofstate_add": "The amount of Legitimacy the Government gains or loses by including the Head of State's Interest Group.",
            "country_legitimacy_ideological_incoherence_mult": "A multiplier to how much Legitimacy is lost due to Ideological Incompatibility",
            "country_legitimacy_min_add": "The lowest Legitimacy value a Government can have",
            "country_leverage_generation_add": "An increase or decrease to the amount of Leverage the Country’s Power Bloc generates in other Countries while they are the Power Bloc Leader",
            "country_leverage_generation_mult": "An increase or decrease to the amount of Leverage the Country’s Power Bloc generates in other Countries while they are the Power Bloc Leader",
            "country_leverage_resistance_add": "An increase or decrease to the amount of Leverage the Country always retains over itself, setting the bar higher for any Power Blocs that wish to invite them",
            "country_leverage_resistance_mult": "An increase or decrease to the amount of Leverage the Country always retains over itself, setting the bar higher for any Power Blocs that wish to invite them",
            "country_leverage_resistance_per_population_add": "An increase or decrease to the Leverage Resistance a Country gains from every 1.00M Individuals residing there",
            "country_liberty_desire_add": "An increase or decrease to the amount of Liberty Desire the subject gains each week",
            "country_liberty_desire_decrease_mult": "Modifies the amount Liberty Desire decreases by, if it is decreasing",
            "country_liberty_desire_increase_mult": "Modifies the amount Liberty Desire increases by, if it is increasing",
            "country_liberty_desire_of_subjects_add": "An increase or decrease to the amount of Liberty Desire all Subjects of the Overlord gain each week",
            "country_loan_interest_rate_add": "A bonus or penalty to loan interest rate",
            "country_loan_interest_rate_mult": "A bonus or penalty to loan interest rate",
            "country_lobby_leverage_generation_mult": "An increase or decrease to the amount of Leverage generation from Political Lobbies aligned in favor of the Power Bloc Leader",
            "country_loyalists_from_legitimacy_mult": "A change to the number of Loyalists a Country gains from having high Legitimacy",
            "country_mass_migration_attraction_mult": "A bonus or penalty to the chance for a Country to be selected as the target of a mass migration.",
            "country_max_companies_add": "The number of Companies a Country can establish",
            "country_max_declared_interests_add": "An increase or decrease to the number of Interests that a country can declare outside of its controlled territory",
            "country_max_declared_interests_mult": "An increase or decrease to the number of Interests that a country can declare outside of its controlled territory",
            "country_max_weekly_construction_progress_add": "The maximum amount of  Construction that a project can progress in a single week.",
            "country_military_goods_cost_mult": "A bonus or penalty to the monetary cost of military material necessities.",
            "country_military_wages_mult": "How much more or less than the Normal Wage military personnel get paid.",
            "country_minting_add": "A flat increase or decrease to Minting",
            "country_minting_mult": "A bonus or penalty to the total amount of Minting",
            "country_must_have_movement_to_enact_laws_bool": "A penalty preventing a country from enacting any Laws that do not have the support of a Political Movement",
            "country_nationalization_cost_non_members_mult": "Increases or decreases the cost of Nationalization of buildings owned by a Country outside of your Power Bloc",
            "country_opposition_ig_approval_add": "A bonus or penalty to the Approval of Interest Groups in Opposition",
            "country_overlord_income_transfer_mult": "An increase or decrease to the amount of Money the subject must give to their overlord",
            "country_pact_leverage_generation_add": "An increase or decrease to the amount of Leverage generated between two Countries with this Diplomatic Pact when the dominant Country in the Diplomatic Pact is a Power Bloc Leader",
            "country_pact_leverage_generation_mult": "An increase or decrease to the amount of Leverage generated between two Countries with this Diplomatic Pact when the dominant Country in the Diplomatic Pact is a Power Bloc Leader",
            "country_party_whip_impact_mult": "A bonus or penalty to the effect that Party Whip has on the Ideological opinion of the rest of the Party members",
            "country_port_connection_cost_mult": "An increase or decrease to the number of  Convoys required to maintain Port Connections",
            "country_prestige_add": "How much Prestige the country has.",
            "country_prestige_from_army_power_projection_mult": "An increase or decrease to the amount of Prestige a Country receives from the Power Projection of its army.",
            "country_prestige_from_navy_power_projection_mult": "An increase or decrease to the amount of Prestige a Country receives from the Power Projection of its navy.",
            "country_prestige_mult": "How much Prestige the country has.",
            "country_private_construction_allocation_mult": "An increase or decrease in the fraction of weekly Construction that will be preferentially allocated to Private Constructions over Government Constructions .",
            "country_radicals_from_conquest_mult": "A bonus or penalty to the amount of Pops that will become Radical when we conquer States militarily",
            "country_radicals_from_legitimacy_mult": "A change to the number of Radicals a Country gains from having low Legitimacy",
            "country_reduced_liberty_desire_same_religion_bool": "Subjects with the same state Religion will have reduced Liberty Desire over time",
            "country_revolution_clock_time_add": "A bonus or penalty to how fast the revolution clock ticks",
            "country_revolution_progress_add": "A bonus or penalty to how much progress is added to the revolution when the Revolution Clock strikes 12",
            "country_revolution_progress_mult": "A bonus or penalty to how much progress is added to the revolution when the Revolution Clock strikes 12",
            "country_secession_clock_time_add": "A bonus or penalty to how fast the secession clock ticks",
            "country_secession_progress_add": "A bonus or penalty to how much progress is added to the secession when the Secession Clock strikes 12",
            "country_secession_progress_mult": "A bonus or penalty to how much progress is added to the secession when the Secession Clock strikes 12",
            "country_subject_income_transfer_heathen_mult": "An increase or decrease to the amount of Money Subjects must give to their Overlord if they don't follow the same State Religion as them.",
            "country_subject_income_transfer_mult": "An increase or decrease to the amount of Money the subject must give to their overlord",
            "country_suppression_cost_mult": "An increase or decrease to the cost of Suppressing an Interest Group.",
            "country_suppression_ig_attraction_mult": "A bonus or penalty to how Attracted Pops are to an Interest Group as a result of Suppression",
            "country_tax_income_add": "A flat bonus or penalty to tax income collected",
            "country_tech_group_research_speed_mult": "A bonus or penalty to the research speed which scales with the number of countries that have already researched the current Technology",
            "country_tech_research_speed_mult": "A bonus or penalty to the speed at which Technology is researched when spending Innovation",
            "country_tech_spread_add": "The amount by which technologies spread from other countries to our own each week.",
            "country_tech_spread_mult": "A multiplier to the speed at which technologies spread from other countries to our own.",
            "country_tension_decay_mult": "A bonus or penalty to Tension decay",
            "country_trade_route_competitiveness_mult": "An increase or decrease in the Trade Route Competitiveness of Trade Routes",
            "country_trade_route_cost_mult": "An increase or decrease in the Bureaucracy cost for each Trade Route",
            "country_trade_route_quantity_mult": "An increase or decrease in the amount of goods imported or exported for each Trade Route level",
            "country_voting_power_base_add": "An increase or decrease to amount of Political Strength gained from each vote in Elections",
            "country_voting_power_from_literacy_add": "An increase or decrease to amount of Political Strength gained from each vote in Elections, modified by the Literacy of the voting Pop",
            "country_voting_power_wealth_threshold_add": "An increase or decrease to the Wealth threshold at which Pops are eligible to vote",
            "country_war_exhaustion_casualties_mult": "An increase or decrease to the amount of War Exhaustion a Country suffers in War due to Casualties inflicted on them",
            "country_weekly_innovation_add": "The amount of  Innovation gained or lost each week",
            "country_weekly_innovation_max_add": "The maximum amount of  Innovation that can be invested into a Technology each week",
            "country_weekly_innovation_mult": "The amount of  Innovation gained or lost each week",
            "dummy_modifier_type": "modifier_dummy_modifier_type",
            "goods_output_radio_mult": "A bonus or penalty to the amount of Radio produced by buildings",
            "interest_group_approval_add": "A bonus or penalty to the Approval of an Interest Group",
            "interest_group_in_government_approval_add": "A bonus or penalty to the Approval of an Interest Group that is in government.",
            "interest_group_in_government_attraction_mult": "Impacts the Attraction of Interest Groups if In Government",
            "interest_group_in_opposition_agitator_popularity_add": "An increase or decrease to Popularity of Agitators belonging to an Interest Group In Opposition",
            "interest_group_in_opposition_approval_add": "A bonus or penalty to the Approval of an Interest Group that is in opposition.",
            "interest_group_pol_str_factor": "A bonus or penalty to the total Political Strength of an Interest Group",
            "interest_group_pol_str_mult": "A bonus or penalty to the total Political Strength of an Interest Group",
            "interest_group_pop_attraction_mult": "A bonus or penalty to how attracted Pops are to an Interest Group",
            "market_disallow_trade_routes_bool": "Disallow all import and export of goods in the market",
            "market_land_trade_capacity_add": "An increase or decrease to the Land Trade Capacity of a Market.",
            "market_max_exports_add": "An increase or decrease to the amount of goods that can be exported from your Market.",
            "market_max_imports_add": "An increase or decrease to the amount of goods that can be imported by your Market.",
            "military_formation_attrition_risk_add": "The chance of casualties among the units not involved in active battles",
            "military_formation_attrition_risk_mult": "The chance of casualties among the units not involved in active battles",
            "military_formation_mobilization_speed_add": "How quickly a Formation can Mobilize its units",
            "military_formation_mobilization_speed_mult": "How quickly a Formation can Mobilize its units",
            "military_formation_movement_speed_add": "How quickly a Formation can travel to reach a new destination",
            "military_formation_movement_speed_mult": "How quickly a Formation can travel to reach a new destination",
            "political_movement_enact_support_mult": "An increase or decrease in Political Movement Support for Movement to Enact Law",
            "political_movement_preserve_support_mult": "An increase or decrease in Political Movement Support for Movement to Preserve Law",
            "political_movement_radicalism_add": "An increase or decrease in Political Movement Radicalism",
            "political_movement_radicalism_mult": "An increase or decrease in Political Movement Radicalism",
            "political_movement_restore_support_mult": "An increase or decrease in Political Movement Support for Movement to Restore Law",
            "political_movement_support_add": "An increase or decrease in Political Movement Support",
            "political_movement_support_mult": "An increase or decrease in Political Movement Support",
            "power_bloc_allow_foreign_investment_lower_rank_bool": "Countries within the same Power Bloc have Foreign Investment Rights in Power Bloc Member with lower Rank",
            "power_bloc_allow_wider_migration_area_bool": "Allows Migration to potentially also happen between members of a Power Bloc that don't share a Market, rather than only within a Country’s Market",
            "power_bloc_cohesion_add": "An increase or decrease to the Cohesion of a Power Bloc",
            "power_bloc_cohesion_mult": "An increase or decrease to the Cohesion of a Power Bloc",
            "power_bloc_cohesion_per_member_add": "An increase or decrease to the Cohesion of a Power Bloc for every Power Bloc Member it has other than the Power Bloc Leader",
            "power_bloc_customs_union_bool": "All members of the Power Bloc become part of the same Customs Union permanently",
            "power_bloc_disallow_embargo_bool": "Cannot place Embargo on another Power Bloc member",
            "power_bloc_disallow_war_bool": "Cannot start or join wars amongst Power Bloc members",
            "power_bloc_income_transfer_to_leader_factor": "Base percentage of tax income transferred from concept_power_bloc_memembers to the Power Bloc Leader",
            "power_bloc_invite_acceptance_great_power_add": "A bonus or penalty to the acceptance chance of a Power Bloc invitation",
            "power_bloc_invite_acceptance_major_power_add": "A bonus or penalty to the acceptance chance of a Power Bloc invitation",
            "power_bloc_invite_acceptance_minor_power_add": "A bonus or penalty to the acceptance chance of a Power Bloc invitation",
            "power_bloc_invite_acceptance_unrecognized_major_power_add": "A bonus or penalty to the acceptance chance of a Power Bloc invitation",
            "power_bloc_invite_acceptance_unrecognized_regional_power_add": "A bonus or penalty to the acceptance chance of a Power Bloc invitation",
            "power_bloc_leader_can_add_wargoal_bool": "The Power Bloc Leader may add a War Goal of their own even when voluntarily supporting another Power Bloc Member",
            "power_bloc_leader_can_force_state_religion_bool": "The Power Bloc Leader may impose a change of State Religion on a Power Bloc Member whose faith differs from their own",
            "power_bloc_leader_can_make_subjects_bool": "The Power Bloc Leader can use a Bloc Member Action to turn independent Power Bloc Members into Subjects",
            "power_bloc_leader_can_regime_change_bool": "The Power Bloc Leader may execute a Regime Change on a Power Bloc Member that deviates from their ideology",
            "power_bloc_leverage_generation_mult": "An increase or decrease to the Leverage a Power Bloc generates on all Countries.",
            "power_bloc_mandate_progress_mult": "An increase or decrease to the weekly Mandate progress for a Power Bloc.",
            "power_bloc_mandate_progress_per_great_power_member_add": "Determines the amount of Mandate Progress gained by a Power Bloc for each of its members that are of Rank Great Power",
            "power_bloc_mandate_progress_per_great_power_member_mult": "Determines the amount of Mandate Progress gained by a Power Bloc for each of its members that are of Rank Great Power",
            "power_bloc_mandate_progress_per_major_power_member_add": "Determines the amount of Mandate Progress gained by a Power Bloc for each of its members that are of Rank Major Power",
            "power_bloc_mandate_progress_per_major_power_member_mult": "Determines the amount of Mandate Progress gained by a Power Bloc for each of its members that are of Rank Major Power",
            "power_bloc_mandate_progress_per_minor_power_member_add": "Determines the amount of Mandate Progress gained by a Power Bloc for each of its members that are of Rank Minor Power",
            "power_bloc_mandate_progress_per_minor_power_member_mult": "Determines the amount of Mandate Progress gained by a Power Bloc for each of its members that are of Rank Minor Power",
            "power_bloc_religion_trade_route_competitiveness_mult": "An increase or decrease in the Trade Route Competitiveness of Trade Routes owned by Bloc Members targeting a Country that shares the Religion of the Power Bloc Leader.",
            "power_bloc_target_sway_cost_mult": "An increase or decrease to the Sway Maneuver cost for the Diplomatic Play Target",
            "power_bloc_trade_route_cost_mult": "Trade Route  Bureaucracy Cost with another Power Bloc member",
            "state_accepted_birth_rate_mult": "How many children of non-discriminated pops are born each year",
            "state_assimilation_mult": "A bonus or penalty to Assimilation",
            "state_birth_rate_mult": "How many children are born each year",
            "state_bureaucracy_population_base_cost_factor_mult": "An increase or reduction to the base administrative cost incurred by your incorporated Population",
            "state_colony_growth_creation_mult": "The amount of colonial growth generated by Pops in Incorporated States.",
            "state_colony_growth_speed_mult": "A bonus or penalty to the final speed of colonial growth in a Colony.",
            "state_conscription_rate_add": "The portion of the Workforce that are Potential Conscripts",
            "state_conscription_rate_mult": "A bonus or penalty to the number of Potential Conscripts from Conscription Rate",
            "state_construction_mult": "A bonus or penalty to the weekly Construction progress in a State",
            "state_conversion_mult": "A bonus or penalty to Conversion",
            "state_decree_cost_mult": "A bonus or penalty to the Authority cost of Decrees",
            "state_dependent_political_participation_add": "The fraction of Dependents that can join Interest Groups and vote.",
            "state_dependent_wage_add": "An increase or decrease in Dependents Income",
            "state_dependent_wage_mult": "An increase or decrease in Dependents Income",
            "state_disallow_incorporation_bool": "Cannot Incorporate State due to a modifier",
            "state_education_access_add": "A bonus or penalty to education access for all pops",
            "state_education_access_wealth_add": "A bonus or penalty per Wealth level to pop education access",
            "state_expected_sol_from_literacy": "An increase or decrease to the minimum Standard of Living Pops expect to enjoy, scaled by their Literacy",
            "state_expected_sol_mult": "An increase or decrease to the minimum Standard of Living Pops expect to enjoy",
            "state_infrastructure_add": "A bonus or penalty to the State’s Infrastructure",
            "state_infrastructure_from_population_add": "The amount of State Infrastructure added for each 100K Pops that live there",
            "state_infrastructure_from_population_max_add": "The max amount of Infrastructure that a State can receive from Pops that live there",
            "state_infrastructure_from_population_max_mult": "The max amount of Infrastructure that a State can receive from Pops that live there",
            "state_infrastructure_from_population_mult": "The amount of State Infrastructure added for each 100K Pops that live there",
            "state_infrastructure_mult": "A bonus or penalty to the State’s Infrastructure",
            "state_loyalists_from_sol_change_accepted_culture_mult": "An increase or decrease to how many Pops of Accepted Cultures will become Loyalist from increases in Standard of Living",
            "state_loyalists_from_sol_change_accepted_religion_mult": "An increase or decrease to how many Pops of Accepted Religions will become Loyalist from increases in Standard of Living",
            "state_loyalists_from_sol_change_mult": "A bonus or penalty to how many Pops will become Loyalist from increases in Standard of Living",
            "state_market_access_price_impact": "An increase or decrease to the maximum influence of Market Access on the Local Price of a Good.",
            "state_middle_expected_sol": "An increase or decrease to the minimum Standard of Living that Middle Strata Pops expect to enjoy",
            "state_middle_standard_of_living_add": "Extra Standard of Living added on top of Wealth",
            "state_migration_pull_add": "A bonus or penalty to the state's ability to attract immigrants within its Market.",
            "state_migration_pull_mult": "A bonus or penalty to the state's ability to attract immigrants within its Market.",
            "state_migration_pull_unincorporated_mult": "A bonus or penalty to the urge to migrate to Unincorporated States",
            "state_migration_push_mult": "A bonus or penalty to the Pops in the state's desire to emigrate.",
            "state_migration_quota_mult": "A bonus or penalty to the amount of people that emigrate from or immigrate to a State",
            "state_minimum_wealth_add": "Pop Wealth cannot drop below this level through normal means",
            "state_mortality_mult": "An increase or decrease to the Mortality for all Pops",
            "state_mortality_turmoil_mult": "An increase or decrease to pop Mortality per Turmoil",
            "state_mortality_wealth_mult": "An increase or decrease to pop Mortality per Wealth",
            "state_non_homeland_colony_growth_speed_mult": "A bonus or penalty to the final speed of colonial growth in Colonies that are not the Homeland of any of your Primary Cultures.",
            "state_non_homeland_mortality_mult": "An increase or decrease to the Mortality for Pops in States that are not the Homeland of any of your Primary Cultures.",
            "state_political_strength_from_discrimination_mult": "An increase or decrease to the amount of Political Strength of Pops from Discrimination",
            "state_political_strength_from_wealth_mult": "An increase or decrease to the amount of Political Strength of Pops from Wealth",
            "state_political_strength_from_welfare_mult": "An increase or decrease to the amount of Political Strength of Pops that are receiving Welfare Payments",
            "state_pollution_generation_add": "An increase or decrease to how much pollution is generated in a state",
            "state_pollution_reduction_health_mult": "An increase of decrease to the effects of Pollution Impact on the health of your population",
            "state_poor_expected_sol": "An increase or decrease to the minimum Standard of Living that Lower Strata Pops expect to enjoy",
            "state_poor_standard_of_living_add": "Extra Standard of Living added on top of Wealth",
            "state_pop_pol_str_add": "A bonus or penalty to the total Political Strength of all Pops",
            "state_pop_pol_str_mult": "A bonus or penalty to the total Political Strength of all Pops",
            "state_pop_qualifications_mult": "A bonus or penalty to Qualifications",
            "state_radicals_from_discrimination_mult": "A bonus or penalty to the rate at which Pops that is subjected to Discrimination become Radical over time",
            "state_radicals_from_sol_change_accepted_culture_mult": "An increase or decrease to how many Pops of Accepted Cultures will become Radical from increases in Standard of Living",
            "state_radicals_from_sol_change_accepted_religion_mult": "An increase or decrease to how many Pops of Accepted Religions will become Radical from increases in Standard of Living",
            "state_radicals_from_sol_change_mult": "A bonus or penalty to how many Pops will become Radical from decreases in Standard of Living",
            "state_rich_expected_sol": "An increase or decrease to the minimum Standard of Living that Upper Strata Pops expect to enjoy",
            "state_rich_standard_of_living_add": "Extra Standard of Living added on top of wealth",
            "state_slave_import_mult": "An increase or decrease to the amount of Slaves that a State can potentially import each week if Slave Trade is enacted",
            "state_standard_of_living_add": "Extra Standard of Living added on top of Wealth",
            "state_tax_capacity_add": "An increase or decrease to the amount of Taxation Capacity in States",
            "state_tax_capacity_mult": "An increase or decrease to the amount of Taxation Capacity in States",
            "state_tax_collection_mult": "An increase or decrease to the final amount of all Taxes collected from Pops.",
            "state_tax_waste_add": "An increase or decrease to the amount of Tax Waste in States",
            "state_turmoil_effects_mult": "An increase or decrease of the negative effects Pop Turmoil has on the State they live in",
            "state_unincorporated_starting_wages_mult": "How much more or less Pops in Unincorporated States get as initial salaries.",
            "state_urbanization_per_level_add": "The amount of Urbanization required in a State to create 1 level of Urban Center",
            "state_urbanization_per_level_mult": "Urbanization per Urban Center",
            "state_welfare_payments_add": "The fraction of the Normal Wage at which Pops receive Welfare Payments from the state",
            "state_working_adult_ratio_add": "The ratio of Workforce to Dependents",
            "tariff_export_add": "An increase or decrease to the Tariffs paid by foreign Trade Routes that export Goods from our Market.",
            "tariff_export_outside_power_bloc_mult": "An increase or decrease to the Tariffs paid by Trade Routes by Countries outside our Power Bloc that import Goods from our Market.",
            "tariff_import_add": "An increase or decrease to the Tariffs paid by foreign Trade Routes that import Goods to our Market.",
            "tariff_import_outside_power_bloc_mult": "An increase or decrease to the Tariffs paid by Trade Routes by Countries outside our Power Bloc that import Goods to our Market.",
            "tax_consumption_add": "The rate at which goods that have a Consumption Tax placed on them are taxed",
            "tax_dividends_add": "Dividends Tax Rate",
            "tax_heathen_add": "The amount of Heathen Taxes collected from Pops each year for following a Religion that is Discriminated against",
            "tax_income_add": "The portion of their Wages that Pops must pay in taxes",
            "tax_land_add": "The amount of Land Taxes collected from Peasants",
            "tax_per_capita_add": "The amount of Per Capita Taxes collected from non- Peasants Pops",
            "unit_advancement_speed_mult": "Alters a concept_front_possessive Advancement Speed",
            "unit_army_defense_add": "A Military Unit’s Defense (Army only)",
            "unit_army_defense_mult": "A Military Unit’s Defense (Army only)",
            "unit_army_experience_gain_add": "How much Unit Experience is gained by Armies each week so that they can increase their Unit Veterancy Level",
            "unit_army_experience_gain_mult": "How much Unit Experience is gained by Armies each week so that they can increase their Unit Veterancy Level",
            "unit_army_offense_add": "A Military Unit’s Offense (Army only)",
            "unit_army_offense_mult": "A Military Unit’s Offense (Army only)",
            "unit_convoy_defense_mult": "Increase or decrease the protection offered against Convoy Raiding by escort Flotillas.",
            "unit_convoy_raiding_interception_mult": "Increase or decrease the chance of intercepting and engaging hostile Flotillas engaged in Convoy Raiding.",
            "unit_convoy_raiding_mult": "Increase or decrease the effectiveness of our Flotillas to Raid Convoys.",
            "unit_convoy_requirements_mult": "How many Convoys are needed to maintain Military Units with Supply overseas",
            "unit_defense_add": "A Military Unit’s Defense",
            "unit_defense_mult": "A Military Unit’s Defense",
            "unit_devastation_mult": "How much Devastation Military Units inflict on the State Region a battle takes place in",
            "unit_experience_gain_add": "How much Unit Experience is gained by both Armies & Navies each week so that they can increase their Unit Veterancy Level",
            "unit_experience_gain_mult": "How much Unit Experience is gained by both Armies & Navies each week so that they can increase their Unit Veterancy Level",
            "unit_kill_rate_add": "How effective a Military Unit is at ensuring their opponent's Casualties end up unable to come back to fight another day. Increases the ratio of Casualties that end up killed (instead of Wounded). Kill Rate is countered by the enemy Military Unit's Recovery Rate.",
            "unit_morale_damage_mult": "The amount of damage a Military Unit inflicts on its enemy's Morale",
            "unit_morale_loss_add": "The amount of Morale a Military Unit loses during battle",
            "unit_morale_loss_mult": "The amount of Morale a Military Unit loses during battle",
            "unit_morale_recovery_mult": "How quickly a Military Unit recovers from Morale damage inflicted by its enemy",
            "unit_navy_defense_add": "A Military Unit’s Defense (Navy only)",
            "unit_navy_defense_mult": "A Military Unit’s Defense (Navy only)",
            "unit_navy_experience_gain_add": "How much Unit Experience is gained by Navies each week so that they can increase their Unit Veterancy Level",
            "unit_navy_experience_gain_mult": "How much Unit Experience is gained by Navies each week so that they can increase their Unit Veterancy Level",
            "unit_navy_offense_add": "A Military Unit’s Offense (Navy only)",
            "unit_navy_offense_mult": "A Military Unit’s Offense (Navy only)",
            "unit_occupation_mult": "Affects battle Occupation",
            "unit_offense_add": "A Military Unit’s Offense",
            "unit_offense_mult": "A Military Unit’s Offense",
            "unit_provinces_captured_mult": "Alters the number of Provinces captured when winning an advance",
            "unit_provinces_lost_mult": "Alters the number of Provinces lost when losing a defensive battle",
            "unit_recovery_rate_add": "The percentage of Casualties a Military Unit takes that survive, in some cases by becoming Dependents. Can be increased with Mobilization Options. Recovery Rate is countered by the enemy Military Unit's Kill Rate.",
            "building_academics_mortality_mult": "An increase or decrease in the Mortality of Academics",
            "building_aristocrats_shares_add": "An increase or decrease in an Aristocrats Pop Ownership Shares",
            "building_arms_industry_throughput_add": "A bonus or penalty to both input and output of Arms Industries",
            "building_artillery_foundries_throughput_add": "A bonus or penalty to both input and output of Artillery Foundry",
            "building_arts_academy_throughput_add": "A bonus or penalty to both input and output of Arts Academy",
            "building_barracks_throughput_add": "A bonus or penalty to both input and output of Barracks",
            "building_bureaucrats_shares_add": "An increase or decrease in a Bureaucrats Pop Ownership Shares",
            "building_capitalists_shares_add": "An increase or decrease in a Capitalists Pop Ownership Shares",
            "building_chemical_plants_throughput_add": "A bonus or penalty to both input and output of Fertilizer Plants",
            "building_clergymen_shares_add": "An increase or decrease in a Clergymen Pop Ownership Shares",
            "building_coal_mine_throughput_add": "A bonus or penalty to both input and output of Coal Mines",
            "building_construction_sector_throughput_add": "A bonus or penalty to both input and output of Construction Sector",
            "building_cotton_plantation_throughput_add": "A bonus or penalty to both input and output of Cotton Plantations",
            "building_dye_plantation_throughput_add": "A bonus or penalty to both input and output of Dye Plantations",
            "building_electrics_industry_throughput_add": "A bonus or penalty to both input and output of Electrics Industries",
            "building_employment_academics_add": "Modifies the amount of Academics a building can hire per level",
            "building_employment_aristocrats_add": "Modifies the amount of Aristocrats a building can hire per level",
            "building_employment_bureaucrats_add": "Modifies the amount of Bureaucrats a building can hire per level",
            "building_employment_capitalists_add": "Modifies the amount of Capitalists a building can hire per level",
            "building_employment_clergymen_add": "Modifies the amount of Clergymen a building can hire per level",
            "building_employment_clerks_add": "Modifies the amount of Clerks a building can hire per level",
            "building_employment_engineers_add": "Modifies the amount of Engineers a building can hire per level",
            "building_employment_farmers_add": "Modifies the amount of Farmers a building can hire per level",
            "building_employment_laborers_add": "Modifies the amount of Laborers a building can hire per level",
            "building_employment_machinists_add": "Modifies the amount of Machinists a building can hire per level",
            "building_employment_officers_add": "Modifies the amount of Officers a building can hire per level",
            "building_employment_peasants_add": "Modifies the amount of Peasants a building can hire per level",
            "building_employment_shopkeepers_add": "Modifies the amount of Shopkeepers a building can hire per level",
            "building_employment_soldiers_add": "Modifies the amount of Servicemen a building can hire per level",
            "building_engineers_mortality_mult": "An increase or decrease in the Mortality of Engineers",
            "building_explosives_factory_throughput_add": "A bonus or penalty to both input and output of Explosives Factory",
            "building_fishing_wharf_throughput_add": "A bonus or penalty to both input and output of Fishing Wharves",
            "building_food_industry_throughput_add": "A bonus or penalty to both input and output of Food Industries",
            "building_furniture_manufacturies_throughput_add": "A bonus or penalty to both input and output of Furniture Manufacturies",
            "building_glassworks_throughput_add": "A bonus or penalty to both input and output of Glassworks",
            "building_gold_fields_throughput_add": "A bonus or penalty to both input and output of Gold Fields",
            "building_gold_mine_throughput_add": "A bonus or penalty to both input and output of Gold Mines",
            "building_government_administration_throughput_add": "A bonus or penalty to both input and output of Government Administration",
            "building_group_bg_agriculture_allowed_collectivization_add": "The minimum amount of Agriculture Buildings that will be worker-owned.",
            "building_group_bg_agriculture_employee_mult": "A bonus or penalty to the number of employees in Agriculture Buildings",
            "building_group_bg_agriculture_farmers_mortality_mult": "An increase or decrease in the Mortality of Farmers employed in Agriculture",
            "building_group_bg_agriculture_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Agriculture",
            "building_group_bg_agriculture_mortality_mult": "A bonus or penalty to the mortality of employees in Agriculture Buildings",
            "building_group_bg_agriculture_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Agriculture Buildings",
            "building_group_bg_agriculture_tax_mult": "A bonus or penalty to tax income from Agriculture Buildings",
            "building_group_bg_agriculture_throughput_add": "A bonus or penalty to both input and output of Agriculture",
            "building_group_bg_coal_mining_employee_mult": "A bonus or penalty to the number of employees in Coal Mines",
            "building_group_bg_coal_mining_mortality_mult": "A bonus or penalty to the mortality of employees in Coal Mines",
            "building_group_bg_coal_mining_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Coal Mines",
            "building_group_bg_coal_mining_tax_mult": "A bonus or penalty to tax income from Coal Mines",
            "building_group_bg_coffee_plantations_throughput_add": "A bonus or penalty to both input and output of Coffee Plantations",
            "building_group_bg_construction_infrastructure_usage_mult": "A bonus or penalty to the Infrastructure Usage of Construction Sector buildings",
            "building_group_bg_construction_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Construction",
            "building_group_bg_fishing_employee_mult": "A bonus or penalty to the number of employees in Fishing Buildings",
            "building_group_bg_fishing_engineers_mortality_mult": "An increase or decrease in the Mortality of Engineers employed in Fishing Wharves",
            "building_group_bg_fishing_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Fishing Wharves",
            "building_group_bg_fishing_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists employed in Fishing Wharves",
            "building_group_bg_fishing_mortality_mult": "A bonus or penalty to the mortality of employees in Fishing Wharfs",
            "building_group_bg_fishing_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Fishing Wharfs",
            "building_group_bg_fishing_tax_mult": "A bonus or penalty to tax income from Fishing Wharfs",
            "building_group_bg_fishing_throughput_add": "A bonus or penalty to both input and output of the fishing Industry",
            "building_group_bg_gold_mining_employee_mult": "A bonus or penalty to the number of employees in Gold Mines",
            "building_group_bg_gold_mining_mortality_mult": "A bonus or penalty to the mortality of employees in Gold Mines",
            "building_group_bg_gold_mining_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Gold Mines",
            "building_group_bg_gold_mining_tax_mult": "A bonus or penalty to tax income from Gold Mines",
            "building_group_bg_government_employee_mult": "A bonus or penalty to the number of employees in Government Buildings",
            "building_group_bg_government_mortality_mult": "A bonus or penalty to the mortality of employees in Government Buildings",
            "building_group_bg_government_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Government Buildings",
            "building_group_bg_government_tax_mult": "A bonus or penalty to tax income from Government Buildings",
            "building_group_bg_government_throughput_add": "A bonus or penalty to the Throughput of Government Structures",
            "building_group_bg_heavy_industry_engineers_mortality_mult": "An increase or decrease in the Mortality of Engineers employed in Heavy Industry",
            "building_group_bg_heavy_industry_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Heavy Industry",
            "building_group_bg_heavy_industry_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists employed in Heavy Industry",
            "building_group_bg_heavy_industry_throughput_add": "A bonus or penalty to both input and output of Heavy Industries",
            "building_group_bg_infrastructure_employee_mult": "A bonus or penalty to the number of employees in Infrastructure Buildings",
            "building_group_bg_infrastructure_engineers_mortality_mult": "An increase or decrease in the Mortality of Engineers employed in Infrastructure",
            "building_group_bg_infrastructure_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Infrastructure",
            "building_group_bg_infrastructure_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists employed in Infrastructure",
            "building_group_bg_infrastructure_mortality_mult": "A bonus or penalty to the mortality of employees in Infrastructure Buildings",
            "building_group_bg_infrastructure_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Infrastructure Buildings",
            "building_group_bg_infrastructure_tax_mult": "A bonus or penalty to tax income from Infrastructure Buildings",
            "building_group_bg_infrastructure_throughput_add": "A bonus or penalty to both input and output of Infrastructure Buildings",
            "building_group_bg_iron_mining_employee_mult": "A bonus or penalty to the number of employees in Iron Mines",
            "building_group_bg_iron_mining_mortality_mult": "A bonus or penalty to the mortality of employees in Iron Mines",
            "building_group_bg_iron_mining_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Iron Mines",
            "building_group_bg_iron_mining_tax_mult": "A bonus or penalty to tax income from Iron Mines",
            "building_group_bg_lead_mining_employee_mult": "A bonus or penalty to the number of employees in Lead Mines",
            "building_group_bg_lead_mining_mortality_mult": "A bonus or penalty to the mortality of employees in Lead Mines",
            "building_group_bg_lead_mining_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Lead Mines",
            "building_group_bg_lead_mining_tax_mult": "A bonus or penalty to tax income from Lead Mines",
            "building_group_bg_light_industry_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Light Industry",
            "building_group_bg_light_industry_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists employed in Light Industry",
            "building_group_bg_light_industry_throughput_add": "A bonus or penalty to both input and output of Light Industries",
            "building_group_bg_logging_employee_mult": "A bonus or penalty to the number of employees in Logging Industry Buildings",
            "building_group_bg_logging_engineers_mortality_mult": "An increase or decrease in the Mortality of Engineers employed in Logging",
            "building_group_bg_logging_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Logging",
            "building_group_bg_logging_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists employed in Logging",
            "building_group_bg_logging_mortality_mult": "A bonus or penalty to the mortality of employees in Logging Buildings",
            "building_group_bg_logging_slaves_mortality_mult": "An increase or decrease in the Mortality of Slaves employed in Logging",
            "building_group_bg_logging_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Logging Buildings",
            "building_group_bg_logging_tax_mult": "A bonus or penalty to tax income from Logging Buildings",
            "building_group_bg_logging_throughput_add": "A bonus or penalty to both input and output of the logging Industry",
            "building_group_bg_logging_unincorporated_throughput_add": "A bonus or penalty to the Throughput of Forestries in Unincorporated States",
            "building_group_bg_manufacturing_employee_mult": "A bonus or penalty to the number of employees in Manufacturing Buildings",
            "building_group_bg_manufacturing_engineers_mortality_mult": "An increase or decrease in the Mortality of Engineers employed in Manufacturing",
            "building_group_bg_manufacturing_engineers_standard_of_living_add": "An increase or decrease in the Standard of Living of Engineers employed in Manufacturing",
            "building_group_bg_manufacturing_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Manufacturing",
            "building_group_bg_manufacturing_laborers_standard_of_living_add": "An increase or decrease in the Standard of Living of Laborers employed in Manufacturing",
            "building_group_bg_manufacturing_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists employed in Manufacturing",
            "building_group_bg_manufacturing_machinists_standard_of_living_add": "An increase or decrease in the Standard of Living of Machinists employed in Manufacturing",
            "building_group_bg_manufacturing_mortality_mult": "A bonus or penalty to the mortality of employees in Manufacturing Buildings",
            "building_group_bg_manufacturing_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Manufacturing Buildings",
            "building_group_bg_manufacturing_tax_mult": "A bonus or penalty to tax income from Manufacturing Buildings",
            "building_group_bg_manufacturing_throughput_add": "A bonus or penalty to both input and output of Manufacturing Industries",
            "building_group_bg_manufacturing_unincorporated_throughput_add": "A bonus or penalty to the Throughput of Manufacturing Industries in Unincorporated States",
            "building_group_bg_military_throughput_add": "A bonus or penalty to the Throughput of Military Buildings",
            "building_group_bg_mining_employee_mult": "A bonus or penalty to the number of employees in Mines",
            "building_group_bg_mining_engineers_mortality_mult": "An increase or decrease in the Mortality of Engineers employed in Mines",
            "building_group_bg_mining_engineers_standard_of_living_add": "An increase or decrease in the Standard of Living of Engineers employed in Mines",
            "building_group_bg_mining_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Mines",
            "building_group_bg_mining_laborers_standard_of_living_add": "An increase or decrease in the Standard of Living of Laborers employed in Mines",
            "building_group_bg_mining_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists employed in Mines",
            "building_group_bg_mining_machinists_standard_of_living_add": "An increase or decrease in the Standard of Living of Machinists employed in Mines",
            "building_group_bg_mining_mortality_mult": "A bonus or penalty to the mortality of employees in Mining Buildings",
            "building_group_bg_mining_slaves_mortality_mult": "An increase or decrease in the Mortality of Slaves employed in Mines",
            "building_group_bg_mining_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Mining Buildings",
            "building_group_bg_mining_tax_mult": "A bonus or penalty to tax income from Mining Buildings",
            "building_group_bg_mining_throughput_add": "A bonus or penalty to both input and output of Mines",
            "building_group_bg_mining_unincorporated_throughput_add": "A bonus or penalty to the Throughput of Mines in Unincorporated States",
            "building_group_bg_oil_extraction_employee_mult": "A bonus or penalty to the number of employees in Oil Industry Buildings",
            "building_group_bg_oil_extraction_engineers_mortality_mult": "An increase or decrease in the Mortality of Engineers employed in Oil Extraction",
            "building_group_bg_oil_extraction_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Oil Extraction",
            "building_group_bg_oil_extraction_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists employed in Oil Extraction",
            "building_group_bg_oil_extraction_mortality_mult": "A bonus or penalty to the mortality of employees in Oil Extraction Buildings",
            "building_group_bg_oil_extraction_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Oil Extraction Buildings",
            "building_group_bg_oil_extraction_tax_mult": "A bonus or penalty to tax income from Oil Extraction Buildings",
            "building_group_bg_oil_extraction_throughput_add": "A bonus or penalty to both input and output of Oil Extractors",
            "building_group_bg_plantations_employee_mult": "A bonus or penalty to the number of employees in Plantation Buildings",
            "building_group_bg_plantations_farmers_mortality_mult": "An increase or decrease in the Mortality of Farmers employed on Plantations",
            "building_group_bg_plantations_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed on Plantations",
            "building_group_bg_plantations_mortality_mult": "A bonus or penalty to the mortality of employees in Plantation Buildings",
            "building_group_bg_plantations_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Plantation Buildings",
            "building_group_bg_plantations_tax_mult": "A bonus or penalty to tax income from Plantation Buildings",
            "building_group_bg_plantations_throughput_add": "A bonus or penalty to both input and output of Plantations",
            "building_group_bg_plantations_unincorporated_throughput_add": "A bonus or penalty to the Throughput of Plantations in Unincorporated States",
            "building_group_bg_ranching_farmers_mortality_mult": "An increase or decrease in the Mortality of Farmers employed in Ranching",
            "building_group_bg_ranching_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Ranching",
            "building_group_bg_ranching_mortality_mult": "A bonus or penalty to the mortality of employees in Ranching Buildings",
            "building_group_bg_ranching_tax_mult": "A bonus or penalty to tax income from Ranching Buildings",
            "building_group_bg_ranching_throughput_add": "A bonus or penalty to both input and output of Ranches",
            "building_group_bg_rubber_employee_mult": "A bonus or penalty to the number of employees in Rubber Industry Buildings",
            "building_group_bg_rubber_mortality_mult": "A bonus or penalty to the mortality of employees in Rubber Plantation Buildings",
            "building_group_bg_rubber_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Rubber Plantation Buildings",
            "building_group_bg_rubber_tax_mult": "A bonus or penalty to tax income from Rubber Plantation Buildings",
            "building_group_bg_rubber_throughput_add": "A bonus or penalty to both input and output of Rubber Plantations",
            "building_group_bg_rubber_unincorporated_throughput_add": "A bonus or penalty to the Throughput of Rubber Plantations in Unincorporated States",
            "building_group_bg_service_employee_mult": "A bonus or penalty to the number of employees in Urban Centers",
            "building_group_bg_service_mortality_mult": "A bonus or penalty to the mortality of employees in Urban Centers",
            "building_group_bg_service_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Urban Centers",
            "building_group_bg_service_tax_mult": "A bonus or penalty to tax income from Urban Centers",
            "building_group_bg_service_throughput_add": "A bonus or penalty to both input and output of Service Industries",
            "building_group_bg_silk_plantations_throughput_add": "A bonus or penalty to both input and output of Silk Plantations",
            "building_group_bg_sugar_plantations_throughput_add": "A bonus or penalty to both input and output of Sugar Plantations",
            "building_group_bg_sulfur_mining_employee_mult": "A bonus or penalty to the number of employees in Sulfur Mines",
            "building_group_bg_sulfur_mining_mortality_mult": "A bonus or penalty to the mortality of employees in Sulfur Mines",
            "building_group_bg_sulfur_mining_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Sulfur Mines",
            "building_group_bg_sulfur_mining_tax_mult": "A bonus or penalty to tax income from Sulfur Mines",
            "building_group_bg_tobacco_plantations_throughput_add": "A bonus or penalty to both input and output of Tobacco Plantations",
            "building_group_bg_whaling_employee_mult": "A bonus or penalty to the number of employees in Whaling Buildings",
            "building_group_bg_whaling_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers employed in Whaling Stations",
            "building_group_bg_whaling_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists employed in Whaling Stations",
            "building_group_bg_whaling_mortality_mult": "A bonus or penalty to the mortality of employees in Whaling Stations",
            "building_group_bg_whaling_standard_of_living_add": "A bonus or penalty to the Standard of Living of employees in Whaling Stations",
            "building_group_bg_whaling_tax_mult": "A bonus or penalty to tax income from Whaling Stations",
            "building_group_bg_whaling_throughput_add": "A bonus or penalty to both input and output of the Whaling Industry",
            "building_iron_mine_throughput_add": "A bonus or penalty to both input and output of Iron Mines",
            "building_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers",
            "building_lead_mine_throughput_add": "A bonus or penalty to both input and output of Lead Mines",
            "building_livestock_ranch_throughput_add": "A bonus or penalty to both input and output of Livestock Ranches",
            "building_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists",
            "building_maize_farm_throughput_add": "A bonus or penalty to both input and output of Maize Farms",
            "building_military_shipyards_throughput_add": "A bonus or penalty to both input and output of Military Shipyards",
            "building_millet_farm_throughput_add": "A bonus or penalty to both input and output of Millet Farms",
            "building_motor_industry_throughput_add": "A bonus or penalty to both input and output of Motor Industries",
            "building_munition_plants_throughput_add": "A bonus or penalty to both input and output of Munition Plants",
            "building_naval_base_throughput_add": "A bonus or penalty to both input and output of Naval Base",
            "building_opium_plantation_throughput_add": "A bonus or penalty to both input and output of Opium Plantations",
            "building_paper_mills_throughput_add": "A bonus or penalty to both input and output of Paper Mills",
            "building_port_throughput_add": "A bonus or penalty to both input and output of Port",
            "building_power_plant_throughput_add": "A bonus or penalty to both input and output of Power Plants",
            "building_railway_throughput_add": "A bonus or penalty to both input and output of Railway",
            "building_rice_farm_throughput_add": "A bonus or penalty to both input and output of Rice Farms",
            "building_rubber_plantation_throughput_add": "A bonus or penalty to both input and output of Rubber Plantations",
            "building_rye_farm_throughput_add": "A bonus or penalty to both input and output of Rye Farms",
            "building_shipyards_throughput_add": "A bonus or penalty to both input and output of Shipyards",
            "building_shopkeepers_shares_add": "An increase or decrease in a Shopkeepers Pop Ownership Shares",
            "building_silk_plantation_throughput_add": "A bonus or penalty to both input and output of Silk Plantations",
            "building_steel_mills_throughput_add": "A bonus or penalty to both input and output of Steel Mills",
            "building_subsistence_farms_throughput_add": "A bonus or penalty to both input and output of Subsistence Farms",
            "building_sulfur_mine_throughput_add": "A bonus or penalty to both input and output of Sulfur Mines",
            "building_synthetics_plants_throughput_add": "A bonus or penalty to both input and output of Synthetics Plants",
            "building_textile_mills_throughput_add": "A bonus or penalty to both input and output of Textile Mills",
            "building_tooling_workshops_throughput_add": "A bonus or penalty to both input and output of Tooling Workshops",
            "building_trade_center_throughput_add": "A bonus or penalty to both input and output of Trade Center",
            "building_university_throughput_add": "A bonus or penalty to both input and output of University",
            "building_urban_center_throughput_add": "A bonus or penalty to both input and output of Urban Center",
            "building_vineyard_plantation_throughput_add": "A bonus or penalty to both input and output of Vineyards",
            "building_war_machine_industry_throughput_add": "A bonus or penalty to both input and output of War Machine Industries",
            "building_whaling_station_throughput_add": "A bonus or penalty to both input and output of Whaling Stations",
            "building_wheat_farm_throughput_add": "A bonus or penalty to both input and output of Wheat Farms",
            "country_academics_pol_str_mult": "An increase or decrease in the Political Strength of Academics",
            "country_academics_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Academics in Elections",
            "country_aristocrats_pol_str_mult": "An increase or decrease in the Political Strength of Aristocrats",
            "country_aristocrats_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Aristocrats in Elections",
            "country_bureaucrats_pol_str_mult": "An increase or decrease in the Political Strength of Bureaucrats",
            "country_bureaucrats_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Bureaucrats in Elections",
            "country_can_impose_same_lawgroup_church_and_state_in_power_bloc_bool": "Allowed to Impose the same Law as their own in the Church and State group on other Bloc Members",
            "country_can_impose_same_lawgroup_distribution_of_power_in_power_bloc_bool": "Allowed to Impose the same Law as their own in the Distribution of Power group on other Bloc Members",
            "country_can_impose_same_lawgroup_governance_principles_in_power_bloc_bool": "Allowed to Impose the same Law as their own in the Governance Principles group on other Bloc Members",
            "country_capitalists_pol_str_mult": "An increase or decrease in the Political Strength of Capitalists",
            "country_capitalists_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Capitalists in Elections",
            "country_clergymen_pol_str_mult": "An increase or decrease in the Political Strength of Clergymen",
            "country_clergymen_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Clergymen in Elections",
            "country_clerks_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Clerks in Elections",
            "country_enactment_success_chance_law_public_schools_add": "A flat percentage point increase to the likelihood of enacting the specific law",
            "country_enactment_success_chance_law_technocracy_add": "A flat percentage point increase to the likelihood of enacting the specific law",
            "country_enactment_time_law_public_schools_mult": "A reduction or increase to the time required for legislative enactments for the specific law",
            "country_enactment_time_law_technocracy_mult": "A reduction or increase to the time required for legislative enactments for the specific law",
            "country_engineers_pol_str_mult": "An increase or decrease in the Political Strength of Engineers",
            "country_engineers_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Engineers in Elections",
            "country_farmers_pol_str_mult": "An increase or decrease in the Political Strength of Farmers",
            "country_farmers_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Farmers in Elections",
            "country_institution_colonial_affairs_max_investment_add": "A bonus or penalty to the maximum investment level of the Colonial Affairs Institution",
            "country_institution_cost_institution_colonial_affairs_mult": "An increase or reduction to the  Bureaucracy cost of bringing Colonial Affairs to the citizens",
            "country_institution_cost_institution_police_mult": "An increase or reduction to the  Bureaucracy cost of bringing Law Enforcement to the citizens",
            "country_institution_health_system_max_investment_add": "A bonus or penalty to the maximum investment level of the Health System Institution",
            "country_institution_home_affairs_max_investment_add": "A bonus or penalty to the maximum investment level of the Home Affairs Institution",
            "country_institution_impact_institution_health_system_mult": "An increase or reduction to the Impact of bringing Health System to the citizens",
            "country_institution_police_max_investment_add": "A bonus or penalty to the maximum investment level of the Law Enforcement Institution",
            "country_institution_schools_max_investment_add": "A bonus or penalty to the maximum investment level of the Education Institution",
            "country_institution_size_change_speed_institution_colonial_affairs_mult": "How fast you change the size of Colonial Affairs",
            "country_institution_size_change_speed_institution_police_mult": "How fast you change the size of Law Enforcement",
            "country_institution_social_security_max_investment_add": "A bonus or penalty to the maximum investment level of the Social Security Institution",
            "country_institution_workplace_safety_max_investment_add": "A bonus or penalty to the maximum investment level of the Workplace Safety Office Institution",
            "country_laborers_pol_str_mult": "An increase or decrease in the Political Strength of Laborers",
            "country_laborers_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Laborers in Elections",
            "country_machinists_pol_str_mult": "An increase or decrease in the Political Strength of Machinists",
            "country_machinists_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Machinists vote in Elections",
            "country_military_tech_research_speed_mult": "A bonus or penalty to the speed at which Technology in the Military category is researched when spending Innovation",
            "country_military_tech_spread_mult": "The speed at which Military technologies spread from other countries",
            "country_officers_pol_str_mult": "An increase or decrease in the Political Strength of Officers",
            "country_officers_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Officers in Elections",
            "country_peasants_pol_str_mult": "An increase or decrease in the Political Strength of Peasants",
            "country_peasants_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Peasants in Elections",
            "country_production_tech_research_speed_mult": "A bonus or penalty to the speed at which Technology in the Production category is researched when spending Innovation",
            "country_production_tech_spread_mult": "The speed at which Production technologies spread from other countries ",
            "country_shopkeepers_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Shopkeepers in Elections",
            "country_slaves_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Slaves in Elections",
            "country_society_tech_research_speed_mult": "A bonus or penalty to the speed at which Technology in the Society category is researched when spending Innovation",
            "country_society_tech_spread_mult": "The speed at which Society technologies spread from other countries",
            "country_soldiers_voting_power_add": "An increase or decrease to amount of Political Strength gained from the Votes of Servicemen in Elections",
            "goods_input_aeroplanes_add": "The amount of Aeroplanes consumed by buildings",
            "goods_input_ammunition_add": "The amount of Ammunition consumed by buildings",
            "goods_input_ammunition_mult": "The amount of  Ammunition consumed by buildings",
            "goods_input_artillery_add": "The amount of Artillery consumed by buildings",
            "goods_input_artillery_mult": "The amount of  Artillery consumed by buildings",
            "goods_input_automobiles_add": "The amount of Automobiles consumed by buildings",
            "goods_input_clippers_add": "The amount of Clippers consumed by buildings",
            "goods_input_clothes_add": "The amount of Clothes consumed by buildings",
            "goods_input_coal_add": "The amount of Coal consumed by buildings",
            "goods_input_dye_add": "The amount of Dye consumed by buildings",
            "goods_input_electricity_add": "The amount of Electricity consumed by buildings",
            "goods_input_engines_add": "The amount of Engines consumed by buildings",
            "goods_input_explosives_add": "The amount of Explosives consumed by buildings",
            "goods_input_fabric_add": "The amount of Fabric consumed by buildings",
            "goods_input_fertilizer_add": "The amount of Fertilizer consumed by buildings",
            "goods_input_fish_add": "The amount of Fish consumed by buildings",
            "goods_input_fruit_add": "The amount of Fruit consumed by buildings",
            "goods_input_glass_add": "The amount of Glass consumed by buildings",
            "goods_input_grain_add": "The amount of Grain consumed by buildings",
            "goods_input_groceries_add": "The amount of Groceries consumed by buildings",
            "goods_input_hardwood_add": "The amount of Hardwood consumed by buildings",
            "goods_input_iron_add": "The amount of Iron consumed by buildings",
            "goods_input_ironclads_add": "The amount of Ironclads consumed by buildings",
            "goods_input_lead_add": "The amount of Lead consumed by buildings",
            "goods_input_liquor_add": "The amount of Liquor consumed by buildings",
            "goods_input_manowars_add": "The amount of Man-o-Wars consumed by buildings",
            "goods_input_meat_add": "The amount of Meat consumed by buildings",
            "goods_input_oil_add": "The amount of Oil consumed by buildings",
            "goods_input_oil_mult": "The amount of  Oil consumed by buildings",
            "goods_input_opium_add": "The amount of Opium consumed by buildings",
            "goods_input_paper_add": "The amount of Paper consumed by buildings",
            "goods_input_radios_add": "The amount of Radios consumed by buildings",
            "goods_input_radios_mult": "The amount of  Radios consumed by buildings",
            "goods_input_rubber_add": "The amount of Rubber consumed by buildings",
            "goods_input_silk_add": "The amount of Fine Silk consumed by buildings",
            "goods_input_small_arms_add": "The amount of Small Arms consumed by buildings",
            "goods_input_small_arms_mult": "The amount of  Small Arms consumed by buildings",
            "goods_input_steamers_add": "The amount of Steamers consumed by buildings",
            "goods_input_steel_add": "The amount of Steel consumed by buildings",
            "goods_input_sugar_add": "The amount of Sugar consumed by buildings",
            "goods_input_sulfur_add": "The amount of Sulfur consumed by buildings",
            "goods_input_tanks_add": "The amount of Tanks consumed by buildings",
            "goods_input_tanks_mult": "The amount of  Tanks consumed by buildings",
            "goods_input_telephones_add": "The amount of Telephone consumed by buildings",
            "goods_input_tobacco_add": "The amount of Tobacco consumed by buildings",
            "goods_input_tools_add": "The amount of Tools consumed by buildings",
            "goods_input_transportation_add": "The amount of Transportation consumed by buildings",
            "goods_input_wine_add": "The amount of Wine consumed by buildings",
            "goods_input_wood_add": "The amount of Wood consumed by buildings",
            "goods_output_aeroplanes_add": "The amount of Aeroplanes produced by buildings",
            "goods_output_aeroplanes_mult": "A bonus or penalty to the amount of output produced by buildings",
            "goods_output_ammunition_add": "The amount of Ammunition produced by buildings",
            "goods_output_artillery_add": "The amount of Artillery produced by buildings",
            "goods_output_artillery_mult": "A bonus or penalty to the amount of output produced by buildings",
            "goods_output_automobiles_add": "The amount of Automobiles produced by buildings",
            "goods_output_automobiles_mult": "A bonus or penalty to the amount of output produced by buildings",
            "goods_output_clippers_add": "The amount of Clippers produced by buildings",
            "goods_output_clippers_mult": "A bonus or penalty to the amount of Clippers produced by buildings",
            "goods_output_clothes_add": "The amount of Clothes produced by buildings",
            "goods_output_coal_add": "The amount of Coal produced by buildings",
            "goods_output_coffee_add": "The amount of Coffee produced by buildings",
            "goods_output_dye_add": "The amount of Dye produced by buildings",
            "goods_output_electricity_add": "The amount of Electricity produced by buildings",
            "goods_output_electricity_mult": "A bonus or penalty to the amount of Electricity produced by buildings",
            "goods_output_engines_add": "The amount of Engines produced by buildings",
            "goods_output_engines_mult": "A bonus or penalty to the amount of output produced by buildings",
            "goods_output_explosives_add": "The amount of Explosives produced by buildings",
            "goods_output_fabric_add": "The amount of Fabric produced by buildings",
            "goods_output_fabric_mult": "A bonus or penalty to the amount of Fabric produced by buildings",
            "goods_output_fertilizer_add": "The amount of Fertilizer produced by buildings",
            "goods_output_fine_art_add": "The amount of Fine Art produced by buildings",
            "goods_output_fish_add": "The amount of Fish produced by buildings",
            "goods_output_fruit_add": "The amount of Fruit produced by buildings",
            "goods_output_fruit_mult": "A bonus or penalty to the amount of Fruit produced by buildings",
            "goods_output_furniture_add": "The amount of Furniture produced by buildings",
            "goods_output_glass_add": "The amount of Glass produced by buildings",
            "goods_output_gold_add": "The amount of Gold produced by buildings",
            "goods_output_grain_add": "The amount of Grain produced by buildings",
            "goods_output_groceries_add": "The amount of Groceries produced by buildings",
            "goods_output_hardwood_add": "The amount of Hardwood produced by buildings",
            "goods_output_hardwood_mult": "A bonus or penalty to the amount of Hardwood produced by buildings",
            "goods_output_iron_add": "The amount of Iron produced by buildings",
            "goods_output_ironclads_add": "The amount of Ironclads produced by buildings",
            "goods_output_ironclads_mult": "A bonus or penalty to the amount of Ironclads produced by buildings",
            "goods_output_lead_add": "The amount of Lead produced by buildings",
            "goods_output_liquor_add": "The amount of Liquor produced by buildings",
            "goods_output_liquor_mult": "A bonus or penalty to the amount of Liquor produced by buildings",
            "goods_output_luxury_clothes_add": "The amount of Luxury Clothes produced by buildings",
            "goods_output_luxury_furniture_add": "The amount of Luxury Furniture produced by buildings",
            "goods_output_manowars_add": "The amount of Man-o-Wars produced by buildings",
            "goods_output_manowars_mult": "A bonus or penalty to the amount of Man-o-Wars produced by buildings",
            "goods_output_meat_add": "The amount of Meat produced by buildings",
            "goods_output_oil_add": "The amount of Oil produced by buildings",
            "goods_output_oil_mult": "A bonus or penalty to the amount of Oil produced by buildings",
            "goods_output_opium_add": "The amount of Opium produced by buildings",
            "goods_output_paper_add": "The amount of Paper produced by buildings",
            "goods_output_porcelain_add": "The amount of Porcelain produced by buildings",
            "goods_output_radios_add": "The amount of Radios produced by buildings",
            "goods_output_rubber_add": "The amount of Rubber produced by buildings",
            "goods_output_services_add": "The amount of Services produced by buildings",
            "goods_output_silk_add": "The amount of Fine Silk produced by buildings",
            "goods_output_silk_mult": "A bonus or penalty to the amount of Silk produced by buildings",
            "goods_output_small_arms_add": "The amount of Small Arms produced by buildings",
            "goods_output_small_arms_mult": "A bonus or penalty to the amount of output produced by buildings",
            "goods_output_steamers_add": "The amount of Steamers produced by buildings",
            "goods_output_steamers_mult": "A bonus or penalty to the amount of Steamers produced by buildings",
            "goods_output_steel_add": "The amount of Steel produced by buildings",
            "goods_output_sugar_add": "The amount of Sugar produced by buildings",
            "goods_output_sugar_mult": "A bonus or penalty to the amount of Sugar produced by buildings",
            "goods_output_sulfur_add": "The amount of Sulfur produced by buildings",
            "goods_output_tanks_add": "The amount of Tanks produced by buildings",
            "goods_output_tanks_mult": "A bonus or penalty to the amount of output produced by buildings",
            "goods_output_tea_add": "The amount of Tea produced by buildings",
            "goods_output_telephones_add": "The amount of Telephones produced by buildings",
            "goods_output_tobacco_add": "The amount of Tobacco produced by buildings",
            "goods_output_tools_add": "The amount of Tools produced by buildings",
            "goods_output_tools_mult": "A bonus or penalty to the amount of output produced by buildings",
            "goods_output_transportation_add": "The amount of Transportation produced by buildings",
            "goods_output_wine_add": "The amount of Wine produced by buildings",
            "goods_output_wine_mult": "A bonus or penalty to the amount of Wine produced by buildings",
            "goods_output_wood_add": "The amount of Wood produced by buildings",
            "interest_group_ig_armed_forces_approval_add": "A bonus or penalty to the total Approval of the Politically Unaligned () Interest Group",
            "interest_group_ig_armed_forces_pol_str_mult": "A bonus or penalty to the total Political Strength of the Politically Unaligned () Interest Group",
            "interest_group_ig_armed_forces_pop_attraction_mult": "A bonus or penalty to the how attracted Pops are to the Politically Unaligned () Interest Group",
            "interest_group_ig_devout_approval_add": "A bonus or penalty to the total Approval of the Politically Unaligned () Interest Group",
            "interest_group_ig_devout_pol_str_mult": "A bonus or penalty to the total Political Strength of the Politically Unaligned () Interest Group",
            "interest_group_ig_devout_pop_attraction_mult": "A bonus or penalty to the how attracted Pops are to the Politically Unaligned () Interest Group",
            "interest_group_ig_industrialists_approval_add": "A bonus or penalty to the total Approval of the Politically Unaligned () Interest Group",
            "interest_group_ig_industrialists_pol_str_mult": "A bonus or penalty to the total Political Strength of the Politically Unaligned () Interest Group",
            "interest_group_ig_industrialists_pop_attraction_mult": "A bonus or penalty to the how attracted Pops are to the Politically Unaligned () Interest Group",
            "interest_group_ig_intelligentsia_approval_add": "A bonus or penalty to the total Approval of the Politically Unaligned () Interest Group",
            "interest_group_ig_intelligentsia_pol_str_mult": "A bonus or penalty to the total Political Strength of the Politically Unaligned () Interest Group",
            "interest_group_ig_intelligentsia_pop_attraction_mult": "A bonus or penalty to the how attracted Pops are to the Politically Unaligned () Interest Group",
            "interest_group_ig_landowners_approval_add": "A bonus or penalty to the total Approval of the Politically Unaligned () Interest Group",
            "interest_group_ig_landowners_pol_str_mult": "A bonus or penalty to the total Political Strength of the Politically Unaligned () Interest Group",
            "interest_group_ig_landowners_pop_attraction_mult": "A bonus or penalty to the how attracted Pops are to the Politically Unaligned () Interest Group",
            "interest_group_ig_petty_bourgeoisie_approval_add": "A bonus or penalty to the total Approval of the Politically Unaligned () Interest Group",
            "interest_group_ig_petty_bourgeoisie_pol_str_mult": "A bonus or penalty to the total Political Strength of the Politically Unaligned () Interest Group",
            "interest_group_ig_petty_bourgeoisie_pop_attraction_mult": "A bonus or penalty to the how attracted Pops are to the Politically Unaligned () Interest Group",
            "interest_group_ig_rural_folk_approval_add": "A bonus or penalty to the total Approval of the Politically Unaligned () Interest Group",
            "interest_group_ig_rural_folk_pol_str_mult": "A bonus or penalty to the total Political Strength of the Politically Unaligned () Interest Group",
            "interest_group_ig_rural_folk_pop_attraction_mult": "A bonus or penalty to the how attracted Pops are to the Politically Unaligned () Interest Group",
            "interest_group_ig_trade_unions_approval_add": "A bonus or penalty to the total Approval of the Politically Unaligned () Interest Group",
            "interest_group_ig_trade_unions_pol_str_mult": "A bonus or penalty to the total Political Strength of the Politically Unaligned () Interest Group",
            "interest_group_ig_trade_unions_pop_attraction_mult": "A bonus or penalty to the how attracted Pops are to the Politically Unaligned () Interest Group",
            "state_aborigine_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_academics_mortality_mult": "An increase or decrease in the Mortality of Academics",
            "state_afar_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_afro_american_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_afro_antillean_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_afro_brazilian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_afro_caribbean_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_afro_caribeno_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_aimara_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_ainu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_akan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_albanian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_alemannic_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_algonquian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_amazonian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_amazonic_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_amhara_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_anglo_canadian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_animist_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_apache_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_argentine_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_aristocrats_investment_pool_contribution_add": "How much of their profits Aristocrats will invest",
            "state_aristocrats_investment_pool_efficiency_mult": "An increase or decrease to how much the invested profits from Aristocrats will contribute to the Investment Pool",
            "state_aristocrats_mortality_mult": "An increase or decrease in the Mortality of Aristocrats",
            "state_armenian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_ashkenazi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_assamese_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_assyrian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_athabaskan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_atheist_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_australian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_avadhi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_azande_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_azerbaijani_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_baganda_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_baguirmi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bakongo_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_balinese_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_baluchi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bambara_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bashkir_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_basque_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bassa_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_batak_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bedouin_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_beja_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bengali_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_berber_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bidan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bihari_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_boer_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bolivian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bornean_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_bosniak_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_brazilian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_breton_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_british_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_building_barracks_max_level_add": "A bonus or penalty to the maximum level of Barracks buildings.",
            "state_building_conscription_center_max_level_add": "A bonus or penalty to the absolute maximum number of conscripted Battalions that can be raised from a single State, regardless of the Conscription Rate.",
            "state_building_construction_sector_max_level_add": "A bonus or penalty to the maximum level of Construction Sector buildings.",
            "state_building_naval_base_max_level_add": "A bonus or penalty to the maximum level of Naval Base buildings.",
            "state_building_port_max_level_add": "A bonus or penalty to the maximum level of Port buildings.",
            "state_bulgarian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_burmese_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_buryat_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_byelorussian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_caddoan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_cajun_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_capitalists_investment_pool_contribution_add": "How much of their profits Capitalists will invest",
            "state_capitalists_investment_pool_efficiency_mult": "An increase or decrease to how much the invested profits from Capitalists will contribute to the Investment Pool",
            "state_cariban_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_caribeno_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_catalan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_catholic_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_central_american_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_chechen_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_cherokee_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_chewa_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_chilean_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_chuvash_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_circassian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_clergymen_investment_pool_contribution_add": "How much of their profits Clergymen will invest",
            "state_clergymen_investment_pool_efficiency_mult": "An increase or decrease to how much the invested profits from Clergymen will contribute to the Investment Pool",
            "state_colombian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_comanche_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_confucian_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_corsican_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_cree_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_croat_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_czech_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_dakota_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_danish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_dayak_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_dinka_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_dixie_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_dutch_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_dyula_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_ecuadorian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_edo_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_equatorial_bantu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_estonian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_ewe_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_fang_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_farmers_investment_pool_contribution_add": "How much of their profits Farmers will invest",
            "state_farmers_investment_pool_efficiency_mult": "An increase or decrease to how much the invested profits from Farmers will contribute to the Investment Pool",
            "state_farmers_mortality_mult": "An increase or decrease in the Mortality of Farmers",
            "state_filipino_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_finnish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_flemish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_fluvian_bantu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_fon_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_franco_canadian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_francoprovencal_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_french_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_fulbe_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_fur_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_galician_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_gelugpa_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_georgian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_greek_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_guajiro_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_guarani_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_gujarati_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_hakka_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_han_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_haratin_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_hausa_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_hawaiian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_hazara_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_herero_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_hindu_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_hokan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_hungarian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_ibibio_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_ibo_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_icelandic_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_infrastructure_from_automobiles_consumption_add": "The amount of State Infrastructure added for each unit of Automobiles consumed by the Pops that live there",
            "state_inuit_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_irish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_iroquoian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_japanese_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_javan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_jewish_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_kachin_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kalmyk_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kanauji_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kannada_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kanuri_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_karelian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_karen_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kashmiri_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kavango_bantu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kazak_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_khmer_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_khmu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kho_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_khoisan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kikuyu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kirgiz_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kissi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_korean_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kru_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_kurdish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_laborers_mortality_mult": "An increase or decrease in the Mortality of Laborers",
            "state_lacustrine_bantu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_lao_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_latvian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_lithuanian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_lomwe_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_luba_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_lunda_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_luo_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_luri_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_maasai_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_machinists_mortality_mult": "An increase or decrease in the Mortality of Machinists",
            "state_maghrebi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mahayana_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_makua_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_malagasy_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_malay_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_malayalam_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_maltese_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_manchu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mande_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_manipuri_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_manul_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_maori_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_marathi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mari_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mashriqi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mayan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mazanderani_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_melanesian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_metis_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mexican_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_miao_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_micronesian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_min_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_miskito_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_misri_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mixtec_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_moluccan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mon_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mongo_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mongol_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mordvin_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_moro_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_mossi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_muisca_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_muskogean_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_nahua_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_navajo_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_nepali_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_nez_perce_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_nguni_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_nilotic_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_nordestino_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_north_andean_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_north_caucasian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_north_german_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_north_italian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_norwegian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_nuba_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_nuer_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_occitan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_oodham_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_oriental_orthodox_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_oriya_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_oromo_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_orthodox_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_ovimbundu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_paiute_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_panjabi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_paraguayan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_pashtun_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_patagonian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_paulista_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_peasants_education_access_add": "A bonus or penalty to education access for Peasants",
            "state_peasants_internal_migration_disallowed_bool": " Peasants are prohibited from Migration between States in their Country",
            "state_peasants_mass_migration_disallowed_bool": " Peasants are prohibited from Mass Migrating away from their Country",
            "state_peasants_mortality_mult": "An increase or decrease in the Mortality of Peasants",
            "state_persian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_peruvian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_platinean_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_polish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_polynesian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_pop_support_law_autocracy_mult": "Impacts the rate at which Pops support the Autocracy Law.",
            "state_pop_support_law_censorship_mult": "Impacts the rate at which Pops support the Censorship Law.",
            "state_pop_support_law_census_voting_add": "Impacts the rate at which Pops support the Census Suffrage Law.",
            "state_pop_support_law_closed_borders_mult": "Impacts the rate at which Pops support the Closed Borders Law.",
            "state_pop_support_law_command_economy_add": "Impacts the rate at which Pops support the Command Economy Law.",
            "state_pop_support_law_council_republic_add": "Impacts the rate at which Pops support the Council Republic Law.",
            "state_pop_support_law_council_republic_mult": "Impacts the rate at which Pops support the Council Republic Law.",
            "state_pop_support_law_dedicated_police_add": "Impacts the rate at which Pops support the Dedicated Police Force Law.",
            "state_pop_support_law_graduated_taxation_add": "Impacts the rate at which Pops support the Graduated Taxation Law.",
            "state_pop_support_law_industry_banned_add": "Impacts the rate at which Pops support the Industry Banned Law.",
            "state_pop_support_law_local_police_mult": "Impacts the rate at which Pops support the Local Police Force Law.",
            "state_pop_support_law_migration_controls_mult": "Impacts the rate at which Pops support the Migration Controls Law.",
            "state_pop_support_law_militarized_police_add": "Impacts the rate at which Pops support the Militarized Police Force Law.",
            "state_pop_support_law_militarized_police_mult": "Impacts the rate at which Pops support the Militarized Police Force Law.",
            "state_pop_support_law_monarchy_mult": "Impacts the rate at which Pops support the Monarchy Law.",
            "state_pop_support_law_national_guard_mult": "Impacts the rate at which Pops support the National Guard Law.",
            "state_pop_support_law_national_supremacy_add": "Impacts the rate at which Pops support the National Supremacy Law.",
            "state_pop_support_law_national_supremacy_mult": "Impacts the rate at which Pops support the National Supremacy Law.",
            "state_pop_support_law_no_colonial_affairs_add": "Impacts the rate at which Pops support the No Colonial Affairs Law.",
            "state_pop_support_law_no_migration_controls_mult": "Impacts the rate at which Pops support the No Migration Controls Law.",
            "state_pop_support_law_oligarchy_mult": "Impacts the rate at which Pops support the Oligarchy Law.",
            "state_pop_support_law_parliamentary_republic_add": "Impacts the rate at which Pops support the Parliamentary Republic Law.",
            "state_pop_support_law_presidential_republic_add": "Impacts the rate at which Pops support the Presidential Republic Law.",
            "state_pop_support_law_proportional_taxation_add": "Impacts the rate at which Pops support the Proportional Taxation Law.",
            "state_pop_support_law_protected_speech_mult": "Impacts the rate at which Pops support the Protected Speech Law.",
            "state_pop_support_law_racial_segregation_add": "Impacts the rate at which Pops support the Racial Segregation Law.",
            "state_pop_support_law_right_of_assembly_mult": "Impacts the rate at which Pops support the Right of Assembly Law.",
            "state_pop_support_law_secret_police_mult": "Impacts the rate at which Pops support the Secret Police Law.",
            "state_pop_support_law_slave_trade_mult": "Impacts the rate at which Pops support the Slave Trade Law.",
            "state_pop_support_law_slavery_banned_add": "Impacts the rate at which Pops support the Slavery Banned Law.",
            "state_pop_support_law_universal_suffrage_add": "Impacts the rate at which Pops support the Universal Suffrage Law.",
            "state_pop_support_law_universal_suffrage_mult": "Impacts the rate at which Pops support the Universal Suffrage Law.",
            "state_pop_support_law_wage_subsidies_add": "Impacts the rate at which Pops support the Wage Subsidies Law.",
            "state_pop_support_law_womens_suffrage_add": "Impacts the rate at which Pops support the Women’s Suffrage Law.",
            "state_pop_support_law_womens_suffrage_mult": "Impacts the rate at which Pops support the Women’s Suffrage Law.",
            "state_portuguese_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_protestant_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_pueblo_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_quechua_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_rajput_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_romanian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_ruanda_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_rundi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_russian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_salish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sami_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sara_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_scottish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sena_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_senufo_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sephardic_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_serb_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_shan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_shiite_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_shinto_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_shona_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_shopkeepers_investment_pool_contribution_add": "How much of their profits Shopkeepers will invest",
            "state_shopkeepers_investment_pool_efficiency_mult": "An increase or decrease to how much the invested profits from Shopkeepers will contribute to the Investment Pool",
            "state_siberian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sidama_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sikh_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_sindi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sinhala_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_siouan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_slaves_mortality_mult": "An increase or decrease in the Mortality of Slaves",
            "state_slovak_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_slovene_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_soldiers_mortality_mult": "An increase or decrease in the Mortality of Servicemen",
            "state_somali_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_songhai_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sorb_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sotho_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_south_andean_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_south_german_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_south_italian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_spanish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sudanese_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sukuma_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sulista_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sumatran_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_sunni_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_swahili_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_swedish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tajik_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tamil_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tarascan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tatar_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_teda_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_telegu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_thai_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_theravada_standard_of_living_add": "A bonus or penalty to a specific religion's [concept_sol]",
            "state_tibetan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tigray_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tiv_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tonga_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tswana_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tuareg_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tupinamba_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_turkish_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_turkmen_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_tuvan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_udmurt_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_ugrian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_uighur_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_ukrainian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_unyamwezi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_uruguayan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_uzbek_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_venezuelan_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_vietnamese_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_wallonian_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_welsh_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_wolof_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_xhosa_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_yakut_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_yankee_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_yao_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_yemenite_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_yi_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_yoruba_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_yuanzhumin_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_yue_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_zapotec_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_zhuang_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "state_zulu_standard_of_living_add": "A bonus or penalty to a specific culture's [concept_sol]",
            "unit_combat_unit_type_cannon_artillery_offense_mult": "Cannon Artillery Offense",
            "unit_combat_unit_type_carrier_offense_mult": "Carriers Offense",
            "unit_combat_unit_type_heavy_tank_offense_mult": "Heavy Tanks Offense",
            "unit_combat_unit_type_mechanized_infantry_offense_add": "Mechanized Infantry Offense",
            "unit_combat_unit_type_mobile_artillery_offense_mult": "Mobile Artillery Offense",
            "unit_combat_unit_type_shrapnel_artillery_offense_mult": "Shrapnel Artillery Offense",
            "unit_combat_unit_type_siege_artillery_offense_mult": "Siege Artillery Offense",
            "unit_combat_unit_type_squad_infantry_offense_add": "Squad Infantry Offense",
            "unit_combat_unit_type_submarine_offense_mult": "Submarines Offense",
            "unit_combat_unit_type_trench_infantry_offense_add": "Trench Infantry Offense",
            "unit_defense_developed_add": "A Military Unit’s Defense in Flat Terrain",
            "unit_defense_developed_mult": "A Military Unit’s Defense in Flat Terrain",
            "unit_defense_elevated_add": "A Military Unit’s Defense in Elevated Terrain",
            "unit_defense_elevated_mult": "A Military Unit’s Defense in Elevated Terrain",
            "unit_defense_flat_add": "A Military Unit’s Defense in Flat Terrain",
            "unit_defense_flat_mult": "A Military Unit’s Defense in Flat Terrain",
            "unit_defense_forested_add": "A Military Unit’s Defense in Forested Terrain",
            "unit_defense_forested_mult": "A Military Unit’s Defense in Forested Terrain",
            "unit_defense_hazardous_add": "A Military Unit’s Defense in Hazardous Terrain",
            "unit_defense_hazardous_mult": "A Military Unit’s Defense in Hazardous Terrain",
            "unit_defense_water_add": "A Military Unit’s Defense in Flat Terrain",
            "unit_defense_water_mult": "A Military Unit’s Defense in Flat Terrain",
            "unit_offense_developed_add": "A Military Unit’s Offense in Flat Terrain",
            "unit_offense_developed_mult": "A Military Unit’s Offense in Flat Terrain",
            "unit_offense_elevated_add": "A Military Unit’s Offense in Elevated Terrain",
            "unit_offense_elevated_mult": "A Military Unit’s Offense in Elevated Terrain",
            "unit_offense_flat_add": "A Military Unit’s Offense in Flat Terrain",
            "unit_offense_flat_mult": "A Military Unit’s Offense in Flat Terrain",
            "unit_offense_forested_add": "A Military Unit’s Offense in Forested Terrain",
            "unit_offense_forested_mult": "A Military Unit’s Offense in Forested Terrain",
            "unit_offense_hazardous_add": "A Military Unit’s Offense in Hazardous Terrain",
            "unit_offense_hazardous_mult": "A Military Unit’s Offense in Hazardous Terrain",
            "unit_offense_water_add": "A Military Unit’s Offense in Flat Terrain",
        }

    @property
    def simple_completion_pattern_flag_pairs(self):
        return [
            (["has_strategy", "set_strategy"], manager.ai_strats.name),
            (
                [
                    "start_building_construction",
                    "remove_building",
                    "start_building_construction",
                    "activate_building",
                    "deactivate_building",
                    "start_privately_funded_building_construction",
                    "building",
                    "building_type",
                    "has_building",
                    "is_building_type",
                    "pop_employment_building",
                    "has_active_building",
                    "set_available_for_autonomous_investment",
                    "unset_available_for_autonomous_investment",
                    "start_privately_funded_building_construction",
                ],
                manager.buildings.name,
            ),
            (
                [
                    "force_resource_depletion",
                    "force_resource_discovery",
                    "pop_employment_building_group",
                    "is_building_group",
                    "has_potential_resource",
                    "building_group",
                ],
                manager.bgs.name,
            ),
            (["add_trait", "remove_trait", "has_trait"], manager.char_traits.name),
            (
                [
                    "has_culture_graphics",
                    "country_has_primary_culture",
                    "has_pop_culture",
                    "is_homeland",
                    "add_homeland",
                    "remove_homeland",
                    "culture",
                ],
                manager.cultures.name,
            ),
            (["has_decree"], manager.decrees.name),
            (["is_diplomatic_action_type"], manager.diplo_actions.name),
            (["is_diplomatic_play_type"], manager.diplo_plays.name),
            (["has_game_rule"], manager.game_rules.name),
            (
                [
                    "add_cultural_obsession",
                    "remove_cultural_obsession",
                    "is_taxing_goods",
                    "has_cultural_obsession",
                    "is_banning_goods",
                ],
                manager.goods.name,
            ),
            (["has_government_type"], manager.gov_types.name),
            (["add_ideology", "remove_ideology", "ideology"], manager.ideologies.name),
            (
                ["expanding_institution", "has_institution", "institution"],
                manager.institutions.name,
            ),
            (
                [
                    "has_ruling_interest_group",
                    "is_interest_group_type",
                    "law_approved_by",
                    "interest_group",
                ],
                manager.igs.name,
            ),
            (["has_journal_entry"], manager.jes.name),
            (["has_modifier", "remove_modifier"], manager.mods.name),
            (["is_party_type"], manager.parties.name),
            (["is_pop_type", "pop_type"], manager.pop_types.name),
            (["has_active_production_method", "production_method"], manager.pms.name),
            (["has_pop_religion", "religion"], manager.religions.name),
            (
                ["has_state_trait", "remove_state_trait", "add_state_trait"],
                manager.state_traits.name,
            ),
            (
                ["add_declared_interest", "has_interest_marker_in_region", "hq"],
                manager.strategic_regions.name,
            ),
            (["is_subject_type", "change_subject_type"], manager.subject_types.name),
            (
                [
                    "technology",
                    "add_technology_researched",
                    "can_research",
                    "has_technology_progress",
                    "has_technology_researched",
                    "is_researching_technology",
                    "is_researching_technology_category",
                ],
                manager.technologies.name,
            ),
            (["has_terrain"], manager.terrains.name),
            (
                [
                    "set_capital",
                    "set_market_capital",
                    "country_or_subject_owns_entire_state_region",
                    "has_state_in_state_region",
                    "owns_entire_state_region",
                    "owns_treaty_port_in",
                ],
                manager.state_regions.name,
            ),
            (["is_country_type", "country_type"], manager.country_types.name),
            (["has_culture_graphics", "graphics"], manager.culture_graphics.name),
            (
                ["color", "color1", "color2", "color3", "color4", "color5"],
                manager.named_colors.name,
            ),
            (["commander_rank"], manager.battle_conditions.name),
            (["has_commander_order"], manager.commander_ranks.name),
            (["has_battle_condition"], manager.commander_orders.name),
            (["post_proposal"], manager.proposal_types.name),
            (["has_discrimination_trait"], manager.discrimination_traits.name),
        ]

    @property
    def simple_completion_scope_pattern_flag_pairs(self):
        return [
            ("b:", manager.buildings.name),
            ("bt:", manager.buildings.name),
            ("cu:", manager.cultures.name),
            ("decree_cost:", manager.decrees.name),
            ("goods:", manager.goods.name),
            ("g:", manager.goods.name),
            ("institution:", manager.institutions.name),
            ("ig:", manager.igs.name),
            ("ideology:", manager.ideologies.name),
            ("interest_group:", manager.igs.name),
            ("je:", manager.jes.name),
            ("active_law:", manager.law_groups.name),
            ("law_type:", manager.laws.name),
            ("py:", manager.parties.name),
            ("party:", manager.parties.name),
            ("pop_type:", manager.pop_types.name),
            ("rel:", manager.religions.name),
            ("religion:", manager.religions.name),
            ("sr:", manager.strategic_regions.name),
            ("s:", manager.state_regions.name),
            ("c:", manager.countries.name),
            ("unit_type:", manager.combat_unit_type.name),
            ("rank_value:", manager.country_ranks.name),
            ("company_type:", manager.companies.name),
            ("mobilization_option:", manager.mobilization_options.name),
        ]

    @property
    def data_system_completion_flag_pairs(self):
        return [
            (
                manager.battle_conditions.name,
                (sublime.KIND_ID_VARIABLE, "B", "Battle Conditions"),
            ),
            (manager.buildings.name, (sublime.KIND_ID_VARIABLE, "B", "Buildings")),
            (
                manager.combat_unit_group.name,
                (sublime.KIND_ID_VARIABLE, "C", "Combat Unit Group"),
            ),
            (
                manager.combat_unit_type.name,
                (sublime.KIND_ID_VARIABLE, "C", "Combat Unit Type"),
            ),
            (manager.cultures.name, (sublime.KIND_ID_VARIABLE, "C", "Cultures")),
            (manager.decrees.name, (sublime.KIND_ID_VARIABLE, "D", "Decrees")),
            (
                manager.diplo_actions.name,
                (sublime.KIND_ID_VARIABLE, "D", "Diplo Actions"),
            ),
            (manager.diplo_plays.name, (sublime.KIND_ID_VARIABLE, "D", "Diplo Plays")),
            (manager.goods.name, (sublime.KIND_ID_VARIABLE, "G", "Goods")),
            (manager.ideologies.name, (sublime.KIND_ID_VARIABLE, "I", "Ideologies")),
            (
                manager.institutions.name,
                (sublime.KIND_ID_VARIABLE, "I", "Institutions"),
            ),
            (manager.igs.name, (sublime.KIND_ID_VARIABLE, "I", "Name")),
            (manager.law_groups.name, (sublime.KIND_ID_VARIABLE, "L", "Law Groups")),
            (manager.laws.name, (sublime.KIND_ID_VARIABLE, "L", "Laws")),
            (manager.pop_types.name, (sublime.KIND_ID_VARIABLE, "P", "Pop Types")),
            (manager.religions.name, (sublime.KIND_ID_VARIABLE, "R", "Religions")),
            (manager.mods.name, (sublime.KIND_ID_VARIABLE, "M", "Mods")),
            (
                manager.custom_loc.name,
                (sublime.KIND_ID_VARIABLE, "C", "Customizable Localization"),
            ),
            (
                manager.scripted_gui.name,
                (sublime.KIND_ID_VARIABLE, "S", "Scripted Gui"),
            ),
            (
                manager.script_values.name,
                (sublime.KIND_ID_NAMESPACE, "S", "Script Value"),
            ),
        ]

    @property
    def data_system_completion_functions(self):
        return [
            (manager.battle_conditions.name, "GetBattleCondition"),
            (manager.buildings.name, "GetBuildingType"),
            (manager.combat_unit_group.name, "GetCombatUnitGroup"),
            (manager.combat_unit_type.name, "GetCombatUnitType"),
            (manager.cultures.name, "GetCulture"),
            (manager.custom_loc.name, "Custom"),
            (manager.custom_loc.name, "GetCustom"),
            (manager.decrees.name, "GetDecreeType"),
            (manager.diplo_actions.name, "GetDiplomaticActionType"),
            (manager.diplo_plays.name, "GetDiplomaticPlayType"),
            (manager.goods.name, "GetGoods"),
            (manager.ideologies.name, "GetIdeology"),
            (manager.igs.name, "GetInterestGroupVariant"),
            (manager.institutions.name, "GetInstitutionType"),
            (manager.law_groups.name, "GetLawGroup"),
            (manager.laws.name, "GetLawType"),
            (manager.mods.name, "GetStaticModifier"),
            (manager.pop_types.name, "GetPopType"),
            (manager.religions.name, "GetReligion"),
            (manager.scripted_gui.name, "GetScriptedGui"),
            (manager.script_values.name, "ScriptValue"),
        ]

    @property
    def completion_flag_pairs(self):
        return [
            (manager.ai_strats.name, (sublime.KIND_ID_MARKUP, "A", "Ai Strategy")),
            (manager.buildings.name, (sublime.KIND_ID_VARIABLE, "B", "Building")),
            (manager.bgs.name, (sublime.KIND_ID_VARIABLE, "B", "Building Group")),
            (
                manager.char_traits.name,
                (sublime.KIND_ID_VARIABLE, "C", "Character Trait"),
            ),
            (manager.cultures.name, (sublime.KIND_ID_NAMESPACE, "C", "Culture")),
            (manager.decrees.name, (sublime.KIND_ID_MARKUP, "D", "Decree")),
            (
                manager.diplo_actions.name,
                (sublime.KIND_ID_SNIPPET, "D", "Diplomatic Action"),
            ),
            (
                manager.diplo_plays.name,
                (sublime.KIND_ID_SNIPPET, "D", "Diplomatic Play"),
            ),
            (manager.game_rules.name, (sublime.KIND_ID_FUNCTION, "G", "Game Rule")),
            (manager.goods.name, (sublime.KIND_ID_NAMESPACE, "G", "Trade Good")),
            (manager.gov_types.name, (sublime.KIND_ID_SNIPPET, "G", "Government Type")),
            (manager.ideologies.name, (sublime.KIND_ID_NAVIGATION, "I", "Ideology")),
            (
                manager.institutions.name,
                (sublime.KIND_ID_NAVIGATION, "I", "Institution"),
            ),
            (manager.igs.name, (sublime.KIND_ID_MARKUP, "I", "Interest Group")),
            (manager.jes.name, (sublime.KIND_ID_TYPE, "J", "Journal Entry")),
            (manager.law_groups.name, (sublime.KIND_ID_VARIABLE, "L", "Law Group")),
            (
                manager.mobilization_options.name,
                (sublime.KIND_ID_VARIABLE, "M", "Mobilization Options"),
            ),
            (manager.laws.name, (sublime.KIND_ID_VARIABLE, "L", "Law")),
            (manager.mods.name, (sublime.KIND_ID_SNIPPET, "M", "Modifier")),
            (manager.parties.name, (sublime.KIND_ID_TYPE, "P", "Political Party")),
            (manager.pop_types.name, (sublime.KIND_ID_VARIABLE, "P", "Pop Type")),
            (manager.pms.name, (sublime.KIND_ID_NAVIGATION, "P", "Production Method")),
            (manager.religions.name, (sublime.KIND_ID_NAMESPACE, "R", "Religion")),
            (manager.state_traits.name, (sublime.KIND_ID_VARIABLE, "S", "State Trait")),
            (
                manager.strategic_regions.name,
                (sublime.KIND_ID_SNIPPET, "S", "Strategic Region"),
            ),
            (manager.subject_types.name, (sublime.KIND_ID_TYPE, "S", "Subject Type")),
            (manager.technologies.name, (sublime.KIND_ID_VARIABLE, "T", "Technology")),
            (manager.terrains.name, (sublime.KIND_ID_NAVIGATION, "T", "Terrain")),
            (
                manager.state_regions.name,
                (sublime.KIND_ID_NAMESPACE, "S", "State Region"),
            ),
            (manager.countries.name, (sublime.KIND_ID_NAMESPACE, "C", "Country")),
            (
                manager.country_ranks.name,
                (sublime.KIND_ID_NAMESPACE, "C", "Country Ranks"),
            ),
            (
                manager.country_types.name,
                (sublime.KIND_ID_NAMESPACE, "C", "Country Types"),
            ),
            (
                manager.culture_graphics.name,
                (sublime.KIND_ID_NAMESPACE, "C", "Culture Graphics"),
            ),
            (manager.named_colors.name, (sublime.KIND_ID_VARIABLE, "C", "Named Color")),
            (
                manager.battle_conditions.name,
                (sublime.KIND_ID_VARIABLE, "B", "Battle Condition"),
            ),
            (
                manager.commander_ranks.name,
                (sublime.KIND_ID_VARIABLE, "C", "Commander Rank"),
            ),
            (
                manager.commander_orders.name,
                (sublime.KIND_ID_VARIABLE, "C", "Commander Order"),
            ),
            (
                manager.combat_unit_type.name,
                (sublime.KIND_ID_NAMESPACE, "C", "Combat Unit Type"),
            ),
            (
                manager.proposal_types.name,
                (sublime.KIND_ID_VARIABLE, "P", "Proposal Type"),
            ),
            (manager.companies.name, (sublime.KIND_ID_VARIABLE, "C", "Company")),
            (
                manager.discrimination_traits.name,
                (sublime.KIND_ID_VARIABLE, "D", "Discrimination Traits"),
            ),
        ]

    @property
    def auto_complete_selector_flag_pairs(self):
        return [
            ("meta.ig.bracket", manager.igs.name),
            ("meta.goods.simple.bracket", manager.goods.name),
            ("meta.ideology.bracket", manager.ideologies.name),
            ("meta.law.bracket", manager.laws.name),
            ("meta.tech.bracket", manager.technologies.name),
            ("meta.building.bracket", manager.buildings.name),
            ("meta.bg.bracket", manager.bgs.name, "type = "),
            ("meta.da.bracket", manager.diplo_actions.name, "type = "),
            ("meta.dp.bracket", manager.diplo_plays.name, "type = "),
            ("meta.je.bracket", manager.jes.name, "type = "),
            ("meta.mods.bracket", manager.mods.name, "name = "),
            ("meta.subjects.bracket", manager.subject_types.name, "type = "),
        ]

    @property
    def auto_complete_fields(self):
        return {
            manager.ai_strats.name: [],
            manager.battle_conditions.name: [],
            manager.bgs.name: [],
            manager.buildings.name: [],
            manager.char_traits.name: [],
            manager.combat_unit_type.name: [],
            manager.commander_orders.name: [],
            manager.commander_ranks.name: [],
            manager.companies.name: [],
            manager.countries.name: [],
            manager.country_ranks.name: [],
            manager.country_types.name: [],
            manager.culture_graphics.name: [],
            manager.cultures.name: [],
            manager.custom_loc.name: [],
            manager.decrees.name: [],
            manager.diplo_actions.name: [],
            manager.diplo_plays.name: [],
            manager.discrimination_traits.name: [],
            manager.game_rules.name: [],
            manager.goods.name: [],
            manager.gov_types.name: [],
            manager.ideologies.name: [],
            manager.igs.name: [],
            manager.institutions.name: [],
            manager.jes.name: [],
            manager.law_groups.name: [],
            manager.laws.name: [],
            manager.mobilization_options.name: [],
            manager.mods.name: [],
            manager.named_colors.name: [],
            manager.parties.name: [],
            manager.pms.name: [],
            manager.pop_types.name: [],
            manager.proposal_types.name: [],
            manager.religions.name: [],
            manager.scripted_gui.name: [],
            manager.state_regions.name: [],
            manager.state_traits.name: [],
            manager.strategic_regions.name: [],
            manager.subject_types.name: [],
            manager.technologies.name: [],
            manager.terrains.name: [],
        }

    @property
    def script_hover_objects(self):
        return [
            (manager.ai_strats.name, "Ai Strategies"),
            (manager.bgs.name, "Building Group"),
            (manager.buildings.name, "Building"),
            (manager.char_traits.name, "Character Trait"),
            (manager.cultures.name, "Culture"),
            (manager.decrees.name, "Decree"),
            (manager.diplo_actions.name, "Diplomatic Action"),
            (manager.diplo_plays.name, "Diplomatic Play"),
            (manager.game_rules.name, "Game Rule"),
            (manager.goods.name, "Trade Good"),
            (manager.gov_types.name, "Government Type"),
            (manager.ideologies.name, "Ideology"),
            (manager.institutions.name, "Institution"),
            (manager.ig_traits.name, "Group Traits"),
            (manager.igs.name, "Interest Group"),
            (manager.jes.name, "Journal Entry"),
            (manager.law_groups.name, "Law Group"),
            (manager.laws.name, "Law"),
            (manager.mods.name, "Modifier"),
            (manager.parties.name, "Party"),
            (manager.pop_needs.name, "Pop Need"),
            (manager.pop_types.name, "Pop Type"),
            (manager.pm_groups.name, "Method Group"),
            (manager.pms.name, "Production Method"),
            (manager.religions.name, "Religion"),
            (manager.script_values.name, "Script Value"),
            (manager.scripted_effects.name, "Scripted Effect"),
            (manager.scripted_modifiers.name, "Scripted Modifer"),
            (manager.scripted_triggers.name, "Scripted Trigger"),
            (manager.state_traits.name, "State Trait"),
            (manager.strategic_regions.name, "Strategic Region"),
            (manager.subject_types.name, "Subject Types"),
            (manager.technologies.name, "Technology"),
            (manager.terrains.name, "Terrain"),
            (manager.state_regions.name, "State Region"),
            (manager.countries.name, "Country"),
            (manager.country_ranks.name, "Country Rank"),
            (manager.companies.name, "Company"),
            (manager.country_types.name, "Country Type"),
            (manager.culture_graphics.name, "Culture Graphic"),
            (manager.named_colors.name, "Named Color"),
            (manager.battle_conditions.name, "Battle Condition"),
            (manager.commander_ranks.name, "Commander Rank"),
            (manager.commander_orders.name, "Commander Order"),
            (manager.proposal_types.name, "Proposal Type"),
            (manager.discrimination_traits.name, "Discrimination Trait"),
            (manager.combat_unit_group.name, "Combat Unit Group"),
            (manager.combat_unit_type.name, "Combat Unit Type"),
            (manager.mobilization_options.name, "Mobilization Options"),
        ]

    @property
    def data_system_hover_objects(self):
        return [
            (manager.battle_conditions.name, "Battle Condition"),
            (manager.buildings.name, "Building"),
            (manager.combat_unit_group.name, "Combat Unit Group"),
            (manager.combat_unit_type.name, "Combat Unit Type"),
            (manager.cultures.name, "Culture"),
            (manager.custom_loc.name, "Customizable Localization"),
            (manager.decrees.name, "Decree"),
            (manager.diplo_actions.name, "Diplo_Action"),
            (manager.diplo_plays.name, "Diplo Play"),
            (manager.goods.name, "Goods"),
            (manager.ideologies.name, "Ideology"),
            (manager.institutions.name, "Institution"),
            (manager.igs.name, "Interest Group"),
            (manager.law_groups.name, "Law Group"),
            (manager.laws.name, "Law"),
            (manager.scripted_gui.name, "Scripted Gui"),
            (manager.pop_types.name, "Pop Type"),
            (manager.religions.name, "Religion"),
            (manager.mods.name, "Modifier"),
            (manager.script_values.name, "Script Value"),
        ]
